[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar Template = Package.templating.Template;\nvar $ = Package.jquery.$;\nvar jQuery = Package.jquery.jQuery;\nvar _ = Package.underscore._;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\nvar i18n = Package['anti:i18n'].i18n;\nvar Mongo = Package.mongo.Mongo;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar Spacebars = Package.spacebars.Spacebars;\nvar HTML = Package.htmljs.HTML;\n\n/* Package-scope variables */\nvar get, oldField, sortedRows, normalizeSort, getSortedFields, getSortQuery, sortWithFunctions, getPrimarySortField, changePrimarySort, getFilterQuery, ReactiveTable, dependOnFilters, getFilterStrings, getFilterFields;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/aslagle_reactive-table/lib/template.reactive_table.js                                                    //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n                                                                                                                     // 1\nTemplate.__checkName(\"reactiveTable\");                                                                               // 2\nTemplate[\"reactiveTable\"] = new Template(\"Template.reactiveTable\", (function() {                                     // 3\n  var view = this;                                                                                                   // 4\n  return Spacebars.With(function() {                                                                                 // 5\n    return Spacebars.call(view.lookup(\"context\"));                                                                   // 6\n  }, function() {                                                                                                    // 7\n    return [ \"\\n  \", Blaze.If(function() {                                                                           // 8\n      return Spacebars.call(view.lookup(\"ready\"));                                                                   // 9\n    }, function() {                                                                                                  // 10\n      return [ \"\\n    \", HTML.DIV({                                                                                  // 11\n        \"class\": \"clearfix\"                                                                                          // 12\n      }, \"\\n      \", HTML.DIV({                                                                                      // 13\n        \"class\": \"reactive-table-options col-sm-8 pull-right\"                                                        // 14\n      }, \"\\n        \", Blaze.If(function() {                                                                         // 15\n        return Spacebars.call(view.lookup(\"showFilter\"));                                                            // 16\n      }, function() {                                                                                                // 17\n        return [ \"\\n          \", HTML.DIV({                                                                          // 18\n          \"class\": \"reactive-table-filter form-group col-sm-8 pull-right\"                                            // 19\n        }, \"\\n            \", Blaze._TemplateWith(function() {                                                        // 20\n          return {                                                                                                   // 21\n            id: Spacebars.call(view.lookup(\"getFilterId\")),                                                          // 22\n            useFontAwesome: Spacebars.call(view.lookup(\"useFontAwesome\"))                                            // 23\n          };                                                                                                         // 24\n        }, function() {                                                                                              // 25\n          return Spacebars.include(view.lookupTemplate(\"reactiveTableFilter\"));                                      // 26\n        }), \"\\n          \"), \"\\n        \" ];                                                                         // 27\n      }), \"\\n        \", Blaze.If(function() {                                                                        // 28\n        return Spacebars.call(view.lookup(\"showColumnToggles\"));                                                     // 29\n      }, function() {                                                                                                // 30\n        return [ \"\\n          \", HTML.DIV({                                                                          // 31\n          \"class\": \"reactive-table-columns-dropdown col-sm-4 pull-right\"                                             // 32\n        }, \"\\n            \", HTML.BUTTON({                                                                           // 33\n          \"class\": \"btn btn-default dropdown-toggle\",                                                                // 34\n          id: function() {                                                                                           // 35\n            return [ \"reactive-table-add-column-\", Spacebars.mustache(view.lookup(\"id\")) ];                          // 36\n          },                                                                                                         // 37\n          \"data-toggle\": \"dropdown\"                                                                                  // 38\n        }, \"\\n              \", Blaze.View(\"lookup:i18n\", function() {                                                // 39\n          return Spacebars.mustache(view.lookup(\"i18n\"), \"reactiveTable.columns\");                                   // 40\n        }), \"\\n            \"), \"\\n            \", HTML.UL({                                                           // 41\n          \"class\": \"dropdown-menu dropdown-menu-right\",                                                              // 42\n          role: \"menu\",                                                                                              // 43\n          \"aria-labelledby\": function() {                                                                            // 44\n            return [ \"reactive-table-add-column-\", Spacebars.mustache(view.lookup(\"id\")) ];                          // 45\n          }                                                                                                          // 46\n        }, \"\\n              \", Blaze.Each(function() {                                                               // 47\n          return Spacebars.call(view.lookup(\"fields\"));                                                              // 48\n        }, function() {                                                                                              // 49\n          return [ \"\\n                \", Blaze.Unless(function() {                                                   // 50\n            return Spacebars.call(view.lookup(\"hideToggle\"));                                                        // 51\n          }, function() {                                                                                            // 52\n            return [ \"\\n                  \", HTML.LI({                                                               // 53\n              role: \"presentation\"                                                                                   // 54\n            }, HTML.A({                                                                                              // 55\n              role: \"menuitem\",                                                                                      // 56\n              tabindex: \"-1\",                                                                                        // 57\n              \"data-target\": \"#\"                                                                                     // 58\n            }, \"\\n                    \", Blaze.If(function() {                                                       // 59\n              return Spacebars.call(view.lookup(\"isVisible\"));                                                       // 60\n            }, function() {                                                                                          // 61\n              return [ \"\\n                      \", HTML.INPUT({                                                      // 62\n                type: \"checkbox\",                                                                                    // 63\n                checked: \"\",                                                                                         // 64\n                \"data-fieldid\": function() {                                                                         // 65\n                  return Spacebars.mustache(view.lookup(\"fieldId\"));                                                 // 66\n                }                                                                                                    // 67\n              }), \"\\n                    \" ];                                                                        // 68\n            }, function() {                                                                                          // 69\n              return [ \"\\n                      \", HTML.INPUT({                                                      // 70\n                type: \"checkbox\",                                                                                    // 71\n                \"data-fieldid\": function() {                                                                         // 72\n                  return Spacebars.mustache(view.lookup(\"fieldId\"));                                                 // 73\n                }                                                                                                    // 74\n              }), \"\\n                    \" ];                                                                        // 75\n            }), \"\\n                    \", HTML.LABEL(\"\\n                      \", Blaze.If(function() {               // 76\n              return Spacebars.call(view.lookup(\"labelIsTemplate\"));                                                 // 77\n            }, function() {                                                                                          // 78\n              return Spacebars.With(function() {                                                                     // 79\n                return Spacebars.call(view.lookup(\"labelData\"));                                                     // 80\n              }, function() {                                                                                        // 81\n                return Spacebars.include(function() {                                                                // 82\n                  return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"label\"));                                  // 83\n                });                                                                                                  // 84\n              }, function() {                                                                                        // 85\n                return Spacebars.include(view.lookupTemplate(\"label\"));                                              // 86\n              });                                                                                                    // 87\n            }, function() {                                                                                          // 88\n              return Blaze.View(\"lookup:getLabel\", function() {                                                      // 89\n                return Spacebars.mustache(view.lookup(\"getLabel\"));                                                  // 90\n              });                                                                                                    // 91\n            }), \"\\n                    \"), \"\\n                  \")), \"\\n                \" ];                         // 92\n          }), \"\\n              \" ];                                                                                  // 93\n        }), \"\\n            \"), \"\\n          \"), \"\\n        \" ];                                                      // 94\n      }), \"\\n      \"), \"\\n    \"), \"\\n    \", Blaze.Unless(function() {                                                // 95\n        return Spacebars.call(view.lookup(\"noData\"));                                                                // 96\n      }, function() {                                                                                                // 97\n        return [ \"\\n      \", HTML.TABLE({                                                                            // 98\n          id: function() {                                                                                           // 99\n            return Spacebars.mustache(view.lookup(\"id\"));                                                            // 100\n          },                                                                                                         // 101\n          \"class\": function() {                                                                                      // 102\n            return [ Spacebars.mustache(view.lookup(\"class\")), \" reactive-table\" ];                                  // 103\n          }                                                                                                          // 104\n        }, \"\\n        \", HTML.THEAD(\"\\n          \", HTML.TR(\"\\n            \", Blaze.Each(function() {                // 105\n          return Spacebars.call(view.lookup(\"fields\"));                                                              // 106\n        }, function() {                                                                                              // 107\n          return [ \"\\n              \", Blaze.If(function() {                                                         // 108\n            return Spacebars.call(view.lookup(\"isVisible\"));                                                         // 109\n          }, function() {                                                                                            // 110\n            return [ \"\\n                \", Blaze.If(function() {                                                     // 111\n              return Spacebars.call(view.lookup(\"isPrimarySortField\"));                                              // 112\n            }, function() {                                                                                          // 113\n              return [ \"\\n                  \", HTML.TH({                                                             // 114\n                \"class\": function() {                                                                                // 115\n                  return [ \"sortable \", Spacebars.mustache(view.lookup(\"getHeaderClass\")) ];                         // 116\n                },                                                                                                   // 117\n                fieldid: function() {                                                                                // 118\n                  return Spacebars.mustache(view.lookup(\"getFieldFieldId\"));                                         // 119\n                }                                                                                                    // 120\n              }, \"\\n                    \", Blaze.If(function() {                                                     // 121\n                return Spacebars.call(view.lookup(\"labelIsTemplate\"));                                               // 122\n              }, function() {                                                                                        // 123\n                return Spacebars.With(function() {                                                                   // 124\n                  return Spacebars.call(view.lookup(\"labelData\"));                                                   // 125\n                }, function() {                                                                                      // 126\n                  return Spacebars.include(function() {                                                              // 127\n                    return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"label\"));                                // 128\n                  });                                                                                                // 129\n                }, function() {                                                                                      // 130\n                  return Spacebars.include(view.lookupTemplate(\"label\"));                                            // 131\n                });                                                                                                  // 132\n              }, function() {                                                                                        // 133\n                return Blaze.View(\"lookup:getLabel\", function() {                                                    // 134\n                  return Spacebars.mustache(view.lookup(\"getLabel\"));                                                // 135\n                });                                                                                                  // 136\n              }), HTML.CharRef({                                                                                     // 137\n                html: \"&nbsp;\",                                                                                      // 138\n                str: \" \"                                                                                             // 139\n              }), HTML.CharRef({                                                                                     // 140\n                html: \"&nbsp;\",                                                                                      // 141\n                str: \" \"                                                                                             // 142\n              }), \"\\n                    \", Blaze.If(function() {                                                    // 143\n                return Spacebars.call(view.lookup(\"isAscending\"));                                                   // 144\n              }, function() {                                                                                        // 145\n                return [ \"\\n                      \", Blaze.If(function() {                                           // 146\n                  return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"useFontAwesome\"));                         // 147\n                }, function() {                                                                                      // 148\n                  return [ \"\\n                        \", HTML.I({                                                    // 149\n                    \"class\": \"fa fa-sort-asc\"                                                                        // 150\n                  }), \"\\n                      \" ];                                                                  // 151\n                }, function() {                                                                                      // 152\n                  return [ \"\\n                        \", HTML.CharRef({                                              // 153\n                    html: \"&#x25B2;\",                                                                                // 154\n                    str: \"▲\"                                                                                         // 155\n                  }), \"\\n                      \" ];                                                                  // 156\n                }), \"\\n                    \" ];                                                                      // 157\n              }, function() {                                                                                        // 158\n                return [ \"\\n                      \", Blaze.If(function() {                                           // 159\n                  return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"useFontAwesome\"));                         // 160\n                }, function() {                                                                                      // 161\n                  return [ \"\\n                        \", HTML.I({                                                    // 162\n                    \"class\": \"fa fa-sort-desc\"                                                                       // 163\n                  }), \"\\n                      \" ];                                                                  // 164\n                }, function() {                                                                                      // 165\n                  return [ \"\\n                        \", HTML.CharRef({                                              // 166\n                    html: \"&#x25BC;\",                                                                                // 167\n                    str: \"▼\"                                                                                         // 168\n                  }), \"\\n                      \" ];                                                                  // 169\n                }), \"\\n                    \" ];                                                                      // 170\n              }), \"\\n                  \"), \"\\n                \" ];                                                   // 171\n            }, function() {                                                                                          // 172\n              return [ \"\\n                  \", Blaze.If(function() {                                                 // 173\n                return Spacebars.call(view.lookup(\"isSortable\"));                                                    // 174\n              }, function() {                                                                                        // 175\n                return [ \"\\n                    \", HTML.TH({                                                         // 176\n                  \"class\": function() {                                                                              // 177\n                    return [ Spacebars.mustache(view.lookup(\"getHeaderClass\")), \" sortable\" ];                       // 178\n                  },                                                                                                 // 179\n                  fieldid: function() {                                                                              // 180\n                    return Spacebars.mustache(view.lookup(\"getFieldFieldId\"));                                       // 181\n                  }                                                                                                  // 182\n                }, Blaze.If(function() {                                                                             // 183\n                  return Spacebars.call(view.lookup(\"labelIsTemplate\"));                                             // 184\n                }, function() {                                                                                      // 185\n                  return Spacebars.With(function() {                                                                 // 186\n                    return Spacebars.call(view.lookup(\"labelData\"));                                                 // 187\n                  }, function() {                                                                                    // 188\n                    return Spacebars.include(function() {                                                            // 189\n                      return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"label\"));                              // 190\n                    });                                                                                              // 191\n                  }, function() {                                                                                    // 192\n                    return Spacebars.include(view.lookupTemplate(\"label\"));                                          // 193\n                  });                                                                                                // 194\n                }, function() {                                                                                      // 195\n                  return Blaze.View(\"lookup:getLabel\", function() {                                                  // 196\n                    return Spacebars.mustache(view.lookup(\"getLabel\"));                                              // 197\n                  });                                                                                                // 198\n                })), \"\\n                  \" ];                                                                       // 199\n              }, function() {                                                                                        // 200\n                return [ \"\\n                    \", HTML.TH({                                                         // 201\n                  \"class\": function() {                                                                              // 202\n                    return Spacebars.mustache(view.lookup(\"getHeaderClass\"));                                        // 203\n                  },                                                                                                 // 204\n                  fieldid: function() {                                                                              // 205\n                    return Spacebars.mustache(view.lookup(\"getFieldFieldId\"));                                       // 206\n                  }                                                                                                  // 207\n                }, Blaze.If(function() {                                                                             // 208\n                  return Spacebars.call(view.lookup(\"labelIsTemplate\"));                                             // 209\n                }, function() {                                                                                      // 210\n                  return Spacebars.With(function() {                                                                 // 211\n                    return Spacebars.call(view.lookup(\"labelData\"));                                                 // 212\n                  }, function() {                                                                                    // 213\n                    return Spacebars.include(function() {                                                            // 214\n                      return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"label\"));                              // 215\n                    });                                                                                              // 216\n                  }, function() {                                                                                    // 217\n                    return Spacebars.include(view.lookupTemplate(\"label\"));                                          // 218\n                  });                                                                                                // 219\n                }, function() {                                                                                      // 220\n                  return Blaze.View(\"lookup:getLabel\", function() {                                                  // 221\n                    return Spacebars.mustache(view.lookup(\"getLabel\"));                                              // 222\n                  });                                                                                                // 223\n                })), \"\\n                  \" ];                                                                       // 224\n              }), \"\\n                \" ];                                                                            // 225\n            }), \"\\n              \" ];                                                                                // 226\n          }), \"\\n            \" ];                                                                                    // 227\n        }), \"\\n          \"), \"\\n        \"), \"\\n        \", HTML.TBODY(\"\\n          \", Blaze.Each(function() {         // 228\n          return Spacebars.call(view.lookup(\"sortedRows\"));                                                          // 229\n        }, function() {                                                                                              // 230\n          return [ \"\\n            \", HTML.TR({                                                                       // 231\n            \"class\": function() {                                                                                    // 232\n              return Spacebars.mustache(Spacebars.dot(view.lookup(\"..\"), \"rowClass\"), view.lookup(\".\"));             // 233\n            }                                                                                                        // 234\n          }, \"\\n              \", Blaze.Each(function() {                                                             // 235\n            return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"fields\"));                                       // 236\n          }, function() {                                                                                            // 237\n            return [ \"\\n                \", Blaze.If(function() {                                                     // 238\n              return Spacebars.call(view.lookup(\"isVisible\"));                                                       // 239\n            }, function() {                                                                                          // 240\n              return [ \"\\n                  \", HTML.TD({                                                             // 241\n                \"class\": function() {                                                                                // 242\n                  return Spacebars.mustache(view.lookup(\"getCellClass\"), view.lookup(\"..\"));                         // 243\n                }                                                                                                    // 244\n              }, Blaze.If(function() {                                                                               // 245\n                return Spacebars.call(view.lookup(\"tmpl\"));                                                          // 246\n              }, function() {                                                                                        // 247\n                return Spacebars.With(function() {                                                                   // 248\n                  return Spacebars.call(view.lookup(\"..\"));                                                          // 249\n                }, function() {                                                                                      // 250\n                  return Spacebars.include(function() {                                                              // 251\n                    return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"tmpl\"));                                 // 252\n                  });                                                                                                // 253\n                });                                                                                                  // 254\n              }, function() {                                                                                        // 255\n                return Blaze.View(\"lookup:getField\", function() {                                                    // 256\n                  return Spacebars.mustache(view.lookup(\"getField\"), view.lookup(\"..\"));                             // 257\n                });                                                                                                  // 258\n              })), \"\\n                \" ];                                                                           // 259\n            }), \"\\n              \" ];                                                                                // 260\n          }), \"\\n            \"), \"\\n          \" ];                                                                   // 261\n        }), \"\\n        \"), \"\\n      \"), \"\\n      \", Blaze.If(function() {                                            // 262\n          return Spacebars.call(view.lookup(\"showNavigation\"));                                                      // 263\n        }, function() {                                                                                              // 264\n          return [ \"\\n        \", HTML.DIV({                                                                          // 265\n            \"class\": \"reactive-table-navigation\"                                                                     // 266\n          }, \"\\n          \", Blaze.If(function() {                                                                   // 267\n            return Spacebars.call(view.lookup(\"showNavigationRowsPerPage\"));                                         // 268\n          }, function() {                                                                                            // 269\n            return [ \"\\n            \", HTML.DIV({                                                                    // 270\n              \"class\": \"form-inline form-group rows-per-page\"                                                        // 271\n            }, \"\\n              \", HTML.LABEL(\"\\n                \", HTML.SPAN(Blaze.View(\"lookup:i18n\", function() {\n              return Spacebars.mustache(view.lookup(\"i18n\"), \"reactiveTable.show\");                                  // 273\n            })), \"\\n                \", HTML.INPUT({                                                                  // 274\n              \"class\": \"form-control\",                                                                               // 275\n              type: \"text\",                                                                                          // 276\n              value: function() {                                                                                    // 277\n                return Spacebars.mustache(view.lookup(\"getRowsPerPage\"));                                            // 278\n              }                                                                                                      // 279\n            }), \"\\n                \", Blaze.If(function() {                                                          // 280\n              return Spacebars.call(view.lookup(\"showRowCount\"));                                                    // 281\n            }, function() {                                                                                          // 282\n              return [ \"\\n                  \", HTML.SPAN(Blaze.View(\"lookup:i18n\", function() {                      // 283\n                return Spacebars.mustache(view.lookup(\"i18n\"), \"reactiveTable.of\");                                  // 284\n              })), \"\\n                  \", HTML.SPAN({                                                               // 285\n                \"class\": \"rows-per-page-count\"                                                                       // 286\n              }, Blaze.View(\"lookup:getRowCount\", function() {                                                       // 287\n                return Spacebars.mustache(view.lookup(\"getRowCount\"));                                               // 288\n              })), \"\\n                \" ];                                                                           // 289\n            }), \"\\n                \", HTML.SPAN({                                                                    // 290\n              \"class\": \"rows-per-page-label\"                                                                         // 291\n            }, Blaze.View(\"lookup:i18n\", function() {                                                                // 292\n              return Spacebars.mustache(view.lookup(\"i18n\"), \"reactiveTable.rowsPerPage\");                           // 293\n            })), \"\\n              \"), \"\\n            \"), \"\\n          \" ];                                           // 294\n          }), \"\\n          \", HTML.DIV({                                                                             // 295\n            \"class\": \"form-inline form-group page-number\"                                                            // 296\n          }, \"\\n            \", Blaze.If(function() {                                                                 // 297\n            return Spacebars.call(view.lookup(\"isntFirstPage\"));                                                     // 298\n          }, function() {                                                                                            // 299\n            return [ \"\\n              \", Blaze.If(function() {                                                       // 300\n              return Spacebars.call(view.lookup(\"useFontAwesome\"));                                                  // 301\n            }, function() {                                                                                          // 302\n              return [ \"\\n                \", HTML.I({                                                                // 303\n                \"class\": \"previous-page fa fa-caret-left\"                                                            // 304\n              }), \"\\n              \" ];                                                                              // 305\n            }, function() {                                                                                          // 306\n              return [ \"\\n                \", HTML.LABEL({                                                            // 307\n                \"class\": \"previous-page\"                                                                             // 308\n              }, HTML.CharRef({                                                                                      // 309\n                html: \"&lt;\",                                                                                        // 310\n                str: \"<\"                                                                                             // 311\n              })), \"\\n              \" ];                                                                             // 312\n            }), \"\\n            \" ];                                                                                  // 313\n          }), \"\\n            \", HTML.LABEL(\"\\n              \", HTML.SPAN(Blaze.View(\"lookup:i18n\", function() {      // 314\n            return Spacebars.mustache(view.lookup(\"i18n\"), \"reactiveTable.page\");                                    // 315\n          })), \"\\n              \", HTML.INPUT({                                                                      // 316\n            \"class\": \"form-control\",                                                                                 // 317\n            type: \"text\",                                                                                            // 318\n            value: function() {                                                                                      // 319\n              return Spacebars.mustache(view.lookup(\"getCurrentPage\"));                                              // 320\n            }                                                                                                        // 321\n          }), \"\\n              \", HTML.SPAN(Blaze.View(\"lookup:i18n\", function() {                                   // 322\n            return Spacebars.mustache(view.lookup(\"i18n\"), \"reactiveTable.of\");                                      // 323\n          })), \"\\n              \", HTML.SPAN({                                                                       // 324\n            \"class\": \"page-number-count\"                                                                             // 325\n          }, Blaze.View(\"lookup:getPageCount\", function() {                                                          // 326\n            return Spacebars.mustache(view.lookup(\"getPageCount\"));                                                  // 327\n          })), \"\\n            \"), \"\\n            \", Blaze.If(function() {                                            // 328\n            return Spacebars.call(view.lookup(\"isntLastPage\"));                                                      // 329\n          }, function() {                                                                                            // 330\n            return [ \"\\n              \", Blaze.If(function() {                                                       // 331\n              return Spacebars.call(view.lookup(\"useFontAwesome\"));                                                  // 332\n            }, function() {                                                                                          // 333\n              return [ \"\\n                \", HTML.I({                                                                // 334\n                \"class\": \"next-page fa fa-caret-right\"                                                               // 335\n              }), \"\\n              \" ];                                                                              // 336\n            }, function() {                                                                                          // 337\n              return [ \"\\n                \", HTML.LABEL({                                                            // 338\n                \"class\": \"next-page\"                                                                                 // 339\n              }, HTML.CharRef({                                                                                      // 340\n                html: \"&gt;\",                                                                                        // 341\n                str: \">\"                                                                                             // 342\n              })), \"\\n              \" ];                                                                             // 343\n            }), \"\\n            \" ];                                                                                  // 344\n          }), \"\\n          \"), \"\\n        \"), \"\\n      \" ];                                                          // 345\n        }), \"\\n    \" ];                                                                                              // 346\n      }, function() {                                                                                                // 347\n        return [ \"\\n      \", Spacebars.include(view.lookupTemplate(\"noDataTmpl\")), \"\\n    \" ];                       // 348\n      }), \"\\n  \" ];                                                                                                  // 349\n    }), \"\\n  \" ];                                                                                                    // 350\n  });                                                                                                                // 351\n}));                                                                                                                 // 352\n                                                                                                                     // 353\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/aslagle_reactive-table/lib/template.filter.js                                                            //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n                                                                                                                     // 1\nTemplate.__checkName(\"reactiveTableFilter\");                                                                         // 2\nTemplate[\"reactiveTableFilter\"] = new Template(\"Template.reactiveTableFilter\", (function() {                         // 3\n  var view = this;                                                                                                   // 4\n  return HTML.DIV({                                                                                                  // 5\n    id: function() {                                                                                                 // 6\n      return Spacebars.mustache(view.lookup(\"id\"));                                                                  // 7\n    },                                                                                                               // 8\n    \"class\": function() {                                                                                            // 9\n      return Spacebars.mustache(view.lookup(\"class\"));                                                               // 10\n    }                                                                                                                // 11\n  }, \"\\n    \", HTML.SPAN({                                                                                           // 12\n    \"class\": \"input-group-addon\"                                                                                     // 13\n  }, \"\\n      \", Blaze.If(function() {                                                                               // 14\n    return Spacebars.call(view.lookup(\"useFontAwesome\"));                                                            // 15\n  }, function() {                                                                                                    // 16\n    return [ \"\\n        \", HTML.I({                                                                                  // 17\n      \"class\": \"fa fa-filter\"                                                                                        // 18\n    }), \"\\n      \" ];                                                                                                // 19\n  }, function() {                                                                                                    // 20\n    return [ \"\\n        \", Blaze.If(function() {                                                                     // 21\n      return Spacebars.call(view.lookup(\"label\"));                                                                   // 22\n    }, function() {                                                                                                  // 23\n      return [ \"\\n          \", HTML.SPAN(Blaze.View(\"lookup:label\", function() {                                     // 24\n        return Spacebars.mustache(view.lookup(\"label\"));                                                             // 25\n      })), \"\\n        \" ];                                                                                           // 26\n    }, function() {                                                                                                  // 27\n      return [ \"\\n          \", Blaze.View(\"lookup:i18n\", function() {                                                // 28\n        return Spacebars.mustache(view.lookup(\"i18n\"), \"reactiveTable.filter\");                                      // 29\n      }), \"\\n        \" ];                                                                                            // 30\n    }), \"\\n      \" ];                                                                                                // 31\n  }), \"\\n    \"), \"\\n    \", Blaze.If(function() {                                                                     // 32\n    return Spacebars.call(view.lookup(\"useFontAwesome\"));                                                            // 33\n  }, function() {                                                                                                    // 34\n    return [ \"\\n      \", Blaze.If(function() {                                                                       // 35\n      return Spacebars.call(view.lookup(\"label\"));                                                                   // 36\n    }, function() {                                                                                                  // 37\n      return [ \"\\n        \", HTML.INPUT({                                                                            // 38\n        \"class\": \"reactive-table-input form-control\",                                                                // 39\n        type: \"text\",                                                                                                // 40\n        value: function() {                                                                                          // 41\n          return Spacebars.mustache(view.lookup(\"filter\"));                                                          // 42\n        },                                                                                                           // 43\n        placeholder: function() {                                                                                    // 44\n          return Spacebars.mustache(view.lookup(\"label\"));                                                           // 45\n        }                                                                                                            // 46\n      }), \"\\n      \" ];                                                                                              // 47\n    }, function() {                                                                                                  // 48\n      return [ \"\\n        \", HTML.INPUT({                                                                            // 49\n        \"class\": \"reactive-table-input form-control\",                                                                // 50\n        type: \"text\",                                                                                                // 51\n        value: function() {                                                                                          // 52\n          return Spacebars.mustache(view.lookup(\"filter\"));                                                          // 53\n        },                                                                                                           // 54\n        placeholder: function() {                                                                                    // 55\n          return Spacebars.mustache(view.lookup(\"i18n\"), \"reactiveTable.filter\");                                    // 56\n        }                                                                                                            // 57\n      }), \"\\n      \" ];                                                                                              // 58\n    }), \"\\n    \" ];                                                                                                  // 59\n  }, function() {                                                                                                    // 60\n    return [ \"\\n      \", HTML.INPUT({                                                                                // 61\n      \"class\": \"reactive-table-input form-control\",                                                                  // 62\n      type: \"text\",                                                                                                  // 63\n      value: function() {                                                                                            // 64\n        return Spacebars.mustache(view.lookup(\"filter\"));                                                            // 65\n      }                                                                                                              // 66\n    }), \"\\n    \" ];                                                                                                  // 67\n  }), \"\\n  \");                                                                                                       // 68\n}));                                                                                                                 // 69\n                                                                                                                     // 70\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/aslagle_reactive-table/lib/reactive_table_i18n.js                                                        //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\ni18n.map('en', {                                                                                                     // 1\n    reactiveTable: {                                                                                                 // 2\n        filter: 'Filter',                                                                                            // 3\n        columns: 'Columns',                                                                                          // 4\n        show: 'Show',                                                                                                // 5\n        rowsPerPage: 'rows per page',                                                                                // 6\n        page: 'Page',                                                                                                // 7\n        of: 'of'                                                                                                     // 8\n    }                                                                                                                // 9\n});                                                                                                                  // 10\n                                                                                                                     // 11\ni18n.map('fr', {                                                                                                     // 12\n    reactiveTable: {                                                                                                 // 13\n        filter: 'Filtre',                                                                                            // 14\n        columns: 'Colonnes',                                                                                         // 15\n        show: 'Voir',                                                                                                // 16\n        rowsPerPage: 'lignes par page',                                                                              // 17\n        page: 'page',                                                                                                // 18\n        of: 'sur'                                                                                                    // 19\n    }                                                                                                                // 20\n});                                                                                                                  // 21\n                                                                                                                     // 22\ni18n.map('ru', {                                                                                                     // 23\n    reactiveTable: {                                                                                                 // 24\n        filter: 'Фильтр',                                                                                            // 25\n        columns: 'Колонка',                                                                                          // 26\n        show: 'Показать',                                                                                            // 27\n        rowsPerPage: 'линий на странице',                                                                            // 28\n        page: 'Страница',                                                                                            // 29\n        of: 'из'                                                                                                     // 30\n    }                                                                                                                // 31\n});                                                                                                                  // 32\n                                                                                                                     // 33\ni18n.map('es', {                                                                                                     // 34\n    reactiveTable: {                                                                                                 // 35\n        filter: 'Filtro',                                                                                            // 36\n        columns: 'Columnas',                                                                                         // 37\n        show:   'Mostrar',                                                                                           // 38\n        rowsPerPage: 'filas por página',                                                                             // 39\n        page: 'Página',                                                                                              // 40\n        of: 'de'                                                                                                     // 41\n    }                                                                                                                // 42\n});                                                                                                                  // 43\n                                                                                                                     // 44\ni18n.map('nl', {                                                                                                     // 45\n    reactiveTable: {                                                                                                 // 46\n        filter: 'Filter',                                                                                            // 47\n        show:   'Toon',                                                                                              // 48\n        rowsPerPage: 'regels per pagina',                                                                            // 49\n        page: 'Pagina',                                                                                              // 50\n        of: 'van'                                                                                                    // 51\n    }                                                                                                                // 52\n});                                                                                                                  // 53\n                                                                                                                     // 54\ni18n.map('pt-br', {                                                                                                  // 55\n    reactiveTable: {                                                                                                 // 56\n        filter: 'Filtro',                                                                                            // 57\n        show: 'Mostrar',                                                                                             // 58\n        rowsPerPage: 'linhas por página',                                                                            // 59\n        page: 'Página',                                                                                              // 60\n        of: 'de'                                                                                                     // 61\n    }                                                                                                                // 62\n});                                                                                                                  // 63\n                                                                                                                     // 64\ni18n.map('it', {                                                                                                     // 65\n    reactiveTable: {                                                                                                 // 66\n        filter: 'Filtra',                                                                                            // 67\n        show: 'Mostra',                                                                                              // 68\n        rowsPerPage: 'righe per pagina',                                                                             // 69\n        page: 'Pagina',                                                                                              // 70\n        of: 'di'                                                                                                     // 71\n    }                                                                                                                // 72\n});                                                                                                                  // 73\n                                                                                                                     // 74\ni18n.map('sv', {                                                                                                     // 75\n    reactiveTable: {                                                                                                 // 76\n        filter: 'Filter',                                                                                            // 77\n        show: 'Visa',                                                                                                // 78\n        rowsPerPage: 'rader per sida',                                                                               // 79\n        page: 'Sida',                                                                                                // 80\n        of: 'av'                                                                                                     // 81\n    }                                                                                                                // 82\n});                                                                                                                  // 83\n                                                                                                                     // 84\ni18n.map('ua', {                                                                                                     // 85\n    reactiveTable: {                                                                                                 // 86\n        filter: 'Фільтр',                                                                                            // 87\n        show: 'Показати',                                                                                            // 88\n        rowsPerPage: 'рядків на сторінці',                                                                           // 89\n        page: 'Сторінка',                                                                                            // 90\n        of: 'з'                                                                                                      // 91\n    }                                                                                                                // 92\n});                                                                                                                  // 93\n                                                                                                                     // 94\ni18n.map('tr', {                                                                                                     // 95\n    reactiveTable: {                                                                                                 // 96\n        filter: 'Süz',                                                                                               // 97\n        columns: 'Sütunlar',                                                                                         // 98\n        show: 'Sayfa başına',                                                                                        // 99\n        rowsPerPage: 'satır göster',                                                                                 // 100\n        page: 'Sayfa',                                                                                               // 101\n        of: ' / '                                                                                                    // 102\n    }                                                                                                                // 103\n});                                                                                                                  // 104\n                                                                                                                     // 105\ni18n.map('sk', {                                                                                                     // 106\n    reactiveTable: {                                                                                                 // 107\n        filter: 'Filter',                                                                                            // 108\n        show: 'Zobraz',                                                                                              // 109\n        rowsPerPage: 'riadkov na stranu',                                                                            // 110\n        page: 'Strana',                                                                                              // 111\n        of: 'z'                                                                                                      // 112\n    }                                                                                                                // 113\n});                                                                                                                  // 114\n                                                                                                                     // 115\ni18n.map('cs', {                                                                                                     // 116\n    reactiveTable: {                                                                                                 // 117\n        filter: 'Filter',                                                                                            // 118\n        show: 'Zobraz',                                                                                              // 119\n        rowsPerPage: 'řádků na stranu',                                                                              // 120\n        page: 'Strana',                                                                                              // 121\n        of: 'z'                                                                                                      // 122\n    }                                                                                                                // 123\n});                                                                                                                  // 124\n                                                                                                                     // 125\ni18n.map('he', {                                                                                                     // 126\n    reactiveTable: {                                                                                                 // 127\n        filter: 'פילטר',                                                                                             // 128\n        show: 'הצג',                                                                                                 // 129\n        rowsPerPage: 'שורות לעמוד',                                                                                  // 130\n        page: 'עמוד',                                                                                                // 131\n        of: 'מתוך'                                                                                                   // 132\n    }                                                                                                                // 133\n});                                                                                                                  // 134\n                                                                                                                     // 135\ni18n.map('da', {                                                                                                     // 136\n    reactiveTable: {                                                                                                 // 137\n        filter: 'Filter',                                                                                            // 138\n        columns: 'Kolonner',                                                                                         // 139\n        show: 'Vis',                                                                                                 // 140\n        rowsPerPage: 'rækker per side',                                                                              // 141\n        page: 'Side',                                                                                                // 142\n        of: 'af'                                                                                                     // 143\n    }                                                                                                                // 144\n});                                                                                                                  // 145\n                                                                                                                     // 146\ni18n.map('de', {                                                                                                     // 147\n    reactiveTable: {                                                                                                 // 148\n        filter: 'Filter',                                                                                            // 149\n        columns: 'Spalten',                                                                                          // 150\n        show: 'Zeige',                                                                                               // 151\n        rowsPerPage: 'Zeilen pro Seite',                                                                             // 152\n        page: 'Seite',                                                                                               // 153\n        of: 'von'                                                                                                    // 154\n    }                                                                                                                // 155\n});                                                                                                                  // 156\n                                                                                                                     // 157\ni18n.map('fi', {                                                                                                     // 158\n    reactiveTable: {                                                                                                 // 159\n        filter: 'Suodata',                                                                                           // 160\n        show: 'Näytä',                                                                                               // 161\n        rowsPerPage: 'riviä sivulla',                                                                                // 162\n        page: 'Sivu',                                                                                                // 163\n        of: ' / '                                                                                                    // 164\n    }                                                                                                                // 165\n});                                                                                                                  // 166\n                                                                                                                     // 167\ni18n.map('no', {                                                                                                     // 168\n    reactiveTable: {                                                                                                 // 169\n        filter: 'Filter',                                                                                            // 170\n        show: 'Vis',                                                                                                 // 171\n        rowsPerPage: 'rader per side',                                                                               // 172\n        page: 'Side',                                                                                                // 173\n        of: 'av'                                                                                                     // 174\n    }                                                                                                                // 175\n});                                                                                                                  // 176\n                                                                                                                     // 177\ni18n.map('pl', {                                                                                                     // 178\n    reactiveTable: {                                                                                                 // 179\n        filter: 'Szukaj',                                                                                            // 180\n        columns: 'Kolumny',                                                                                          // 181\n        show: 'Pokaż',                                                                                               // 182\n        rowsPerPage: 'pozycji na stronie',                                                                           // 183\n        page: 'Strona',                                                                                              // 184\n        of: 'z'                                                                                                      // 185\n    }                                                                                                                // 186\n});                                                                                                                  // 187\n                                                                                                                     // 188\ni18n.map('hr', {                                                                                                     // 189\n    reactiveTable: {                                                                                                 // 190\n        filter: 'Filter',                                                                                            // 191\n        columns: 'Stupci',                                                                                           // 192\n        show: 'Prikaži',                                                                                             // 193\n        rowsPerPage: 'redova po stranici',                                                                           // 194\n        page: 'Stranica',                                                                                            // 195\n        of: 'od'                                                                                                     // 196\n    }                                                                                                                // 197\n});                                                                                                                  // 198\n                                                                                                                     // 199\ni18n.map('is', {                                                                                                     // 200\n    reactiveTable: {                                                                                                 // 201\n        filter: 'Sía',                                                                                               // 202\n        columns: 'Dálkar',                                                                                           // 203\n        show: 'Sýna',                                                                                                // 204\n        rowsPerPage: 'raðir á síðu',                                                                                 // 205\n        page: 'Síða',                                                                                                // 206\n        of: 'af'                                                                                                     // 207\n    }                                                                                                                // 208\n});                                                                                                                  // 209\n                                                                                                                     // 210\ni18n.map('zh', {                                                                                                     // 211\n    reactiveTable: {                                                                                                 // 212\n        filter: '过滤',                                                                                                // 213\n        columns: '列',                                                                                                // 214\n        show: '显示',                                                                                                  // 215\n        rowsPerPage: '每页行数',                                                                                         // 216\n        page: '页数',                                                                                                  // 217\n        of: '之'                                                                                                      // 218\n    }                                                                                                                // 219\n});                                                                                                                  // 220\n                                                                                                                     // 221\ni18n.map('fa', {                                                                                                     // 222\n    reactiveTable: {                                                                                                 // 223\n        filter: 'تزکیه',                                                                                             // 224\n        columns: 'ستون',                                                                                             // 225\n        show: 'ارائه',                                                                                               // 226\n        rowsPerPage: 'ردیف در هر صفحه',                                                                              // 227\n        page: 'صفحه',                                                                                                // 228\n        of: 'از'                                                                                                     // 229\n    }                                                                                                                // 230\n});                                                                                                                  // 231\n                                                                                                                     // 232\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/aslagle_reactive-table/lib/reactive_table.js                                                             //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nvar ReactiveTableCounts = new Mongo.Collection(\"reactive-table-counts\");                                             // 1\n                                                                                                                     // 2\nget = function(obj, field) {                                                                                         // 3\n  var keys = field.split('.');                                                                                       // 4\n  var value = obj;                                                                                                   // 5\n                                                                                                                     // 6\n  _.each(keys, function (key) {                                                                                      // 7\n      if (_.isObject(value) && _.isFunction(value[key])) {                                                           // 8\n          value = value[key]();                                                                                      // 9\n      } else if (_.isObject(value) && !_.isUndefined(value[key])) {                                                  // 10\n          value = value[key];                                                                                        // 11\n      } else {                                                                                                       // 12\n          value = null;                                                                                              // 13\n      }                                                                                                              // 14\n  });                                                                                                                // 15\n                                                                                                                     // 16\n  return value;                                                                                                      // 17\n};                                                                                                                   // 18\n                                                                                                                     // 19\nvar updateHandle = function (set_context) {                                                                          // 20\n    var context = set_context;                                                                                       // 21\n    if (context.server) {                                                                                            // 22\n        var newHandle;                                                                                               // 23\n                                                                                                                     // 24\n        // Could use the table id, but this way we can wait to change the                                            // 25\n        // page until the new data is ready, so it doesn't move around                                               // 26\n        // while rows are added and removed                                                                          // 27\n        var publicationId = _.uniqueId();                                                                            // 28\n        var newPublishedRows = new Mongo.Collection('reactive-table-rows-' + publicationId);                         // 29\n        context.nextPublicationId.set(publicationId);                                                                // 30\n                                                                                                                     // 31\n        var rowsPerPage = context.rowsPerPage.get();                                                                 // 32\n        var currentPage = context.currentPage.get();                                                                 // 33\n        var currentIndex = currentPage * rowsPerPage;                                                                // 34\n                                                                                                                     // 35\n        var options = {                                                                                              // 36\n            skip: currentIndex,                                                                                      // 37\n            limit: rowsPerPage,                                                                                      // 38\n            sort: getSortQuery(context.fields, context.multiColumnSort)                                              // 39\n        };                                                                                                           // 40\n                                                                                                                     // 41\n        var filters = context.filters.get();                                                                         // 42\n                                                                                                                     // 43\n        var onReady = function () {                                                                                  // 44\n            if (publicationId === context.nextPublicationId.get()) {                                                 // 45\n                context.ready.set(true);                                                                             // 46\n                context.publicationId.set(publicationId);                                                            // 47\n                context.publishedRows = newPublishedRows;                                                            // 48\n                var oldHandle = context.handle;                                                                      // 49\n                context.handle = newHandle;                                                                          // 50\n                                                                                                                     // 51\n                if (oldHandle) {                                                                                     // 52\n                    oldHandle.stop();                                                                                // 53\n                }                                                                                                    // 54\n            } else {                                                                                                 // 55\n                // another handle was created after this one                                                         // 56\n                newHandle.stop();                                                                                    // 57\n            }                                                                                                        // 58\n        };                                                                                                           // 59\n        var onError = function (error) {                                                                             // 60\n            console.log(\"ReactiveTable subscription error: \" + error);                                               // 61\n        };                                                                                                           // 62\n        newHandle = Meteor.subscribe(                                                                                // 63\n            \"reactive-table-\" + context.collection,                                                                  // 64\n            publicationId,                                                                                           // 65\n            getFilterStrings(filters),                                                                               // 66\n            getFilterFields(filters, context.fields),                                                                // 67\n            options,                                                                                                 // 68\n            context.rowsPerPage.get(),                                                                               // 69\n            {onReady: onReady, onError: onError}                                                                     // 70\n        );                                                                                                           // 71\n    }                                                                                                                // 72\n};                                                                                                                   // 73\n                                                                                                                     // 74\n                                                                                                                     // 75\nvar getDefaultFalseSetting = function (key, templateData) {                                                          // 76\n    if (!_.isUndefined(templateData[key]) &&                                                                         // 77\n        templateData[key]) {                                                                                         // 78\n        return true;                                                                                                 // 79\n    }                                                                                                                // 80\n    if (!_.isUndefined(templateData.settings) &&                                                                     // 81\n        !_.isUndefined(templateData.settings[key]) &&                                                                // 82\n        templateData.settings[key]) {                                                                                // 83\n        return true;                                                                                                 // 84\n    }                                                                                                                // 85\n    return false;                                                                                                    // 86\n};                                                                                                                   // 87\n                                                                                                                     // 88\nvar getDefaultTrueSetting = function (key, templateData) {                                                           // 89\n    if (!_.isUndefined(templateData[key]) &&                                                                         // 90\n        !templateData[key]) {                                                                                        // 91\n        return false;                                                                                                // 92\n    }                                                                                                                // 93\n    if (!_.isUndefined(templateData.settings) &&                                                                     // 94\n        !_.isUndefined(templateData.settings[key]) &&                                                                // 95\n        !templateData.settings[key]) {                                                                               // 96\n        return false;                                                                                                // 97\n    }                                                                                                                // 98\n    return true;                                                                                                     // 99\n};                                                                                                                   // 100\n                                                                                                                     // 101\n                                                                                                                     // 102\n                                                                                                                     // 103\nvar setup = function () {                                                                                            // 104\n    var context = {};                                                                                                // 105\n    var oldContext = this.context || {};                                                                             // 106\n    context.templateData = this.data;                                                                                // 107\n    this.data.settings = this.data.settings || {};                                                                   // 108\n    var collection = this.data.collection || this.data.settings.collection || this.data;                             // 109\n                                                                                                                     // 110\n    if (!(collection instanceof Mongo.Collection)) {                                                                 // 111\n        if (_.isArray(collection)) {                                                                                 // 112\n            // collection is an array                                                                                // 113\n            // create a new collection from the data                                                                 // 114\n            var data = collection;                                                                                   // 115\n            collection = new Mongo.Collection(null);                                                                 // 116\n            _.each(data, function (doc) {                                                                            // 117\n                collection.insert(doc);                                                                              // 118\n            });                                                                                                      // 119\n        } else if (_.isFunction(collection.fetch)) {                                                                 // 120\n            // collection is a cursor                                                                                // 121\n            // create a new collection that will reactively update                                                   // 122\n            var cursor = collection;                                                                                 // 123\n            collection = new Mongo.Collection(null);                                                                 // 124\n                                                                                                                     // 125\n            // copy over transforms from collection-helper package                                                   // 126\n            collection._transform = cursor._transform;                                                               // 127\n            collection._name = cursor.collection._name;                                                              // 128\n                                                                                                                     // 129\n            var addedCallback = function (doc) {                                                                     // 130\n                collection.insert(doc);                                                                              // 131\n            };                                                                                                       // 132\n            var changedCallback = function (doc, oldDoc) {                                                           // 133\n                collection.update(oldDoc._id, doc);                                                                  // 134\n            };                                                                                                       // 135\n            var removedCallback = function (oldDoc) {                                                                // 136\n                collection.remove(oldDoc._id);                                                                       // 137\n            };                                                                                                       // 138\n            cursor.observe({added: addedCallback, changed: changedCallback, removed: removedCallback});              // 139\n        } else if (_.isString(collection)) {                                                                         // 140\n            // server side publication                                                                               // 141\n            context.server = true;                                                                                   // 142\n            context.publicationId = new ReactiveVar();                                                               // 143\n            context.nextPublicationId = new ReactiveVar();                                                           // 144\n            context.publishedRows = new Mongo.Collection(null);                                                      // 145\n        } else {                                                                                                     // 146\n            console.error(\"reactiveTable error: argument is not an instance of Mongo.Collection, a cursor, or an array\");\n            collection = new Mongo.Collection(null);                                                                 // 148\n        }                                                                                                            // 149\n    }                                                                                                                // 150\n    context.collection = collection;                                                                                 // 151\n                                                                                                                     // 152\n    context.multiColumnSort = getDefaultTrueSetting('multiColumnSort', this.data);                                   // 153\n                                                                                                                     // 154\n    var fields = this.data.fields || this.data.settings.fields || {};                                                // 155\n    if (_.keys(fields).length < 1 ||                                                                                 // 156\n        (_.keys(fields).length === 1 &&                                                                              // 157\n         _.keys(fields)[0] === 'hash')) {                                                                            // 158\n                                                                                                                     // 159\n        if (context.server) {                                                                                        // 160\n            console.error(\"reactiveTable error: fields option is required with server-side publications\");           // 161\n        } else {                                                                                                     // 162\n            fields = _.without(_.keys(collection.findOne() || {}), '_id');                                           // 163\n        }                                                                                                            // 164\n    }                                                                                                                // 165\n                                                                                                                     // 166\n    var fieldIdsArePresentAndUnique = function (fields) {                                                            // 167\n        var uniqueFieldIds = _.chain(fields)                                                                         // 168\n            .filter(function (field) {                                                                               // 169\n                return !_.isUndefined(field.fieldId)                                                                 // 170\n            })                                                                                                       // 171\n            .map(function (field) {                                                                                  // 172\n                return field.fieldId;                                                                                // 173\n            })                                                                                                       // 174\n            .uniq()                                                                                                  // 175\n            .value();                                                                                                // 176\n        return uniqueFieldIds.length === fields.length;                                                              // 177\n    };                                                                                                               // 178\n                                                                                                                     // 179\n    // If at least one field specifies a fieldId, all fields must specify a                                          // 180\n    // fieldId with a unique value                                                                                   // 181\n    if (_.find(fields, function (field) {                                                                            // 182\n        return !_.isUndefined(field.fieldId)                                                                         // 183\n        }) && !fieldIdsArePresentAndUnique(fields)) {                                                                // 184\n        console.error(\"reactiveTable error: all fields must have a unique-valued fieldId if at least one has a fieldId attribute\");\n        fields = [];                                                                                                 // 186\n    }                                                                                                                // 187\n                                                                                                                     // 188\n    var normalizeField = function (field, i) {                                                                       // 189\n        if (typeof field === 'string') {                                                                             // 190\n            field = {key: field, label: field};                                                                      // 191\n        }                                                                                                            // 192\n        if (!_.has(field, 'fieldId')) {                                                                              // 193\n            // Default fieldId to index in fields array if not present                                               // 194\n            field.fieldId = i.toString();                                                                            // 195\n        }                                                                                                            // 196\n        if (!_.has(field, 'key')) {                                                                                  // 197\n            field.key = '';                                                                                          // 198\n        }                                                                                                            // 199\n        oldField = _.find(oldContext.fields, function (oldField) {                                                   // 200\n            return oldField.fieldId === field.fieldId;                                                               // 201\n        });                                                                                                          // 202\n        normalizeSort(field, oldField);                                                                              // 203\n        return field;                                                                                                // 204\n    };                                                                                                               // 205\n                                                                                                                     // 206\n    fields = _.map(fields, normalizeField);                                                                          // 207\n                                                                                                                     // 208\n    context.fields = fields;                                                                                         // 209\n                                                                                                                     // 210\n    var visibleFields = [];                                                                                          // 211\n    _.each(fields, function (field, i) {                                                                             // 212\n        visibleFields.push({fieldId:field.fieldId, isVisible: getDefaultFieldVisibility(field)});                    // 213\n    });                                                                                                              // 214\n    context.visibleFields = (!_.isUndefined(oldContext.visibleFields) && !_.isEmpty(oldContext.visibleFields)) ? oldContext.visibleFields : new ReactiveVar(visibleFields);\n                                                                                                                     // 216\n                                                                                                                     // 217\n    var rowClass = this.data.rowClass || this.data.settings.rowClass || function() {return '';};                     // 218\n    if (typeof rowClass === 'string') {                                                                              // 219\n        var tmp = rowClass;                                                                                          // 220\n        rowClass = function(obj) { return tmp; };                                                                    // 221\n    }                                                                                                                // 222\n    context.rowClass = rowClass;                                                                                     // 223\n                                                                                                                     // 224\n    context.class = this.data.class || this.data.settings.class || 'table table-striped table-hover col-sm-12';      // 225\n    context.id = this.data.id || this.data.settings.id || _.uniqueId('reactive-table-');                             // 226\n                                                                                                                     // 227\n    context.showNavigation = this.data.showNavigation || this.data.settings.showNavigation || 'always';              // 228\n    context.showNavigationRowsPerPage = getDefaultTrueSetting('showNavigationRowsPerPage', this.data);               // 229\n    context.showRowCount = getDefaultFalseSetting('showRowCount', this.data)                                         // 230\n                                                                                                                     // 231\n    var rowsPerPage;                                                                                                 // 232\n    if (!_.isUndefined(oldContext.rowsPerPage)) {                                                                    // 233\n        rowsPerPage = oldContext.rowsPerPage;                                                                        // 234\n    } else if (this.data.rowsPerPage && this.data.rowsPerPage instanceof ReactiveVar) {                              // 235\n        rowsPerPage = this.data.rowsPerPage;                                                                         // 236\n    } else if (this.data.settings.rowsPerPage && this.data.settings.rowsPerPage instanceof ReactiveVar) {            // 237\n        rowsPerPage = this.data.settings.rowsPerPage;                                                                // 238\n    } else {                                                                                                         // 239\n        rowsPerPage = new ReactiveVar(this.data.rowsPerPage || this.data.settings.rowsPerPage || 10);                // 240\n    }                                                                                                                // 241\n    context.rowsPerPage = rowsPerPage;                                                                               // 242\n                                                                                                                     // 243\n    var currentPage;                                                                                                 // 244\n    if (!_.isUndefined(oldContext.currentPage)) {                                                                    // 245\n        currentPage = oldContext.currentPage;                                                                        // 246\n    } else if (this.data.currentPage && this.data.currentPage instanceof ReactiveVar) {                              // 247\n        currentPage = this.data.currentPage;                                                                         // 248\n    } else if (this.data.settings.currentPage && this.data.settings.currentPage instanceof ReactiveVar) {            // 249\n        currentPage = this.data.settings.currentPage;                                                                // 250\n    } else {                                                                                                         // 251\n        currentPage = new ReactiveVar(0);                                                                            // 252\n    }                                                                                                                // 253\n    context.currentPage = currentPage;                                                                               // 254\n                                                                                                                     // 255\n    var filters = this.data.filters || this.data.settings.filters || [];                                             // 256\n    if (_.isEmpty(filters)) {                                                                                        // 257\n      context.showFilter = getDefaultTrueSetting('showFilter', this.data);                                           // 258\n    } else {                                                                                                         // 259\n      context.showFilter = getDefaultFalseSetting('showFilter', this.data);                                          // 260\n    }                                                                                                                // 261\n    if (context.showFilter) {                                                                                        // 262\n      filters.push(context.id + '-filter');                                                                          // 263\n    }                                                                                                                // 264\n    context.filters = new ReactiveVar(filters);                                                                      // 265\n                                                                                                                     // 266\n    dependOnFilters(context.filters.get(), function () {                                                             // 267\n      if (context.reactiveTableSetup) {                                                                              // 268\n        context.currentPage.set(0);                                                                                  // 269\n        updateHandle(context);                                                                                       // 270\n      }                                                                                                              // 271\n    });                                                                                                              // 272\n                                                                                                                     // 273\n    context.showColumnToggles = getDefaultFalseSetting('showColumnToggles', this.data);                              // 274\n                                                                                                                     // 275\n    if (_.isUndefined(this.data.useFontAwesome)) {                                                                   // 276\n        if (!_.isUndefined(this.data.settings.useFontAwesome)) {                                                     // 277\n            context.useFontAwesome = this.data.settings.useFontAwesome;                                              // 278\n        } else if (!_.isUndefined(Package['fortawesome:fontawesome'])) {                                             // 279\n            context.useFontAwesome = true;                                                                           // 280\n        } else {                                                                                                     // 281\n            context.useFontAwesome = false;                                                                          // 282\n        }                                                                                                            // 283\n    } else {                                                                                                         // 284\n        context.useFontAwesome = this.data.useFontAwesome;                                                           // 285\n    }                                                                                                                // 286\n    context.noDataTmpl = this.data.noDataTmpl || this.data.settings.noDataTmpl;                                      // 287\n    context.enableRegex = getDefaultFalseSetting('enableRegex', this.data);                                          // 288\n                                                                                                                     // 289\n    context.ready = new ReactiveVar(true);                                                                           // 290\n                                                                                                                     // 291\n    if (context.server) {                                                                                            // 292\n        context.ready.set(false);                                                                                    // 293\n        updateHandle(context);                                                                                       // 294\n    }                                                                                                                // 295\n                                                                                                                     // 296\n    context.reactiveTableSetup = true;                                                                               // 297\n                                                                                                                     // 298\n    this.context = context;                                                                                          // 299\n};                                                                                                                   // 300\n                                                                                                                     // 301\nvar getDefaultFieldVisibility = function (field) {                                                                   // 302\n    if (field.isVisible && field.isVisible instanceof ReactiveVar) {                                                 // 303\n        return field.isVisible;                                                                                      // 304\n    }                                                                                                                // 305\n    return new ReactiveVar(!field.hidden || (_.isFunction(field.hidden) && !field.hidden()));                        // 306\n}                                                                                                                    // 307\n                                                                                                                     // 308\nvar getRowCount = function () {                                                                                      // 309\n    if (this.server) {                                                                                               // 310\n        var count = ReactiveTableCounts.findOne(this.publicationId.get());                                           // 311\n        return (count ? count.count : 0);                                                                            // 312\n    } else {                                                                                                         // 313\n        var filterQuery = getFilterQuery(getFilterStrings(this.filters.get()), getFilterFields(this.filters.get(), this.fields), {enableRegex: this.enableRegex});\n        return this.collection.find(filterQuery).count();                                                            // 315\n    }                                                                                                                // 316\n};                                                                                                                   // 317\n                                                                                                                     // 318\nvar getPageCount = function () {                                                                                     // 319\n    var count = getRowCount.call(this);                                                                              // 320\n    var rowsPerPage = this.rowsPerPage.get();                                                                        // 321\n    return Math.ceil(count / rowsPerPage);                                                                           // 322\n};                                                                                                                   // 323\n                                                                                                                     // 324\nvar getUpdateHandleForTemplate = function (template_instance) {                                                      // 325\n    if (!template_instance.updateHandle) {                                                                           // 326\n        template_instance.updateHandle = _.debounce(updateHandle, 200);                                              // 327\n    }                                                                                                                // 328\n    return template_instance.updateHandle;                                                                           // 329\n};                                                                                                                   // 330\n                                                                                                                     // 331\nTemplate.reactiveTable.helpers({                                                                                     // 332\n    'context': function () {                                                                                         // 333\n        if (!Template.instance().context ||                                                                          // 334\n            !_.isEqual(this, Template.instance().context.templateData)) {                                            // 335\n            setup.call(Template.instance());                                                                         // 336\n        }                                                                                                            // 337\n        return Template.instance().context;                                                                          // 338\n    },                                                                                                               // 339\n                                                                                                                     // 340\n    'ready' : function () {                                                                                          // 341\n        return this.ready.get();                                                                                     // 342\n    },                                                                                                               // 343\n                                                                                                                     // 344\n    'getFilterId': function () {                                                                                     // 345\n        return this.id + '-filter';                                                                                  // 346\n    },                                                                                                               // 347\n                                                                                                                     // 348\n    'getField': function (object) {                                                                                  // 349\n        var fn = this.fn || function (value) { return value; };                                                      // 350\n        var key = this.key;                                                                                          // 351\n        var value = get(object, key);                                                                                // 352\n        return fn(value, object);                                                                                    // 353\n    },                                                                                                               // 354\n                                                                                                                     // 355\n    'getFieldIndex': function () {                                                                                   // 356\n        return _.indexOf(Template.parentData(1).fields, this);                                                       // 357\n    },                                                                                                               // 358\n                                                                                                                     // 359\n    'getFieldFieldId': function () {                                                                                 // 360\n        return this.fieldId;                                                                                         // 361\n    },                                                                                                               // 362\n                                                                                                                     // 363\n    'getKey': function () {                                                                                          // 364\n        return this.key;                                                                                             // 365\n    },                                                                                                               // 366\n                                                                                                                     // 367\n    'getHeaderClass': function () {                                                                                  // 368\n        if (_.isUndefined(this.headerClass)) {                                                                       // 369\n            return this.key;                                                                                         // 370\n        }                                                                                                            // 371\n        var css;                                                                                                     // 372\n        if (_.isFunction(this.headerClass)) {                                                                        // 373\n            css = this.headerClass();                                                                                // 374\n        } else {                                                                                                     // 375\n            css = this.headerClass;                                                                                  // 376\n        }                                                                                                            // 377\n        return css;                                                                                                  // 378\n    },                                                                                                               // 379\n                                                                                                                     // 380\n    'getCellClass': function (object) {                                                                              // 381\n        if (_.isUndefined(this.cellClass)) {                                                                         // 382\n            return this.key;                                                                                         // 383\n        }                                                                                                            // 384\n        var css;                                                                                                     // 385\n        if (_.isFunction(this.cellClass)) {                                                                          // 386\n            var value = get(object, this.key);                                                                       // 387\n            css = this.cellClass(value, object);                                                                     // 388\n        } else {                                                                                                     // 389\n            css = this.cellClass;                                                                                    // 390\n        }                                                                                                            // 391\n        return css;                                                                                                  // 392\n    },                                                                                                               // 393\n                                                                                                                     // 394\n    'labelIsTemplate': function () {                                                                                 // 395\n        return this.label && _.isObject(this.label) && this.label instanceof Blaze.Template;                         // 396\n    },                                                                                                               // 397\n                                                                                                                     // 398\n    'getLabel': function () {                                                                                        // 399\n        return _.isString(this.label) ? this.label : this.label();                                                   // 400\n    },                                                                                                               // 401\n                                                                                                                     // 402\n    'isPrimarySortField': function () {                                                                              // 403\n        var parentData = Template.parentData(1);                                                                     // 404\n        var primarySortField = getPrimarySortField(parentData.fields, parentData.multiColumnSort);                   // 405\n        return primarySortField && primarySortField.fieldId === this.fieldId;                                        // 406\n    },                                                                                                               // 407\n                                                                                                                     // 408\n    'isSortable': function () {                                                                                      // 409\n        return (this.sortable === undefined) ? true : this.sortable;                                                 // 410\n    },                                                                                                               // 411\n                                                                                                                     // 412\n    'isVisible': function () {                                                                                       // 413\n        var self = this; // is a field object                                                                        // 414\n        var topLevelData;                                                                                            // 415\n        if (Template.parentData(2) && Template.parentData(2).reactiveTableSetup) {                                   // 416\n          topLevelData = Template.parentData(2);                                                                     // 417\n        } else {                                                                                                     // 418\n          topLevelData = Template.parentData(1);                                                                     // 419\n        }                                                                                                            // 420\n        var visibleFields = topLevelData.visibleFields.get();                                                        // 421\n        var fields = topLevelData.fields;                                                                            // 422\n                                                                                                                     // 423\n        var visibleField = _.findWhere(visibleFields, {fieldId: self.fieldId});                                      // 424\n        if (visibleField) {                                                                                          // 425\n            return visibleField.isVisible.get();                                                                     // 426\n        } else {                                                                                                     // 427\n            // Add field to visibleFields list                                                                       // 428\n            var _isVisible = getDefaultFieldVisibility(self);                                                        // 429\n            visibleFields.push({fieldId:self.fieldId, isVisible:_isVisible});                                        // 430\n            topLevelData.visibleFields.set(visibleFields);                                                           // 431\n            return _isVisible.get();                                                                                 // 432\n        }                                                                                                            // 433\n    },                                                                                                               // 434\n                                                                                                                     // 435\n    'isAscending' : function () {                                                                                    // 436\n        var sortDirection = this.sortDirection.get();                                                                // 437\n        return (sortDirection === 1);                                                                                // 438\n    },                                                                                                               // 439\n                                                                                                                     // 440\n    'sortedRows': function () {                                                                                      // 441\n        if (this.server) {                                                                                           // 442\n            return this.publishedRows.find({                                                                         // 443\n              \"reactive-table-id\": this.publicationId.get()                                                          // 444\n            }, {                                                                                                     // 445\n              sort: {                                                                                                // 446\n                \"reactive-table-sort\": 1                                                                             // 447\n              }                                                                                                      // 448\n            });                                                                                                      // 449\n        } else  {                                                                                                    // 450\n            var sortByValue = _.all(getSortedFields(this.fields, this.multiColumnSort), function (field) {           // 451\n                return field.sortByValue || !field.fn;                                                               // 452\n            });                                                                                                      // 453\n            var filterQuery = getFilterQuery(getFilterStrings(this.filters.get()), getFilterFields(this.filters.get(), this.fields), {enableRegex: this.enableRegex});\n                                                                                                                     // 455\n            var limit = this.rowsPerPage.get();                                                                      // 456\n            var currentPage = this.currentPage.get();                                                                // 457\n            var skip = currentPage * limit;                                                                          // 458\n                                                                                                                     // 459\n            if (sortByValue) {                                                                                       // 460\n                                                                                                                     // 461\n                var sortQuery = getSortQuery(this.fields, this.multiColumnSort);                                     // 462\n                return this.collection.find(filterQuery, {                                                           // 463\n                    sort: sortQuery,                                                                                 // 464\n                    skip: skip,                                                                                      // 465\n                    limit: limit                                                                                     // 466\n                });                                                                                                  // 467\n                                                                                                                     // 468\n            } else {                                                                                                 // 469\n                                                                                                                     // 470\n                var rows = this.collection.find(filterQuery).fetch();                                                // 471\n                sortedRows = sortWithFunctions(rows, this.fields, this.multiColumnSort);                             // 472\n                return sortedRows.slice(skip, skip + limit);                                                         // 473\n                                                                                                                     // 474\n            }                                                                                                        // 475\n        }                                                                                                            // 476\n    },                                                                                                               // 477\n                                                                                                                     // 478\n    'noData': function () {                                                                                          // 479\n        var pageCount = getPageCount.call(this);                                                                     // 480\n        return (pageCount === 0) && this.noDataTmpl;                                                                 // 481\n    },                                                                                                               // 482\n                                                                                                                     // 483\n    'getPageCount' : getPageCount,                                                                                   // 484\n                                                                                                                     // 485\n    'getRowsPerPage' : function () {                                                                                 // 486\n        return this.rowsPerPage.get();                                                                               // 487\n    },                                                                                                               // 488\n                                                                                                                     // 489\n    'getCurrentPage' : function () {                                                                                 // 490\n        return 1 + this.currentPage.get();                                                                           // 491\n    },                                                                                                               // 492\n                                                                                                                     // 493\n    'isntFirstPage' : function () {                                                                                  // 494\n        return this.currentPage.get() > 0;                                                                           // 495\n    },                                                                                                               // 496\n                                                                                                                     // 497\n    'isntLastPage' : function () {                                                                                   // 498\n        var currentPage = 1 + this.currentPage.get();                                                                // 499\n        var pageCount = getPageCount.call(this);                                                                     // 500\n        return currentPage < pageCount;                                                                              // 501\n    },                                                                                                               // 502\n                                                                                                                     // 503\n    'showNavigation' : function () {                                                                                 // 504\n        if (this.showNavigation === 'always') return true;                                                           // 505\n        if (this.showNavigation === 'never') return false;                                                           // 506\n        return getPageCount.call(this) > 1;                                                                          // 507\n    },                                                                                                               // 508\n    'getRowCount': getRowCount                                                                                       // 509\n});                                                                                                                  // 510\n                                                                                                                     // 511\nTemplate.reactiveTable.events({                                                                                      // 512\n    'click .reactive-table .sortable': function (event) {                                                            // 513\n        var template = Template.instance();                                                                          // 514\n        var target = $(event.target).is('i') ? $(event.target).parent() : $(event.target);                           // 515\n        var sortFieldId = target.attr('fieldid');                                                                    // 516\n        changePrimarySort(sortFieldId, template.context.fields, template.multiColumnSort);                           // 517\n        getUpdateHandleForTemplate(template)(template.context);                                                      // 518\n    },                                                                                                               // 519\n                                                                                                                     // 520\n    'click .reactive-table-columns-dropdown li': function (event) {                                                  // 521\n        var template = Template.instance();                                                                          // 522\n        var target = $(event.currentTarget);                                                                         // 523\n        var fieldId = target.find('input').attr('data-fieldid');                                                     // 524\n        var visibleFields = template.context.visibleFields.get();                                                    // 525\n        var visibleField = _.findWhere(visibleFields, {fieldId: fieldId});                                           // 526\n        if (visibleField) {                                                                                          // 527\n            // Toggle visibility                                                                                     // 528\n            visibleField.isVisible.set(!visibleField.isVisible.get());                                               // 529\n            template.context.visibleFields.set(visibleFields);                                                       // 530\n        }                                                                                                            // 531\n    },                                                                                                               // 532\n                                                                                                                     // 533\n    'change .reactive-table-navigation .rows-per-page input': function (event) {                                     // 534\n        var rowsPerPage = Math.max(~~$(event.target).val(), 1);                                                      // 535\n        var template = Template.instance();                                                                          // 536\n        template.context.rowsPerPage.set(rowsPerPage);                                                               // 537\n        $(event.target).val(rowsPerPage);                                                                            // 538\n                                                                                                                     // 539\n        var currentPage = template.context.currentPage.get() + 1;                                                    // 540\n        var pageCount = getPageCount.call(this);                                                                     // 541\n        if (currentPage > pageCount) {                                                                               // 542\n          template.context.currentPage.set(pageCount - 1);                                                           // 543\n        }                                                                                                            // 544\n        getUpdateHandleForTemplate(template)(template.context);                                                      // 545\n    },                                                                                                               // 546\n                                                                                                                     // 547\n    'change .reactive-table-navigation .page-number input': function (event) {                                       // 548\n        var currentPage = Math.max(~~$(event.target).val(), 1);                                                      // 549\n        var pageCount = getPageCount.call(this);                                                                     // 550\n        if (currentPage > pageCount) {                                                                               // 551\n          currentPage = pageCount;                                                                                   // 552\n        }                                                                                                            // 553\n        if (currentPage < 0) {                                                                                       // 554\n          currentPage = 1;                                                                                           // 555\n        }                                                                                                            // 556\n        var template = Template.instance();                                                                          // 557\n        template.context.currentPage.set(currentPage - 1);                                                           // 558\n        $(event.target).val(currentPage);                                                                            // 559\n        getUpdateHandleForTemplate(template)(template.context);                                                      // 560\n    },                                                                                                               // 561\n                                                                                                                     // 562\n    'click .reactive-table-navigation .previous-page': function (event) {                                            // 563\n        var template = Template.instance();                                                                          // 564\n        var currentPage = template.context.currentPage.get();                                                        // 565\n        template.context.currentPage.set(currentPage - 1);                                                           // 566\n        getUpdateHandleForTemplate(template)(template.context);                                                      // 567\n    },                                                                                                               // 568\n                                                                                                                     // 569\n    'click .reactive-table-navigation .next-page': function (event) {                                                // 570\n        var template = Template.instance();                                                                          // 571\n        var currentPage = template.context.currentPage.get();                                                        // 572\n        template.context.currentPage.set(currentPage + 1);                                                           // 573\n        getUpdateHandleForTemplate(template)(template.context);                                                      // 574\n    }                                                                                                                // 575\n});                                                                                                                  // 576\n                                                                                                                     // 577\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/aslagle_reactive-table/lib/sort.js                                                                       //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nnormalizeSort = function (field, oldField) {                                                                         // 1\n  // preserve user sort settings                                                                                     // 2\n  if (oldField && _.has(oldField, 'sortOrder')) {                                                                    // 3\n    field.sortOrder = oldField.sortOrder;                                                                            // 4\n  }                                                                                                                  // 5\n  if (oldField && _.has(oldField, 'sortDirection')) {                                                                // 6\n    field.sortDirection = oldField.sortDirection;                                                                    // 7\n  }                                                                                                                  // 8\n                                                                                                                     // 9\n  // backwards-compatibility                                                                                         // 10\n  if (!_.has(field, 'sortOrder') && _.has(field, 'sort')) {                                                          // 11\n    console.warn('reactiveTable warning: The \"sort\" option for fields is deprecated');                               // 12\n    field.sortOrder = 0;                                                                                             // 13\n    field.sortDirection = field.sort;                                                                                // 14\n  }                                                                                                                  // 15\n                                                                                                                     // 16\n                                                                                                                     // 17\n  var sortOrder;                                                                                                     // 18\n                                                                                                                     // 19\n  if (!_.has(field, 'sortOrder')) {                                                                                  // 20\n    sortOrder = Infinity;                                                                                            // 21\n    field.sortOrder = new ReactiveVar();                                                                             // 22\n  } else if (field.sortOrder instanceof ReactiveVar) {                                                               // 23\n    sortOrder = field.sortOrder.get()                                                                                // 24\n  } else {                                                                                                           // 25\n    sortOrder = field.sortOrder;                                                                                     // 26\n    field.sortOrder = new ReactiveVar();                                                                             // 27\n  }                                                                                                                  // 28\n                                                                                                                     // 29\n  if (!_.isNumber(sortOrder) || sortOrder < 0) {                                                                     // 30\n    console.error('reactiveTable error - sortOrder must be a postive number: ' + sortOrder);                         // 31\n    sortOrder = Infinity;                                                                                            // 32\n  }                                                                                                                  // 33\n  field.sortOrder.set(sortOrder);                                                                                    // 34\n                                                                                                                     // 35\n  var sortDirection;                                                                                                 // 36\n                                                                                                                     // 37\n  if (!_.has(field, 'sortDirection')) {                                                                              // 38\n    sortDirection = 1;                                                                                               // 39\n    field.sortDirection = new ReactiveVar()                                                                          // 40\n  } else if (field.sortDirection instanceof ReactiveVar) {                                                           // 41\n    sortDirection = field.sortDirection.get();                                                                       // 42\n  } else {                                                                                                           // 43\n    sortDirection = field.sortDirection;                                                                             // 44\n    field.sortDirection = new ReactiveVar();                                                                         // 45\n  }                                                                                                                  // 46\n                                                                                                                     // 47\n  if (sortDirection === 'desc' || sortDirection === 'descending' || sortDirection === -1) {                          // 48\n    sortDirection = -1;                                                                                              // 49\n  } else if (sortDirection) {                                                                                        // 50\n    sortDirection = 1;                                                                                               // 51\n  }                                                                                                                  // 52\n  field.sortDirection.set(sortDirection);                                                                            // 53\n};                                                                                                                   // 54\n                                                                                                                     // 55\ngetSortedFields = function (fields, multiColumnSort) {                                                               // 56\n  var filteredFields = _.filter(fields, function (field) {                                                           // 57\n    return field.sortOrder.get() < Infinity;                                                                         // 58\n  });                                                                                                                // 59\n  if (!filteredFields.length) {                                                                                      // 60\n    var firstSortableField = _.find(fields, function (field) {                                                       // 61\n      return _.isUndefined(field.sortable) || field.sortable !== false;                                              // 62\n    });                                                                                                              // 63\n    if (firstSortableField) {                                                                                        // 64\n      filteredFields = [firstSortableField];                                                                         // 65\n    }                                                                                                                // 66\n  }                                                                                                                  // 67\n  var sortedFields = _.sortBy(filteredFields, function (field) {                                                     // 68\n    return field.sortOrder.get();                                                                                    // 69\n  });                                                                                                                // 70\n  return multiColumnSort ? sortedFields : sortedFields.slice(0, 1);                                                  // 71\n}                                                                                                                    // 72\n                                                                                                                     // 73\ngetSortQuery = function (fields, multiColumnSort) {                                                                  // 74\n  var sortedFields = getSortedFields(fields, multiColumnSort);                                                       // 75\n  var sortQuery = {};                                                                                                // 76\n  _.each(sortedFields, function (field) {                                                                            // 77\n    sortQuery[field.key] = field.sortDirection.get();                                                                // 78\n  });                                                                                                                // 79\n  return sortQuery;                                                                                                  // 80\n};                                                                                                                   // 81\n                                                                                                                     // 82\nsortWithFunctions = function (rows, fields, multiColumnSort) {                                                       // 83\n  var sortedFields = getSortedFields(fields, multiColumnSort);                                                       // 84\n  var sortedRows = rows;                                                                                             // 85\n                                                                                                                     // 86\n  _.each(sortedFields.reverse(), function (field) {                                                                  // 87\n    if (field.sortByValue || !field.fn) {                                                                            // 88\n      sortedRows = _.sortBy(sortedRows, field.key);                                                                  // 89\n    } else {                                                                                                         // 90\n      sortedRows = _.sortBy(sortedRows, function (row) {                                                             // 91\n        return field.fn( get( row, field.key ), row );                                                               // 92\n      });                                                                                                            // 93\n    }                                                                                                                // 94\n    if (field.sortDirection.get() === -1) {                                                                          // 95\n      sortedRows.reverse();                                                                                          // 96\n    }                                                                                                                // 97\n  });                                                                                                                // 98\n  return sortedRows;                                                                                                 // 99\n};                                                                                                                   // 100\n                                                                                                                     // 101\ngetPrimarySortField = function (fields, multiColumnSort) {                                                           // 102\n  return getSortedFields(fields, multiColumnSort)[0];                                                                // 103\n};                                                                                                                   // 104\n                                                                                                                     // 105\nchangePrimarySort = function(fieldId, fields, multiColumnSort) {                                                     // 106\n  var primarySortField = getPrimarySortField(fields, multiColumnSort);                                               // 107\n  if (primarySortField && primarySortField.fieldId === fieldId) {                                                    // 108\n    var sortDirection = -1 * primarySortField.sortDirection.get();                                                   // 109\n    primarySortField.sortDirection.set(sortDirection);                                                               // 110\n    primarySortField.sortOrder.set(0);                                                                               // 111\n  } else {                                                                                                           // 112\n    _.each(fields, function (field) {                                                                                // 113\n      if (field.fieldId === fieldId) {                                                                               // 114\n        field.sortOrder.set(0);                                                                                      // 115\n        if (primarySortField) {                                                                                      // 116\n          field.sortDirection.set(primarySortField.sortDirection.get());                                             // 117\n        }                                                                                                            // 118\n      } else {                                                                                                       // 119\n        var sortOrder = 1 + field.sortOrder.get();                                                                   // 120\n        field.sortOrder.set(sortOrder);                                                                              // 121\n      }                                                                                                              // 122\n    });                                                                                                              // 123\n  }                                                                                                                  // 124\n};                                                                                                                   // 125\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/aslagle_reactive-table/lib/filter.js                                                                     //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nvar parseFilterString = function (filterString) {                                                                    // 1\n  var startQuoteRegExp = /^[\\'\\\"]/;                                                                                  // 2\n  var endQuoteRegExp = /[\\'\\\"]$/;                                                                                    // 3\n  var filters = [];                                                                                                  // 4\n  var words = filterString.split(' ');                                                                               // 5\n                                                                                                                     // 6\n  var inQuote = false;                                                                                               // 7\n  var quotedWord = '';                                                                                               // 8\n  _.each(words, function (word) {                                                                                    // 9\n    if (inQuote) {                                                                                                   // 10\n      if (endQuoteRegExp.test(word)) {                                                                               // 11\n        filters.push(quotedWord + ' ' + word.slice(0, word.length - 1));                                             // 12\n        inQuote = false;                                                                                             // 13\n        quotedWord = '';                                                                                             // 14\n      } else {                                                                                                       // 15\n        quotedWord = quotedWord + ' ' + word;                                                                        // 16\n      }                                                                                                              // 17\n    } else if (startQuoteRegExp.test(word)) {                                                                        // 18\n      if (endQuoteRegExp.test(word)) {                                                                               // 19\n        filters.push(word.slice(1, word.length - 1));                                                                // 20\n      } else {                                                                                                       // 21\n        inQuote = true;                                                                                              // 22\n        quotedWord = word.slice(1, word.length);                                                                     // 23\n      }                                                                                                              // 24\n    } else {                                                                                                         // 25\n      filters.push(word);                                                                                            // 26\n    }                                                                                                                // 27\n  });                                                                                                                // 28\n  return filters;                                                                                                    // 29\n};                                                                                                                   // 30\n                                                                                                                     // 31\nvar escapeRegex = function(text) {                                                                                   // 32\n  return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");                                                           // 33\n};                                                                                                                   // 34\n                                                                                                                     // 35\nvar getFieldMatches = function (field) {                                                                             // 36\n  var fieldMatches = [];                                                                                             // 37\n  var keys = field.split('.');                                                                                       // 38\n  var previousKeys = '';                                                                                             // 39\n  _.each(keys, function (key) {                                                                                      // 40\n    fieldMatches.push(previousKeys + key);                                                                           // 41\n    previousKeys += key + '.';                                                                                       // 42\n  });                                                                                                                // 43\n  return fieldMatches;                                                                                               // 44\n};                                                                                                                   // 45\n                                                                                                                     // 46\ngetFilterQuery = function (filterInputs, filterFields, settings) {                                                   // 47\n  settings = settings || {};                                                                                         // 48\n  if (settings.enableRegex === undefined) {                                                                          // 49\n    settings.enableRegex = false;                                                                                    // 50\n  }                                                                                                                  // 51\n  if (settings.fields) {                                                                                             // 52\n    _.each(filterInputs, function (filter, index) {                                                                  // 53\n      if (_.any(settings.fields, function (include) { return include; })) {                                          // 54\n        filterFields[index] = _.filter(filterFields[index], function (field) {                                       // 55\n          return _.any(getFieldMatches(field), function (fieldMatch) {                                               // 56\n            return settings.fields[fieldMatch];                                                                      // 57\n          });                                                                                                        // 58\n        });                                                                                                          // 59\n      } else {                                                                                                       // 60\n        filterFields[index] = _.filter(filterFields[index], function (field) {                                       // 61\n          return _.all(getFieldMatches(field), function (fieldMatch) {                                               // 62\n            return _.isUndefined(settings.fields[fieldMatch]) || settings.fields[fieldMatch];                        // 63\n          });                                                                                                        // 64\n        });                                                                                                          // 65\n      }                                                                                                              // 66\n    });                                                                                                              // 67\n  }                                                                                                                  // 68\n  var numberRegExp = /^\\d+$/;                                                                                        // 69\n  var queryList = [];                                                                                                // 70\n  _.each(filterInputs, function (filter, index) {                                                                    // 71\n    if (filter) {                                                                                                    // 72\n      if (_.isObject(filter)) {                                                                                      // 73\n        var fieldQueries = _.map(filterFields[index], function (field) {                                             // 74\n          var query = {};                                                                                            // 75\n          query[field] = filter;                                                                                     // 76\n          return query;                                                                                              // 77\n        });                                                                                                          // 78\n        if (fieldQueries.length) {                                                                                   // 79\n            queryList.push({'$or': fieldQueries});                                                                   // 80\n          }                                                                                                          // 81\n      } else {                                                                                                       // 82\n        var filters = parseFilterString(filter);                                                                     // 83\n        _.each(filters, function (filterWord) {                                                                      // 84\n          if (settings.enableRegex === false) {                                                                      // 85\n            filterWord = escapeRegex(filterWord);                                                                    // 86\n          }                                                                                                          // 87\n          var filterQueryList = [];                                                                                  // 88\n          _.each(filterFields[index], function (field) {                                                             // 89\n            var filterRegExp = new RegExp(filterWord, 'i');                                                          // 90\n            var query = {};                                                                                          // 91\n            query[field] = filterRegExp;                                                                             // 92\n            filterQueryList.push(query);                                                                             // 93\n                                                                                                                     // 94\n            if (numberRegExp.test(filterWord)) {                                                                     // 95\n              var numberQuery = {};                                                                                  // 96\n              numberQuery[field] = parseInt(filterWord, 10);                                                         // 97\n              filterQueryList.push(numberQuery);                                                                     // 98\n            }                                                                                                        // 99\n                                                                                                                     // 100\n            if (filterWord === \"true\") {                                                                             // 101\n              var boolQuery = {};                                                                                    // 102\n              boolQuery[field] = true;                                                                               // 103\n              filterQueryList.push(boolQuery);                                                                       // 104\n            } else if (filterWord === \"false\") {                                                                     // 105\n              var boolQuery = {};                                                                                    // 106\n              boolQuery[field] = false;                                                                              // 107\n              filterQueryList.push(boolQuery);                                                                       // 108\n            }                                                                                                        // 109\n          });                                                                                                        // 110\n                                                                                                                     // 111\n          if (filterQueryList.length) {                                                                              // 112\n            var filterQuery = {'$or': filterQueryList};                                                              // 113\n            queryList.push(filterQuery);                                                                             // 114\n          }                                                                                                          // 115\n        });                                                                                                          // 116\n      }                                                                                                              // 117\n    }                                                                                                                // 118\n  });                                                                                                                // 119\n  return queryList.length ? {'$and': queryList} : {};                                                                // 120\n};                                                                                                                   // 121\n                                                                                                                     // 122\nif (Meteor.isClient) {                                                                                               // 123\n  ReactiveTable = ReactiveTable || {};                                                                               // 124\n                                                                                                                     // 125\n  var reactiveTableFilters = {};                                                                                     // 126\n  var callbacks = {};                                                                                                // 127\n                                                                                                                     // 128\n  ReactiveTable.Filter = function (id, fields) {                                                                     // 129\n    if (reactiveTableFilters[id]) {                                                                                  // 130\n        return reactiveTableFilters[id];                                                                             // 131\n    }                                                                                                                // 132\n                                                                                                                     // 133\n    var filter = new ReactiveVar();                                                                                  // 134\n                                                                                                                     // 135\n    this.fields = fields;                                                                                            // 136\n                                                                                                                     // 137\n    this.get = function () {                                                                                         // 138\n      return filter.get() || '';                                                                                     // 139\n    };                                                                                                               // 140\n                                                                                                                     // 141\n    this.set = function (filterString) {                                                                             // 142\n      filter.set(filterString);                                                                                      // 143\n      _.each(callbacks[id], function (callback) {                                                                    // 144\n        callback();                                                                                                  // 145\n      });                                                                                                            // 146\n    };                                                                                                               // 147\n                                                                                                                     // 148\n    reactiveTableFilters[id] = this;                                                                                 // 149\n  };                                                                                                                 // 150\n                                                                                                                     // 151\n  ReactiveTable.clearFilters = function (filterIds) {                                                                // 152\n    _.each(filterIds, function (filterId) {                                                                          // 153\n      if (reactiveTableFilters[filterId]) {                                                                          // 154\n        reactiveTableFilters[filterId].set('');                                                                      // 155\n      }                                                                                                              // 156\n    });                                                                                                              // 157\n  };                                                                                                                 // 158\n                                                                                                                     // 159\n  dependOnFilters = function (filterIds, callback) {                                                                 // 160\n    _.each(filterIds, function (filterId) {                                                                          // 161\n      if (_.isUndefined(callbacks[filterId])) {                                                                      // 162\n        callbacks[filterId] = [];                                                                                    // 163\n      }                                                                                                              // 164\n      callbacks[filterId].push(callback);                                                                            // 165\n    });                                                                                                              // 166\n  };                                                                                                                 // 167\n                                                                                                                     // 168\n  getFilterStrings = function (filterIds) {                                                                          // 169\n    return _.map(filterIds, function (filterId) {                                                                    // 170\n      if (_.isUndefined(reactiveTableFilters[filterId])) {                                                           // 171\n        return '';                                                                                                   // 172\n      }                                                                                                              // 173\n      return reactiveTableFilters[filterId].get();                                                                   // 174\n    });                                                                                                              // 175\n  };                                                                                                                 // 176\n                                                                                                                     // 177\n  getFilterFields = function (filterIds, allFields) {                                                                // 178\n    return _.map(filterIds, function (filterId) {                                                                    // 179\n      if (_.isUndefined(reactiveTableFilters[filterId])) {                                                           // 180\n        return _.map(allFields, function (field) { return field.key; });                                             // 181\n      } else if (_.isEmpty(reactiveTableFilters[filterId].fields)) {                                                 // 182\n        return _.map(allFields, function (field) { return field.key; });                                             // 183\n      } else {                                                                                                       // 184\n        return reactiveTableFilters[filterId].fields;                                                                // 185\n      }                                                                                                              // 186\n    });                                                                                                              // 187\n  };                                                                                                                 // 188\n                                                                                                                     // 189\n  Template.reactiveTableFilter.helpers({                                                                             // 190\n    'class': function () {                                                                                           // 191\n      return this.class || 'input-group';                                                                            // 192\n    },                                                                                                               // 193\n                                                                                                                     // 194\n    'filter': function () {                                                                                          // 195\n      if (_.isUndefined(reactiveTableFilters[this.id])) {                                                            // 196\n        new ReactiveTable.Filter(this.id, this.fields);                                                              // 197\n      }                                                                                                              // 198\n      return reactiveTableFilters[this.id].get();                                                                    // 199\n    }                                                                                                                // 200\n  });                                                                                                                // 201\n                                                                                                                     // 202\n  var updateFilter = _.debounce(function (template, filterText) {                                                    // 203\n    reactiveTableFilters[template.data.id].set(filterText);                                                          // 204\n  }, 200);                                                                                                           // 205\n                                                                                                                     // 206\n  Template.reactiveTableFilter.events({                                                                              // 207\n    'keyup .reactive-table-input, input .reactive-table-input': function (event) {                                   // 208\n      var template = Template.instance();                                                                            // 209\n      var filterText = $(event.target).val();                                                                        // 210\n      updateFilter(template, filterText);                                                                            // 211\n    },                                                                                                               // 212\n  });                                                                                                                // 213\n}                                                                                                                    // 214\n                                                                                                                     // 215\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['aslagle:reactive-table'] = {\n  ReactiveTable: ReactiveTable\n};\n\n})();\n","servePath":"/packages/aslagle_reactive-table.js","sourceMap":{"version":3,"sources":["/packages/aslagle_reactive-table/lib/template.reactive_table.js","/packages/aslagle_reactive-table/lib/template.filter.js","/packages/aslagle_reactive-table/lib/reactive_table_i18n.js","/packages/aslagle_reactive-table/lib/reactive_table.js","/packages/aslagle_reactive-table/lib/sort.js","/packages/aslagle_reactive-table/lib/filter.js"],"names":[],"mappingshWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0H;;;;;;;;;;;;;;;;;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2H;;;;;;;;;;;;;;;;;;ACvhkfile":"/packages/aslagle_reactive-table.js","sourcesContent":["\nTemplate.__checkName(\"reactiveTable\");\nTemplate[\"reactiveTable\"] = new Template(\"Template.reactiveTable\", (function() {\n  var view = this;\n  return Spacebars.With(function() {\n    return Spacebars.call(view.lookup(\"context\"));\n  }, function() {\n    return [ \"\\n  \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"ready\"));\n    }, function() {\n      return [ \"\\n    \", HTML.DIV({\n        \"class\": \"clearfix\"\n      }, \"\\n      \", HTML.DIV({\n        \"class\": \"reactive-table-options col-sm-8 pull-right\"\n      }, \"\\n        \", Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"showFilter\"));\n      }, function() {\n        return [ \"\\n          \", HTML.DIV({\n          \"class\": \"reactive-table-filter form-group col-sm-8 pull-right\"\n        }, \"\\n            \", Blaze._TemplateWith(function() {\n          return {\n            id: Spacebars.call(view.lookup(\"getFilterId\")),\n            useFontAwesome: Spacebars.call(view.lookup(\"useFontAwesome\"))\n          };\n        }, function() {\n          return Spacebars.include(view.lookupTemplate(\"reactiveTableFilter\"));\n        }), \"\\n          \"), \"\\n        \" ];\n      }), \"\\n        \", Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"showColumnToggles\"));\n      }, function() {\n        return [ \"\\n          \", HTML.DIV({\n          \"class\": \"reactive-table-columns-dropdown col-sm-4 pull-right\"\n        }, \"\\n            \", HTML.BUTTON({\n          \"class\": \"btn btn-default dropdown-toggle\",\n          id: function() {\n            return [ \"reactive-table-add-column-\", Spacebars.mustache(view.lookup(\"id\")) ];\n          },\n          \"data-toggle\": \"dropdown\"\n        }, \"\\n              \", Blaze.View(\"lookup:i18n\", function() {\n          return Spacebars.mustache(view.lookup(\"i18n\"), \"reactiveTable.columns\");\n        }), \"\\n            \"), \"\\n            \", HTML.UL({\n          \"class\": \"dropdown-menu dropdown-menu-right\",\n          role: \"menu\",\n          \"aria-labelledby\": function() {\n            return [ \"reactive-table-add-column-\", Spacebars.mustache(view.lookup(\"id\")) ];\n          }\n        }, \"\\n              \", Blaze.Each(function() {\n          return Spacebars.call(view.lookup(\"fields\"));\n        }, function() {\n          return [ \"\\n                \", Blaze.Unless(function() {\n            return Spacebars.call(view.lookup(\"hideToggle\"));\n          }, function() {\n            return [ \"\\n                  \", HTML.LI({\n              role: \"presentation\"\n            }, HTML.A({\n              role: \"menuitem\",\n              tabindex: \"-1\",\n              \"data-target\": \"#\"\n            }, \"\\n                    \", Blaze.If(function() {\n              return Spacebars.call(view.lookup(\"isVisible\"));\n            }, function() {\n              return [ \"\\n                      \", HTML.INPUT({\n                type: \"checkbox\",\n                checked: \"\",\n                \"data-fieldid\": function() {\n                  return Spacebars.mustache(view.lookup(\"fieldId\"));\n                }\n              }), \"\\n                    \" ];\n            }, function() {\n              return [ \"\\n                      \", HTML.INPUT({\n                type: \"checkbox\",\n                \"data-fieldid\": function() {\n                  return Spacebars.mustache(view.lookup(\"fieldId\"));\n                }\n              }), \"\\n                    \" ];\n            }), \"\\n                    \", HTML.LABEL(\"\\n                      \", Blaze.If(function() {\n              return Spacebars.call(view.lookup(\"labelIsTemplate\"));\n            }, function() {\n              return Spacebars.With(function() {\n                return Spacebars.call(view.lookup(\"labelData\"));\n              }, function() {\n                return Spacebars.include(function() {\n                  return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"label\"));\n                });\n              }, function() {\n                return Spacebars.include(view.lookupTemplate(\"label\"));\n              });\n            }, function() {\n              return Blaze.View(\"lookup:getLabel\", function() {\n                return Spacebars.mustache(view.lookup(\"getLabel\"));\n              });\n            }), \"\\n                    \"), \"\\n                  \")), \"\\n                \" ];\n          }), \"\\n              \" ];\n        }), \"\\n            \"), \"\\n          \"), \"\\n        \" ];\n      }), \"\\n      \"), \"\\n    \"), \"\\n    \", Blaze.Unless(function() {\n        return Spacebars.call(view.lookup(\"noData\"));\n      }, function() {\n        return [ \"\\n      \", HTML.TABLE({\n          id: function() {\n            return Spacebars.mustache(view.lookup(\"id\"));\n          },\n          \"class\": function() {\n            return [ Spacebars.mustache(view.lookup(\"class\")), \" reactive-table\" ];\n          }\n        }, \"\\n        \", HTML.THEAD(\"\\n          \", HTML.TR(\"\\n            \", Blaze.Each(function() {\n          return Spacebars.call(view.lookup(\"fields\"));\n        }, function() {\n          return [ \"\\n              \", Blaze.If(function() {\n            return Spacebars.call(view.lookup(\"isVisible\"));\n          }, function() {\n            return [ \"\\n                \", Blaze.If(function() {\n              return Spacebars.call(view.lookup(\"isPrimarySortField\"));\n            }, function() {\n              return [ \"\\n                  \", HTML.TH({\n                \"class\": function() {\n                  return [ \"sortable \", Spacebars.mustache(view.lookup(\"getHeaderClass\")) ];\n                },\n                fieldid: function() {\n                  return Spacebars.mustache(view.lookup(\"getFieldFieldId\"));\n                }\n              }, \"\\n                    \", Blaze.If(function() {\n                return Spacebars.call(view.lookup(\"labelIsTemplate\"));\n              }, function() {\n                return Spacebars.With(function() {\n                  return Spacebars.call(view.lookup(\"labelData\"));\n                }, function() {\n                  return Spacebars.include(function() {\n                    return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"label\"));\n                  });\n                }, function() {\n                  return Spacebars.include(view.lookupTemplate(\"label\"));\n                });\n              }, function() {\n                return Blaze.View(\"lookup:getLabel\", function() {\n                  return Spacebars.mustache(view.lookup(\"getLabel\"));\n                });\n              }), HTML.CharRef({\n                html: \"&nbsp;\",\n                str: \" \"\n              }), HTML.CharRef({\n                html: \"&nbsp;\",\n                str: \" \"\n              }), \"\\n                    \", Blaze.If(function() {\n                return Spacebars.call(view.lookup(\"isAscending\"));\n              }, function() {\n                return [ \"\\n                      \", Blaze.If(function() {\n                  return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"useFontAwesome\"));\n                }, function() {\n                  return [ \"\\n                        \", HTML.I({\n                    \"class\": \"fa fa-sort-asc\"\n                  }), \"\\n                      \" ];\n                }, function() {\n                  return [ \"\\n                        \", HTML.CharRef({\n                    html: \"&#x25B2;\",\n                    str: \"▲\"\n                  }), \"\\n                      \" ];\n                }), \"\\n                    \" ];\n              }, function() {\n                return [ \"\\n                      \", Blaze.If(function() {\n                  return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"useFontAwesome\"));\n                }, function() {\n                  return [ \"\\n                        \", HTML.I({\n                    \"class\": \"fa fa-sort-desc\"\n                  }), \"\\n                      \" ];\n                }, function() {\n                  return [ \"\\n                        \", HTML.CharRef({\n                    html: \"&#x25BC;\",\n                    str: \"▼\"\n                  }), \"\\n                      \" ];\n                }), \"\\n                    \" ];\n              }), \"\\n                  \"), \"\\n                \" ];\n            }, function() {\n              return [ \"\\n                  \", Blaze.If(function() {\n                return Spacebars.call(view.lookup(\"isSortable\"));\n              }, function() {\n                return [ \"\\n                    \", HTML.TH({\n                  \"class\": function() {\n                    return [ Spacebars.mustache(view.lookup(\"getHeaderClass\")), \" sortable\" ];\n                  },\n                  fieldid: function() {\n                    return Spacebars.mustache(view.lookup(\"getFieldFieldId\"));\n                  }\n                }, Blaze.If(function() {\n                  return Spacebars.call(view.lookup(\"labelIsTemplate\"));\n                }, function() {\n                  return Spacebars.With(function() {\n                    return Spacebars.call(view.lookup(\"labelData\"));\n                  }, function() {\n                    return Spacebars.include(function() {\n                      return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"label\"));\n                    });\n                  }, function() {\n                    return Spacebars.include(view.lookupTemplate(\"label\"));\n                  });\n                }, function() {\n                  return Blaze.View(\"lookup:getLabel\", function() {\n                    return Spacebars.mustache(view.lookup(\"getLabel\"));\n                  });\n                })), \"\\n                  \" ];\n              }, function() {\n                return [ \"\\n                    \", HTML.TH({\n                  \"class\": function() {\n                    return Spacebars.mustache(view.lookup(\"getHeaderClass\"));\n                  },\n                  fieldid: function() {\n                    return Spacebars.mustache(view.lookup(\"getFieldFieldId\"));\n                  }\n                }, Blaze.If(function() {\n                  return Spacebars.call(view.lookup(\"labelIsTemplate\"));\n                }, function() {\n                  return Spacebars.With(function() {\n                    return Spacebars.call(view.lookup(\"labelData\"));\n                  }, function() {\n                    return Spacebars.include(function() {\n                      return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"label\"));\n                    });\n                  }, function() {\n                    return Spacebars.include(view.lookupTemplate(\"label\"));\n                  });\n                }, function() {\n                  return Blaze.View(\"lookup:getLabel\", function() {\n                    return Spacebars.mustache(view.lookup(\"getLabel\"));\n                  });\n                })), \"\\n                  \" ];\n              }), \"\\n                \" ];\n            }), \"\\n              \" ];\n          }), \"\\n            \" ];\n        }), \"\\n          \"), \"\\n        \"), \"\\n        \", HTML.TBODY(\"\\n          \", Blaze.Each(function() {\n          return Spacebars.call(view.lookup(\"sortedRows\"));\n        }, function() {\n          return [ \"\\n            \", HTML.TR({\n            \"class\": function() {\n              return Spacebars.mustache(Spacebars.dot(view.lookup(\"..\"), \"rowClass\"), view.lookup(\".\"));\n            }\n          }, \"\\n              \", Blaze.Each(function() {\n            return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"fields\"));\n          }, function() {\n            return [ \"\\n                \", Blaze.If(function() {\n              return Spacebars.call(view.lookup(\"isVisible\"));\n            }, function() {\n              return [ \"\\n                  \", HTML.TD({\n                \"class\": function() {\n                  return Spacebars.mustache(view.lookup(\"getCellClass\"), view.lookup(\"..\"));\n                }\n              }, Blaze.If(function() {\n                return Spacebars.call(view.lookup(\"tmpl\"));\n              }, function() {\n                return Spacebars.With(function() {\n                  return Spacebars.call(view.lookup(\"..\"));\n                }, function() {\n                  return Spacebars.include(function() {\n                    return Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"tmpl\"));\n                  });\n                });\n              }, function() {\n                return Blaze.View(\"lookup:getField\", function() {\n                  return Spacebars.mustache(view.lookup(\"getField\"), view.lookup(\"..\"));\n                });\n              })), \"\\n                \" ];\n            }), \"\\n              \" ];\n          }), \"\\n            \"), \"\\n          \" ];\n        }), \"\\n        \"), \"\\n      \"), \"\\n      \", Blaze.If(function() {\n          return Spacebars.call(view.lookup(\"showNavigation\"));\n        }, function() {\n          return [ \"\\n        \", HTML.DIV({\n            \"class\": \"reactive-table-navigation\"\n          }, \"\\n          \", Blaze.If(function() {\n            return Spacebars.call(view.lookup(\"showNavigationRowsPerPage\"));\n          }, function() {\n            return [ \"\\n            \", HTML.DIV({\n              \"class\": \"form-inline form-group rows-per-page\"\n            }, \"\\n              \", HTML.LABEL(\"\\n                \", HTML.SPAN(Blaze.View(\"lookup:i18n\", function() {\n              return Spacebars.mustache(view.lookup(\"i18n\"), \"reactiveTable.show\");\n            })), \"\\n                \", HTML.INPUT({\n              \"class\": \"form-control\",\n              type: \"text\",\n              value: function() {\n                return Spacebars.mustache(view.lookup(\"getRowsPerPage\"));\n              }\n            }), \"\\n                \", Blaze.If(function() {\n              return Spacebars.call(view.lookup(\"showRowCount\"));\n            }, function() {\n              return [ \"\\n                  \", HTML.SPAN(Blaze.View(\"lookup:i18n\", function() {\n                return Spacebars.mustache(view.lookup(\"i18n\"), \"reactiveTable.of\");\n              })), \"\\n                  \", HTML.SPAN({\n                \"class\": \"rows-per-page-count\"\n              }, Blaze.View(\"lookup:getRowCount\", function() {\n                return Spacebars.mustache(view.lookup(\"getRowCount\"));\n              })), \"\\n                \" ];\n            }), \"\\n                \", HTML.SPAN({\n              \"class\": \"rows-per-page-label\"\n            }, Blaze.View(\"lookup:i18n\", function() {\n              return Spacebars.mustache(view.lookup(\"i18n\"), \"reactiveTable.rowsPerPage\");\n            })), \"\\n              \"), \"\\n            \"), \"\\n          \" ];\n          }), \"\\n          \", HTML.DIV({\n            \"class\": \"form-inline form-group page-number\"\n          }, \"\\n            \", Blaze.If(function() {\n            return Spacebars.call(view.lookup(\"isntFirstPage\"));\n          }, function() {\n            return [ \"\\n              \", Blaze.If(function() {\n              return Spacebars.call(view.lookup(\"useFontAwesome\"));\n            }, function() {\n              return [ \"\\n                \", HTML.I({\n                \"class\": \"previous-page fa fa-caret-left\"\n              }), \"\\n              \" ];\n            }, function() {\n              return [ \"\\n                \", HTML.LABEL({\n                \"class\": \"previous-page\"\n              }, HTML.CharRef({\n                html: \"&lt;\",\n                str: \"<\"\n              })), \"\\n              \" ];\n            }), \"\\n            \" ];\n          }), \"\\n            \", HTML.LABEL(\"\\n              \", HTML.SPAN(Blaze.View(\"lookup:i18n\", function() {\n            return Spacebars.mustache(view.lookup(\"i18n\"), \"reactiveTable.page\");\n          })), \"\\n              \", HTML.INPUT({\n            \"class\": \"form-control\",\n            type: \"text\",\n            value: function() {\n              return Spacebars.mustache(view.lookup(\"getCurrentPage\"));\n            }\n          }), \"\\n              \", HTML.SPAN(Blaze.View(\"lookup:i18n\", function() {\n            return Spacebars.mustache(view.lookup(\"i18n\"), \"reactiveTable.of\");\n          })), \"\\n              \", HTML.SPAN({\n            \"class\": \"page-number-count\"\n          }, Blaze.View(\"lookup:getPageCount\", function() {\n            return Spacebars.mustache(view.lookup(\"getPageCount\"));\n          })), \"\\n            \"), \"\\n            \", Blaze.If(function() {\n            return Spacebars.call(view.lookup(\"isntLastPage\"));\n          }, function() {\n            return [ \"\\n              \", Blaze.If(function() {\n              return Spacebars.call(view.lookup(\"useFontAwesome\"));\n            }, function() {\n              return [ \"\\n                \", HTML.I({\n                \"class\": \"next-page fa fa-caret-right\"\n              }), \"\\n              \" ];\n            }, function() {\n              return [ \"\\n                \", HTML.LABEL({\n                \"class\": \"next-page\"\n              }, HTML.CharRef({\n                html: \"&gt;\",\n                str: \">\"\n              })), \"\\n              \" ];\n            }), \"\\n            \" ];\n          }), \"\\n          \"), \"\\n        \"), \"\\n      \" ];\n        }), \"\\n    \" ];\n      }, function() {\n        return [ \"\\n      \", Spacebars.include(view.lookupTemplate(\"noDataTmpl\")), \"\\n    \" ];\n      }), \"\\n  \" ];\n    }), \"\\n  \" ];\n  });\n}));\n","\nTemplate.__checkName(\"reactiveTableFilter\");\nTemplate[\"reactiveTableFilter\"] = new Template(\"Template.reactiveTableFilter\", (function() {\n  var view = this;\n  return HTML.DIV({\n    id: function() {\n      return Spacebars.mustache(view.lookup(\"id\"));\n    },\n    \"class\": function() {\n      return Spacebars.mustache(view.lookup(\"class\"));\n    }\n  }, \"\\n    \", HTML.SPAN({\n    \"class\": \"input-group-addon\"\n  }, \"\\n      \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"useFontAwesome\"));\n  }, function() {\n    return [ \"\\n        \", HTML.I({\n      \"class\": \"fa fa-filter\"\n    }), \"\\n      \" ];\n  }, function() {\n    return [ \"\\n        \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"label\"));\n    }, function() {\n      return [ \"\\n          \", HTML.SPAN(Blaze.View(\"lookup:label\", function() {\n        return Spacebars.mustache(view.lookup(\"label\"));\n      })), \"\\n        \" ];\n    }, function() {\n      return [ \"\\n          \", Blaze.View(\"lookup:i18n\", function() {\n        return Spacebars.mustache(view.lookup(\"i18n\"), \"reactiveTable.filter\");\n      }), \"\\n        \" ];\n    }), \"\\n      \" ];\n  }), \"\\n    \"), \"\\n    \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"useFontAwesome\"));\n  }, function() {\n    return [ \"\\n      \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"label\"));\n    }, function() {\n      return [ \"\\n        \", HTML.INPUT({\n        \"class\": \"reactive-table-input form-control\",\n        type: \"text\",\n        value: function() {\n          return Spacebars.mustache(view.lookup(\"filter\"));\n        },\n        placeholder: function() {\n          return Spacebars.mustache(view.lookup(\"label\"));\n        }\n      }), \"\\n      \" ];\n    }, function() {\n      return [ \"\\n        \", HTML.INPUT({\n        \"class\": \"reactive-table-input form-control\",\n        type: \"text\",\n        value: function() {\n          return Spacebars.mustache(view.lookup(\"filter\"));\n        },\n        placeholder: function() {\n          return Spacebars.mustache(view.lookup(\"i18n\"), \"reactiveTable.filter\");\n        }\n      }), \"\\n      \" ];\n    }), \"\\n    \" ];\n  }, function() {\n    return [ \"\\n      \", HTML.INPUT({\n      \"class\": \"reactive-table-input form-control\",\n      type: \"text\",\n      value: function() {\n        return Spacebars.mustache(view.lookup(\"filter\"));\n      }\n    }), \"\\n    \" ];\n  }), \"\\n  \");\n}));\n","i18n.map('en', {\n    reactiveTable: {\n        filter: 'Filter',\n        columns: 'Columns',\n        show: 'Show',\n        rowsPerPage: 'rows per page',\n        page: 'Page',\n        of: 'of'\n    }\n});\n\ni18n.map('fr', {\n    reactiveTable: {\n        filter: 'Filtre',\n        columns: 'Colonnes',\n        show: 'Voir',\n        rowsPerPage: 'lignes par page',\n        page: 'page',\n        of: 'sur'\n    }\n});\n\ni18n.map('ru', {\n    reactiveTable: {\n        filter: 'Фильтр',\n        columns: 'Колонка',\n        show: 'Показать',\n        rowsPerPage: 'линий на странице',\n        page: 'Страница',\n        of: 'из'\n    }\n});\n\ni18n.map('es', {\n    reactiveTable: {\n        filter: 'Filtro',\n        columns: 'Columnas',\n        show:   'Mostrar',\n        rowsPerPage: 'filas por página',\n        page: 'Página',\n        of: 'de'\n    }\n});\n\ni18n.map('nl', {\n    reactiveTable: {\n        filter: 'Filter',\n        show:   'Toon',\n        rowsPerPage: 'regels per pagina',\n        page: 'Pagina',\n        of: 'van'\n    }\n});\n\ni18n.map('pt-br', {\n    reactiveTable: {\n        filter: 'Filtro',\n        show: 'Mostrar',\n        rowsPerPage: 'linhas por página',\n        page: 'Página',\n        of: 'de'\n    }\n});\n\ni18n.map('it', {\n    reactiveTable: {\n        filter: 'Filtra',\n        show: 'Mostra',\n        rowsPerPage: 'righe per pagina',\n        page: 'Pagina',\n        of: 'di'\n    }\n});\n\ni18n.map('sv', {\n    reactiveTable: {\n        filter: 'Filter',\n        show: 'Visa',\n        rowsPerPage: 'rader per sida',\n        page: 'Sida',\n        of: 'av'\n    }\n});\n\ni18n.map('ua', {\n    reactiveTable: {\n        filter: 'Фільтр',\n        show: 'Показати',\n        rowsPerPage: 'рядків на сторінці',\n        page: 'Сторінка',\n        of: 'з'\n    }\n});\n\ni18n.map('tr', {\n    reactiveTable: {\n        filter: 'Süz',\n        columns: 'Sütunlar',\n        show: 'Sayfa başına',\n        rowsPerPage: 'satır göster',\n        page: 'Sayfa',\n        of: ' / '\n    }\n});\n\ni18n.map('sk', {\n    reactiveTable: {\n        filter: 'Filter',\n        show: 'Zobraz',\n        rowsPerPage: 'riadkov na stranu',\n        page: 'Strana',\n        of: 'z'\n    }\n});\n\ni18n.map('cs', {\n    reactiveTable: {\n        filter: 'Filter',\n        show: 'Zobraz',\n        rowsPerPage: 'řádků na stranu',\n        page: 'Strana',\n        of: 'z'\n    }\n});\n\ni18n.map('he', {\n    reactiveTable: {\n        filter: 'פילטר',\n        show: 'הצג',\n        rowsPerPage: 'שורות לעמוד',\n        page: 'עמוד',\n        of: 'מתוך'\n    }\n});\n\ni18n.map('da', {\n    reactiveTable: {\n        filter: 'Filter',\n        columns: 'Kolonner',\n        show: 'Vis',\n        rowsPerPage: 'rækker per side',\n        page: 'Side',\n        of: 'af'\n    }\n});\n\ni18n.map('de', {\n    reactiveTable: {\n        filter: 'Filter',\n        columns: 'Spalten',\n        show: 'Zeige',\n        rowsPerPage: 'Zeilen pro Seite',\n        page: 'Seite',\n        of: 'von'\n    }\n});\n\ni18n.map('fi', {\n    reactiveTable: {\n        filter: 'Suodata',\n        show: 'Näytä',\n        rowsPerPage: 'riviä sivulla',\n        page: 'Sivu',\n        of: ' / '\n    }\n});\n\ni18n.map('no', {\n    reactiveTable: {\n        filter: 'Filter',\n        show: 'Vis',\n        rowsPerPage: 'rader per side',\n        page: 'Side',\n        of: 'av'\n    }\n});\n\ni18n.map('pl', {\n    reactiveTable: {\n        filter: 'Szukaj',\n        columns: 'Kolumny',\n        show: 'Pokaż',\n        rowsPerPage: 'pozycji na stronie',\n        page: 'Strona',\n        of: 'z'\n    }\n});\n\ni18n.map('hr', {\n    reactiveTable: {\n        filter: 'Filter',\n        columns: 'Stupci',\n        show: 'Prikaži',\n        rowsPerPage: 'redova po stranici',\n        page: 'Stranica',\n        of: 'od'\n    }\n});\n\ni18n.map('is', {\n    reactiveTable: {\n        filter: 'Sía',\n        columns: 'Dálkar',\n        show: 'Sýna',\n        rowsPerPage: 'raðir á síðu',\n        page: 'Síða',\n        of: 'af'\n    }\n});\n\ni18n.map('zh', {\n    reactiveTable: {\n        filter: '过滤',\n        columns: '列',\n        show: '显示',\n        rowsPerPage: '每页行数',\n        page: '页数',\n        of: '之'\n    }\n});\n\ni18n.map('fa', {\n    reactiveTable: {\n        filter: 'تزکیه',\n        columns: 'ستون',\n        show: 'ارائه',\n        rowsPerPage: 'ردیف در هر صفحه',\n        page: 'صفحه',\n        of: 'از'\n    }\n});\n","var ReactiveTableCounts = new Mongo.Collection(\"reactive-table-counts\");\n\nget = function(obj, field) {\n  var keys = field.split('.');\n  var value = obj;\n\n  _.each(keys, function (key) {\n      if (_.isObject(value) && _.isFunction(value[key])) {\n          value = value[key]();\n      } else if (_.isObject(value) && !_.isUndefined(value[key])) {\n          value = value[key];\n      } else {\n          value = null;\n      }\n  });\n\n  return value;\n};\n\nvar updateHandle = function (set_context) {\n    var context = set_context;\n    if (context.server) {\n        var newHandle;\n\n        // Could use the table id, but this way we can wait to change the\n        // page until the new data is ready, so it doesn't move around\n        // while rows are added and removed\n        var publicationId = _.uniqueId();\n        var newPublishedRows = new Mongo.Collection('reactive-table-rows-' + publicationId);\n        context.nextPublicationId.set(publicationId);\n\n        var rowsPerPage = context.rowsPerPage.get();\n        var currentPage = context.currentPage.get();\n        var currentIndex = currentPage * rowsPerPage;\n\n        var options = {\n            skip: currentIndex,\n            limit: rowsPerPage,\n            sort: getSortQuery(context.fields, context.multiColumnSort)\n        };\n\n        var filters = context.filters.get();\n\n        var onReady = function () {\n            if (publicationId === context.nextPublicationId.get()) {\n                context.ready.set(true);\n                context.publicationId.set(publicationId);\n                context.publishedRows = newPublishedRows;\n                var oldHandle = context.handle;\n                context.handle = newHandle;\n\n                if (oldHandle) {\n                    oldHandle.stop();\n                }\n            } else {\n                // another handle was created after this one\n                newHandle.stop();\n            }\n        };\n        var onError = function (error) {\n            console.log(\"ReactiveTable subscription error: \" + error);\n        };\n        newHandle = Meteor.subscribe(\n            \"reactive-table-\" + context.collection,\n            publicationId,\n            getFilterStrings(filters),\n            getFilterFields(filters, context.fields),\n            options,\n            context.rowsPerPage.get(),\n            {onReady: onReady, onError: onError}\n        );\n    }\n};\n\n\nvar getDefaultFalseSetting = function (key, templateData) {\n    if (!_.isUndefined(templateData[key]) &&\n        templateData[key]) {\n        return true;\n    }\n    if (!_.isUndefined(templateData.settings) &&\n        !_.isUndefined(templateData.settings[key]) &&\n        templateData.settings[key]) {\n        return true;\n    }\n    return false;\n};\n\nvar getDefaultTrueSetting = function (key, templateData) {\n    if (!_.isUndefined(templateData[key]) &&\n        !templateData[key]) {\n        return false;\n    }\n    if (!_.isUndefined(templateData.settings) &&\n        !_.isUndefined(templateData.settings[key]) &&\n        !templateData.settings[key]) {\n        return false;\n    }\n    return true;\n};\n\n\n\nvar setup = function () {\n    var context = {};\n    var oldContext = this.context || {};\n    context.templateData = this.data;\n    this.data.settings = this.data.settings || {};\n    var collection = this.data.collection || this.data.settings.collection || this.data;\n\n    if (!(collection instanceof Mongo.Collection)) {\n        if (_.isArray(collection)) {\n            // collection is an array\n            // create a new collection from the data\n            var data = collection;\n            collection = new Mongo.Collection(null);\n            _.each(data, function (doc) {\n                collection.insert(doc);\n            });\n        } else if (_.isFunction(collection.fetch)) {\n            // collection is a cursor\n            // create a new collection that will reactively update\n            var cursor = collection;\n            collection = new Mongo.Collection(null);\n\n            // copy over transforms from collection-helper package\n            collection._transform = cursor._transform;\n            collection._name = cursor.collection._name;\n\n            var addedCallback = function (doc) {\n                collection.insert(doc);\n            };\n            var changedCallback = function (doc, oldDoc) {\n                collection.update(oldDoc._id, doc);\n            };\n            var removedCallback = function (oldDoc) {\n                collection.remove(oldDoc._id);\n            };\n            cursor.observe({added: addedCallback, changed: changedCallback, removed: removedCallback});\n        } else if (_.isString(collection)) {\n            // server side publication\n            context.server = true;\n            context.publicationId = new ReactiveVar();\n            context.nextPublicationId = new ReactiveVar();\n            context.publishedRows = new Mongo.Collection(null);\n        } else {\n            console.error(\"reactiveTable error: argument is not an instance of Mongo.Collection, a cursor, or an array\");\n            collection = new Mongo.Collection(null);\n        }\n    }\n    context.collection = collection;\n\n    context.multiColumnSort = getDefaultTrueSetting('multiColumnSort', this.data);\n\n    var fields = this.data.fields || this.data.settings.fields || {};\n    if (_.keys(fields).length < 1 ||\n        (_.keys(fields).length === 1 &&\n         _.keys(fields)[0] === 'hash')) {\n\n        if (context.server) {\n            console.error(\"reactiveTable error: fields option is required with server-side publications\");\n        } else {\n            fields = _.without(_.keys(collection.findOne() || {}), '_id');\n        }\n    }\n\n    var fieldIdsArePresentAndUnique = function (fields) {\n        var uniqueFieldIds = _.chain(fields)\n            .filter(function (field) {\n                return !_.isUndefined(field.fieldId)\n            })\n            .map(function (field) {\n                return field.fieldId;\n            })\n            .uniq()\n            .value();\n        return uniqueFieldIds.length === fields.length;\n    };\n\n    // If at least one field specifies a fieldId, all fields must specify a\n    // fieldId with a unique value\n    if (_.find(fields, function (field) {\n        return !_.isUndefined(field.fieldId)\n        }) && !fieldIdsArePresentAndUnique(fields)) {\n        console.error(\"reactiveTable error: all fields must have a unique-valued fieldId if at least one has a fieldId attribute\");\n        fields = [];\n    }\n\n    var normalizeField = function (field, i) {\n        if (typeof field === 'string') {\n            field = {key: field, label: field};\n        }\n        if (!_.has(field, 'fieldId')) {\n            // Default fieldId to index in fields array if not present\n            field.fieldId = i.toString();\n        }\n        if (!_.has(field, 'key')) {\n            field.key = '';\n        }\n        oldField = _.find(oldContext.fields, function (oldField) {\n            return oldField.fieldId === field.fieldId;\n        });\n        normalizeSort(field, oldField);\n        return field;\n    };\n\n    fields = _.map(fields, normalizeField);\n\n    context.fields = fields;\n\n    var visibleFields = [];\n    _.each(fields, function (field, i) {\n        visibleFields.push({fieldId:field.fieldId, isVisible: getDefaultFieldVisibility(field)});\n    });\n    context.visibleFields = (!_.isUndefined(oldContext.visibleFields) && !_.isEmpty(oldContext.visibleFields)) ? oldContext.visibleFields : new ReactiveVar(visibleFields);\n\n\n    var rowClass = this.data.rowClass || this.data.settings.rowClass || function() {return '';};\n    if (typeof rowClass === 'string') {\n        var tmp = rowClass;\n        rowClass = function(obj) { return tmp; };\n    }\n    context.rowClass = rowClass;\n\n    context.class = this.data.class || this.data.settings.class || 'table table-striped table-hover col-sm-12';\n    context.id = this.data.id || this.data.settings.id || _.uniqueId('reactive-table-');\n\n    context.showNavigation = this.data.showNavigation || this.data.settings.showNavigation || 'always';\n    context.showNavigationRowsPerPage = getDefaultTrueSetting('showNavigationRowsPerPage', this.data);\n    context.showRowCount = getDefaultFalseSetting('showRowCount', this.data)\n\n    var rowsPerPage;\n    if (!_.isUndefined(oldContext.rowsPerPage)) {\n        rowsPerPage = oldContext.rowsPerPage;\n    } else if (this.data.rowsPerPage && this.data.rowsPerPage instanceof ReactiveVar) {\n        rowsPerPage = this.data.rowsPerPage;\n    } else if (this.data.settings.rowsPerPage && this.data.settings.rowsPerPage instanceof ReactiveVar) {\n        rowsPerPage = this.data.settings.rowsPerPage;\n    } else {\n        rowsPerPage = new ReactiveVar(this.data.rowsPerPage || this.data.settings.rowsPerPage || 10);\n    }\n    context.rowsPerPage = rowsPerPage;\n\n    var currentPage;\n    if (!_.isUndefined(oldContext.currentPage)) {\n        currentPage = oldContext.currentPage;\n    } else if (this.data.currentPage && this.data.currentPage instanceof ReactiveVar) {\n        currentPage = this.data.currentPage;\n    } else if (this.data.settings.currentPage && this.data.settings.currentPage instanceof ReactiveVar) {\n        currentPage = this.data.settings.currentPage;\n    } else {\n        currentPage = new ReactiveVar(0);\n    }\n    context.currentPage = currentPage;\n\n    var filters = this.data.filters || this.data.settings.filters || [];\n    if (_.isEmpty(filters)) {\n      context.showFilter = getDefaultTrueSetting('showFilter', this.data);\n    } else {\n      context.showFilter = getDefaultFalseSetting('showFilter', this.data);\n    }\n    if (context.showFilter) {\n      filters.push(context.id + '-filter');\n    }\n    context.filters = new ReactiveVar(filters);\n\n    dependOnFilters(context.filters.get(), function () {\n      if (context.reactiveTableSetup) {\n        context.currentPage.set(0);\n        updateHandle(context);\n      }\n    });\n\n    context.showColumnToggles = getDefaultFalseSetting('showColumnToggles', this.data);\n\n    if (_.isUndefined(this.data.useFontAwesome)) {\n        if (!_.isUndefined(this.data.settings.useFontAwesome)) {\n            context.useFontAwesome = this.data.settings.useFontAwesome;\n        } else if (!_.isUndefined(Package['fortawesome:fontawesome'])) {\n            context.useFontAwesome = true;\n        } else {\n            context.useFontAwesome = false;\n        }\n    } else {\n        context.useFontAwesome = this.data.useFontAwesome;\n    }\n    context.noDataTmpl = this.data.noDataTmpl || this.data.settings.noDataTmpl;\n    context.enableRegex = getDefaultFalseSetting('enableRegex', this.data);\n\n    context.ready = new ReactiveVar(true);\n\n    if (context.server) {\n        context.ready.set(false);\n        updateHandle(context);\n    }\n\n    context.reactiveTableSetup = true;\n\n    this.context = context;\n};\n\nvar getDefaultFieldVisibility = function (field) {\n    if (field.isVisible && field.isVisible instanceof ReactiveVar) {\n        return field.isVisible;\n    }\n    return new ReactiveVar(!field.hidden || (_.isFunction(field.hidden) && !field.hidden()));\n}\n\nvar getRowCount = function () {\n    if (this.server) {\n        var count = ReactiveTableCounts.findOne(this.publicationId.get());\n        return (count ? count.count : 0);\n    } else {\n        var filterQuery = getFilterQuery(getFilterStrings(this.filters.get()), getFilterFields(this.filters.get(), this.fields), {enableRegex: this.enableRegex});\n        return this.collection.find(filterQuery).count();\n    }\n};\n\nvar getPageCount = function () {\n    var count = getRowCount.call(this);\n    var rowsPerPage = this.rowsPerPage.get();\n    return Math.ceil(count / rowsPerPage);\n};\n\nvar getUpdateHandleForTemplate = function (template_instance) {\n    if (!template_instance.updateHandle) {\n        template_instance.updateHandle = _.debounce(updateHandle, 200);\n    }\n    return template_instance.updateHandle;\n};\n\nTemplate.reactiveTable.helpers({\n    'context': function () {\n        if (!Template.instance().context ||\n            !_.isEqual(this, Template.instance().context.templateData)) {\n            setup.call(Template.instance());\n        }\n        return Template.instance().context;\n    },\n\n    'ready' : function () {\n        return this.ready.get();\n    },\n\n    'getFilterId': function () {\n        return this.id + '-filter';\n    },\n\n    'getField': function (object) {\n        var fn = this.fn || function (value) { return value; };\n        var key = this.key;\n        var value = get(object, key);\n        return fn(value, object);\n    },\n\n    'getFieldIndex': function () {\n        return _.indexOf(Template.parentData(1).fields, this);\n    },\n\n    'getFieldFieldId': function () {\n        return this.fieldId;\n    },\n\n    'getKey': function () {\n        return this.key;\n    },\n\n    'getHeaderClass': function () {\n        if (_.isUndefined(this.headerClass)) {\n            return this.key;\n        }\n        var css;\n        if (_.isFunction(this.headerClass)) {\n            css = this.headerClass();\n        } else {\n            css = this.headerClass;\n        }\n        return css;\n    },\n\n    'getCellClass': function (object) {\n        if (_.isUndefined(this.cellClass)) {\n            return this.key;\n        }\n        var css;\n        if (_.isFunction(this.cellClass)) {\n            var value = get(object, this.key);\n            css = this.cellClass(value, object);\n        } else {\n            css = this.cellClass;\n        }\n        return css;\n    },\n\n    'labelIsTemplate': function () {\n        return this.label && _.isObject(this.label) && this.label instanceof Blaze.Template;\n    },\n\n    'getLabel': function () {\n        return _.isString(this.label) ? this.label : this.label();\n    },\n\n    'isPrimarySortField': function () {\n        var parentData = Template.parentData(1);\n        var primarySortField = getPrimarySortField(parentData.fields, parentData.multiColumnSort);\n        return primarySortField && primarySortField.fieldId === this.fieldId;\n    },\n\n    'isSortable': function () {\n        return (this.sortable === undefined) ? true : this.sortable;\n    },\n\n    'isVisible': function () {\n        var self = this; // is a field object\n        var topLevelData;\n        if (Template.parentData(2) && Template.parentData(2).reactiveTableSetup) {\n          topLevelData = Template.parentData(2);\n        } else {\n          topLevelData = Template.parentData(1);\n        }\n        var visibleFields = topLevelData.visibleFields.get();\n        var fields = topLevelData.fields;\n\n        var visibleField = _.findWhere(visibleFields, {fieldId: self.fieldId});\n        if (visibleField) {\n            return visibleField.isVisible.get();\n        } else {\n            // Add field to visibleFields list\n            var _isVisible = getDefaultFieldVisibility(self);\n            visibleFields.push({fieldId:self.fieldId, isVisible:_isVisible});\n            topLevelData.visibleFields.set(visibleFields);\n            return _isVisible.get();\n        }\n    },\n\n    'isAscending' : function () {\n        var sortDirection = this.sortDirection.get();\n        return (sortDirection === 1);\n    },\n\n    'sortedRows': function () {\n        if (this.server) {\n            return this.publishedRows.find({\n              \"reactive-table-id\": this.publicationId.get()\n            }, {\n              sort: {\n                \"reactive-table-sort\": 1\n              }\n            });\n        } else  {\n            var sortByValue = _.all(getSortedFields(this.fields, this.multiColumnSort), function (field) {\n                return field.sortByValue || !field.fn;\n            });\n            var filterQuery = getFilterQuery(getFilterStrings(this.filters.get()), getFilterFields(this.filters.get(), this.fields), {enableRegex: this.enableRegex});\n\n            var limit = this.rowsPerPage.get();\n            var currentPage = this.currentPage.get();\n            var skip = currentPage * limit;\n\n            if (sortByValue) {\n\n                var sortQuery = getSortQuery(this.fields, this.multiColumnSort);\n                return this.collection.find(filterQuery, {\n                    sort: sortQuery,\n                    skip: skip,\n                    limit: limit\n                });\n\n            } else {\n\n                var rows = this.collection.find(filterQuery).fetch();\n                sortedRows = sortWithFunctions(rows, this.fields, this.multiColumnSort);\n                return sortedRows.slice(skip, skip + limit);\n\n            }\n        }\n    },\n\n    'noData': function () {\n        var pageCount = getPageCount.call(this);\n        return (pageCount === 0) && this.noDataTmpl;\n    },\n\n    'getPageCount' : getPageCount,\n\n    'getRowsPerPage' : function () {\n        return this.rowsPerPage.get();\n    },\n\n    'getCurrentPage' : function () {\n        return 1 + this.currentPage.get();\n    },\n\n    'isntFirstPage' : function () {\n        return this.currentPage.get() > 0;\n    },\n\n    'isntLastPage' : function () {\n        var currentPage = 1 + this.currentPage.get();\n        var pageCount = getPageCount.call(this);\n        return currentPage < pageCount;\n    },\n\n    'showNavigation' : function () {\n        if (this.showNavigation === 'always') return true;\n        if (this.showNavigation === 'never') return false;\n        return getPageCount.call(this) > 1;\n    },\n    'getRowCount': getRowCount\n});\n\nTemplate.reactiveTable.events({\n    'click .reactive-table .sortable': function (event) {\n        var template = Template.instance();\n        var target = $(event.target).is('i') ? $(event.target).parent() : $(event.target);\n        var sortFieldId = target.attr('fieldid');\n        changePrimarySort(sortFieldId, template.context.fields, template.multiColumnSort);\n        getUpdateHandleForTemplate(template)(template.context);\n    },\n\n    'click .reactive-table-columns-dropdown li': function (event) {\n        var template = Template.instance();\n        var target = $(event.currentTarget);\n        var fieldId = target.find('input').attr('data-fieldid');\n        var visibleFields = template.context.visibleFields.get();\n        var visibleField = _.findWhere(visibleFields, {fieldId: fieldId});\n        if (visibleField) {\n            // Toggle visibility\n            visibleField.isVisible.set(!visibleField.isVisible.get());\n            template.context.visibleFields.set(visibleFields);\n        }\n    },\n\n    'change .reactive-table-navigation .rows-per-page input': function (event) {\n        var rowsPerPage = Math.max(~~$(event.target).val(), 1);\n        var template = Template.instance();\n        template.context.rowsPerPage.set(rowsPerPage);\n        $(event.target).val(rowsPerPage);\n\n        var currentPage = template.context.currentPage.get() + 1;\n        var pageCount = getPageCount.call(this);\n        if (currentPage > pageCount) {\n          template.context.currentPage.set(pageCount - 1);\n        }\n        getUpdateHandleForTemplate(template)(template.context);\n    },\n\n    'change .reactive-table-navigation .page-number input': function (event) {\n        var currentPage = Math.max(~~$(event.target).val(), 1);\n        var pageCount = getPageCount.call(this);\n        if (currentPage > pageCount) {\n          currentPage = pageCount;\n        }\n        if (currentPage < 0) {\n          currentPage = 1;\n        }\n        var template = Template.instance();\n        template.context.currentPage.set(currentPage - 1);\n        $(event.target).val(currentPage);\n        getUpdateHandleForTemplate(template)(template.context);\n    },\n\n    'click .reactive-table-navigation .previous-page': function (event) {\n        var template = Template.instance();\n        var currentPage = template.context.currentPage.get();\n        template.context.currentPage.set(currentPage - 1);\n        getUpdateHandleForTemplate(template)(template.context);\n    },\n\n    'click .reactive-table-navigation .next-page': function (event) {\n        var template = Template.instance();\n        var currentPage = template.context.currentPage.get();\n        template.context.currentPage.set(currentPage + 1);\n        getUpdateHandleForTemplate(template)(template.context);\n    }\n});\n","normalizeSort = function (field, oldField) {\n  // preserve user sort settings\n  if (oldField && _.has(oldField, 'sortOrder')) {\n    field.sortOrder = oldField.sortOrder;\n  }\n  if (oldField && _.has(oldField, 'sortDirection')) {\n    field.sortDirection = oldField.sortDirection;\n  }\n  \n  // backwards-compatibility\n  if (!_.has(field, 'sortOrder') && _.has(field, 'sort')) {\n    console.warn('reactiveTable warning: The \"sort\" option for fields is deprecated');\n    field.sortOrder = 0;\n    field.sortDirection = field.sort;\n  }\n\n\n  var sortOrder;\n  \n  if (!_.has(field, 'sortOrder')) {\n    sortOrder = Infinity;\n    field.sortOrder = new ReactiveVar();\n  } else if (field.sortOrder instanceof ReactiveVar) {\n    sortOrder = field.sortOrder.get()\n  } else {\n    sortOrder = field.sortOrder;\n    field.sortOrder = new ReactiveVar();\n  }\n\n  if (!_.isNumber(sortOrder) || sortOrder < 0) {\n    console.error('reactiveTable error - sortOrder must be a postive number: ' + sortOrder);\n    sortOrder = Infinity;\n  }\n  field.sortOrder.set(sortOrder);\n\n  var sortDirection;\n\n  if (!_.has(field, 'sortDirection')) {\n    sortDirection = 1;\n    field.sortDirection = new ReactiveVar()\n  } else if (field.sortDirection instanceof ReactiveVar) {\n    sortDirection = field.sortDirection.get();\n  } else {\n    sortDirection = field.sortDirection;\n    field.sortDirection = new ReactiveVar();\n  }\n\n  if (sortDirection === 'desc' || sortDirection === 'descending' || sortDirection === -1) {\n    sortDirection = -1;\n  } else if (sortDirection) {\n    sortDirection = 1;\n  } \n  field.sortDirection.set(sortDirection);\n};\n\ngetSortedFields = function (fields, multiColumnSort) {\n  var filteredFields = _.filter(fields, function (field) {\n    return field.sortOrder.get() < Infinity;\n  });\n  if (!filteredFields.length) {\n    var firstSortableField = _.find(fields, function (field) {\n      return _.isUndefined(field.sortable) || field.sortable !== false;\n    });\n    if (firstSortableField) {\n      filteredFields = [firstSortableField];\n    }\n  }\n  var sortedFields = _.sortBy(filteredFields, function (field) {\n    return field.sortOrder.get();\n  });\n  return multiColumnSort ? sortedFields : sortedFields.slice(0, 1);\n}\n\ngetSortQuery = function (fields, multiColumnSort) {\n  var sortedFields = getSortedFields(fields, multiColumnSort);\n  var sortQuery = {};\n  _.each(sortedFields, function (field) {\n    sortQuery[field.key] = field.sortDirection.get();\n  });\n  return sortQuery;\n};\n\nsortWithFunctions = function (rows, fields, multiColumnSort) {\n  var sortedFields = getSortedFields(fields, multiColumnSort);\n  var sortedRows = rows;\n\n  _.each(sortedFields.reverse(), function (field) {\n    if (field.sortByValue || !field.fn) {\n      sortedRows = _.sortBy(sortedRows, field.key);\n    } else {\n      sortedRows = _.sortBy(sortedRows, function (row) {\n        return field.fn( get( row, field.key ), row );\n      });\n    }\n    if (field.sortDirection.get() === -1) {\n      sortedRows.reverse();\n    }\n  });\n  return sortedRows;\n};\n\ngetPrimarySortField = function (fields, multiColumnSort) {\n  return getSortedFields(fields, multiColumnSort)[0];\n};\n\nchangePrimarySort = function(fieldId, fields, multiColumnSort) {\n  var primarySortField = getPrimarySortField(fields, multiColumnSort);\n  if (primarySortField && primarySortField.fieldId === fieldId) {\n    var sortDirection = -1 * primarySortField.sortDirection.get();\n    primarySortField.sortDirection.set(sortDirection);\n    primarySortField.sortOrder.set(0);\n  } else {\n    _.each(fields, function (field) {\n      if (field.fieldId === fieldId) {\n        field.sortOrder.set(0);\n        if (primarySortField) {\n          field.sortDirection.set(primarySortField.sortDirection.get());\n        }\n      } else {\n        var sortOrder = 1 + field.sortOrder.get();\n        field.sortOrder.set(sortOrder);\n      }\n    });\n  }\n};","var parseFilterString = function (filterString) {\n  var startQuoteRegExp = /^[\\'\\\"]/;\n  var endQuoteRegExp = /[\\'\\\"]$/;\n  var filters = [];\n  var words = filterString.split(' ');\n\n  var inQuote = false;\n  var quotedWord = '';\n  _.each(words, function (word) {\n    if (inQuote) {\n      if (endQuoteRegExp.test(word)) {\n        filters.push(quotedWord + ' ' + word.slice(0, word.length - 1));\n        inQuote = false;\n        quotedWord = '';\n      } else {\n        quotedWord = quotedWord + ' ' + word;\n      }\n    } else if (startQuoteRegExp.test(word)) {\n      if (endQuoteRegExp.test(word)) {\n        filters.push(word.slice(1, word.length - 1));\n      } else {\n        inQuote = true;\n        quotedWord = word.slice(1, word.length);\n      }\n    } else {\n      filters.push(word);\n    }\n  });\n  return filters;\n};\n\nvar escapeRegex = function(text) {\n  return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n};\n\nvar getFieldMatches = function (field) {\n  var fieldMatches = [];\n  var keys = field.split('.');\n  var previousKeys = '';\n  _.each(keys, function (key) {\n    fieldMatches.push(previousKeys + key);\n    previousKeys += key + '.';\n  });\n  return fieldMatches;\n};\n\ngetFilterQuery = function (filterInputs, filterFields, settings) {\n  settings = settings || {};\n  if (settings.enableRegex === undefined) {\n    settings.enableRegex = false;\n  }\n  if (settings.fields) {\n    _.each(filterInputs, function (filter, index) {\n      if (_.any(settings.fields, function (include) { return include; })) {\n        filterFields[index] = _.filter(filterFields[index], function (field) {\n          return _.any(getFieldMatches(field), function (fieldMatch) {\n            return settings.fields[fieldMatch];\n          });\n        });\n      } else {\n        filterFields[index] = _.filter(filterFields[index], function (field) {\n          return _.all(getFieldMatches(field), function (fieldMatch) {\n            return _.isUndefined(settings.fields[fieldMatch]) || settings.fields[fieldMatch];\n          });\n        });\n      }\n    });\n  }\n  var numberRegExp = /^\\d+$/;\n  var queryList = [];\n  _.each(filterInputs, function (filter, index) {\n    if (filter) {\n      if (_.isObject(filter)) {\n        var fieldQueries = _.map(filterFields[index], function (field) {\n          var query = {};\n          query[field] = filter;\n          return query;\n        });\n        if (fieldQueries.length) {\n            queryList.push({'$or': fieldQueries});\n          }\n      } else {\n        var filters = parseFilterString(filter);\n        _.each(filters, function (filterWord) {\n          if (settings.enableRegex === false) {\n            filterWord = escapeRegex(filterWord);\n          }\n          var filterQueryList = [];\n          _.each(filterFields[index], function (field) {\n            var filterRegExp = new RegExp(filterWord, 'i');\n            var query = {};\n            query[field] = filterRegExp;\n            filterQueryList.push(query);\n\n            if (numberRegExp.test(filterWord)) {\n              var numberQuery = {};\n              numberQuery[field] = parseInt(filterWord, 10);\n              filterQueryList.push(numberQuery);\n            }\n\n            if (filterWord === \"true\") {\n              var boolQuery = {};\n              boolQuery[field] = true;\n              filterQueryList.push(boolQuery);\n            } else if (filterWord === \"false\") {\n              var boolQuery = {};\n              boolQuery[field] = false;\n              filterQueryList.push(boolQuery);\n            }\n          });\n\n          if (filterQueryList.length) {\n            var filterQuery = {'$or': filterQueryList};\n            queryList.push(filterQuery);\n          }\n        });\n      }\n    }\n  });\n  return queryList.length ? {'$and': queryList} : {};\n};\n\nif (Meteor.isClient) {\n  ReactiveTable = ReactiveTable || {};\n\n  var reactiveTableFilters = {};\n  var callbacks = {};\n\n  ReactiveTable.Filter = function (id, fields) {\n    if (reactiveTableFilters[id]) {\n        return reactiveTableFilters[id];\n    }\n      \n    var filter = new ReactiveVar();\n\n    this.fields = fields;\n\n    this.get = function () {\n      return filter.get() || '';\n    };\n\n    this.set = function (filterString) {\n      filter.set(filterString);\n      _.each(callbacks[id], function (callback) {\n        callback();\n      });\n    };\n      \n    reactiveTableFilters[id] = this;\n  };\n    \n  ReactiveTable.clearFilters = function (filterIds) {\n    _.each(filterIds, function (filterId) {\n      if (reactiveTableFilters[filterId]) {\n        reactiveTableFilters[filterId].set('');\n      }\n    });\n  };\n\n  dependOnFilters = function (filterIds, callback) {\n    _.each(filterIds, function (filterId) {\n      if (_.isUndefined(callbacks[filterId])) {\n        callbacks[filterId] = [];\n      }\n      callbacks[filterId].push(callback);\n    });\n  };\n\n  getFilterStrings = function (filterIds) {\n    return _.map(filterIds, function (filterId) {\n      if (_.isUndefined(reactiveTableFilters[filterId])) {\n        return '';\n      }\n      return reactiveTableFilters[filterId].get();\n    });\n  };\n\n  getFilterFields = function (filterIds, allFields) {\n    return _.map(filterIds, function (filterId) {\n      if (_.isUndefined(reactiveTableFilters[filterId])) {\n        return _.map(allFields, function (field) { return field.key; });\n      } else if (_.isEmpty(reactiveTableFilters[filterId].fields)) {\n        return _.map(allFields, function (field) { return field.key; });\n      } else {\n        return reactiveTableFilters[filterId].fields;\n      }\n    });\n  };\n\n  Template.reactiveTableFilter.helpers({\n    'class': function () {\n      return this.class || 'input-group';\n    },\n    \n    'filter': function () {\n      if (_.isUndefined(reactiveTableFilters[this.id])) {\n        new ReactiveTable.Filter(this.id, this.fields);\n      }\n      return reactiveTableFilters[this.id].get();\n    }\n  });\n\n  var updateFilter = _.debounce(function (template, filterText) {\n    reactiveTableFilters[template.data.id].set(filterText);\n  }, 200);\n\n  Template.reactiveTableFilter.events({\n    'keyup .reactive-table-input, input .reactive-table-input': function (event) {\n      var template = Template.instance();\n      var filterText = $(event.target).val();\n      updateFilter(template, filterText);\n    },\n  });\n}\n"]}}]