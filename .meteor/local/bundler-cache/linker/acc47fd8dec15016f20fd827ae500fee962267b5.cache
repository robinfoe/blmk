[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar WebApp = Package.webapp.WebApp;\nvar main = Package.webapp.main;\nvar WebAppInternals = Package.webapp.WebAppInternals;\nvar RoutePolicy = Package.routepolicy.RoutePolicy;\n\n/* Package-scope variables */\nvar UploadServer;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/tomi_upload-server/upload_server.js                                                                   //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nvar formidable = Npm.require('formidable');                                                                       // 1\nvar http = Npm.require('http');                                                                                   // 2\nvar sys = Npm.require('sys');                                                                                     // 3\n                                                                                                                  // 4\n//var connect = Npm.require('connect');                                                                           // 5\nvar url = Npm.require('url');                                                                                     // 6\nvar path = Npm.require('path');                                                                                   // 7\nvar fs = Npm.require('fs');                                                                                       // 8\nvar Fiber = Npm.require('fibers');                                                                                // 9\n                                                                                                                  // 10\nvar _existsSync = fs.existsSync || path.existsSync;                                                               // 11\nvar imageMagick = Npm.require('imagemagick');                                                                     // 12\n                                                                                                                  // 13\nvar options = {                                                                                                   // 14\n  /** @type String*/                                                                                              // 15\n  tmpDir: null,                                                                                                   // 16\n  /** @type String*/                                                                                              // 17\n  uploadDir: null,                                                                                                // 18\n  uploadUrl: '/upload/',                                                                                          // 19\n  checkCreateDirectories: false,                                                                                  // 20\n  maxPostSize: 11000000000, // 11 GB                                                                              // 21\n  minFileSize: 1,                                                                                                 // 22\n  maxFileSize: 10000000000, // 10 GB                                                                              // 23\n  acceptFileTypes: /.+/i,                                                                                         // 24\n  // Files not matched by this regular expression force a download dialog,                                        // 25\n  // to prevent executing any scripts in the context of the service domain:                                       // 26\n  inlineFileTypes: /\\.(gif|jpe?g|png)$/i,                                                                         // 27\n  imageTypes: /\\.(gif|jpe?g|png)$/i,                                                                              // 28\n  imageVersions: {                                                                                                // 29\n    thumbnail: {                                                                                                  // 30\n      width: 200,                                                                                                 // 31\n      height: 200,                                                                                                // 32\n    },                                                                                                            // 33\n  },                                                                                                              // 34\n  overwrite: false,                                                                                               // 35\n  cacheTime: 86400,                                                                                               // 36\n  getDirectory: function (fileInfo, formData) {                                                                   // 37\n    return \"\"                                                                                                     // 38\n  },                                                                                                              // 39\n  getFileName: function (fileInfo, formData) {                                                                    // 40\n    return fileInfo.name;                                                                                         // 41\n  },                                                                                                              // 42\n  finished: function () {                                                                                         // 43\n  },                                                                                                              // 44\n  validateRequest: function () {                                                                                  // 45\n    return null;                                                                                                  // 46\n  },                                                                                                              // 47\n  validateFile: function () {                                                                                     // 48\n    return null;                                                                                                  // 49\n  },                                                                                                              // 50\n  accessControl: {                                                                                                // 51\n    allowOrigin: '*',                                                                                             // 52\n    allowMethods: 'OPTIONS, HEAD, GET, POST, PUT, DELETE',                                                        // 53\n    allowHeaders: 'Content-Type, Content-Range, Content-Disposition'                                              // 54\n  },                                                                                                              // 55\n  mimeTypes: {                                                                                                    // 56\n    \"html\": \"text/html\",                                                                                          // 57\n    \"jpeg\": \"image/jpeg\",                                                                                         // 58\n    \"jpg\": \"image/jpeg\",                                                                                          // 59\n    \"png\": \"image/png\",                                                                                           // 60\n    \"gif\": \"image/gif\",                                                                                           // 61\n    \"js\": \"text/javascript\",                                                                                      // 62\n    \"css\": \"text/css\",                                                                                            // 63\n    \"pdf\": \"application/pdf\",                                                                                     // 64\n    \"doc\": \"application/msword\",                                                                                  // 65\n    \"docx\": \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",                            // 66\n    \"zip\": \"application/zip, application/x-compressed-zip\",                                                       // 67\n    \"txt\": \"text/plain\"                                                                                           // 68\n  }                                                                                                               // 69\n  /* Uncomment and edit this section to provide the service via HTTPS:                                            // 70\n   ssl: {                                                                                                         // 71\n   key: fs.readFileSync('/Applications/XAMPP/etc/ssl.key/server.key'),                                            // 72\n   cert: fs.readFileSync('/Applications/XAMPP/etc/ssl.crt/server.crt')                                            // 73\n   },                                                                                                             // 74\n   */                                                                                                             // 75\n};                                                                                                                // 76\n                                                                                                                  // 77\n                                                                                                                  // 78\nUploadServer = {                                                                                                  // 79\n  getOptions: function()                                                                                          // 80\n  {                                                                                                               // 81\n    return options;                                                                                               // 82\n  },                                                                                                              // 83\n  init: function (opts) {                                                                                         // 84\n    if (opts.checkCreateDirectories != null) options.checkCreateDirectories = opts.checkCreateDirectories;        // 85\n                                                                                                                  // 86\n    if (opts.tmpDir == null) {                                                                                    // 87\n      throw new Meteor.Error('Temporary directory needs to be assigned!');                                        // 88\n    } else {                                                                                                      // 89\n      options.tmpDir = opts.tmpDir;                                                                               // 90\n    }                                                                                                             // 91\n                                                                                                                  // 92\n    if (opts.cacheTime != null) {                                                                                 // 93\n      options.cacheTime = opts.cacheTime;                                                                         // 94\n    }                                                                                                             // 95\n                                                                                                                  // 96\n    if (opts.mimeTypes != null) {                                                                                 // 97\n      for (var key in opts.mimeTypes) {                                                                           // 98\n        options.mimeTypes[key] = opts.mimeTypes[key];                                                             // 99\n      }                                                                                                           // 100\n    }                                                                                                             // 101\n                                                                                                                  // 102\n    if (opts.checkCreateDirectories) {                                                                            // 103\n      checkCreateDirectory(options.tmpDir);                                                                       // 104\n    }                                                                                                             // 105\n                                                                                                                  // 106\n    if (opts.uploadDir == null) {                                                                                 // 107\n      throw new Meteor.Error('Upload directory needs to be assigned!');                                           // 108\n    } else {                                                                                                      // 109\n      options.uploadDir = opts.uploadDir;                                                                         // 110\n    }                                                                                                             // 111\n                                                                                                                  // 112\n    if (options.checkCreateDirectories) {                                                                         // 113\n      checkCreateDirectory(options.uploadDir);                                                                    // 114\n    }                                                                                                             // 115\n                                                                                                                  // 116\n    if (opts.maxPostSize != null) options.maxPostSize = opts.maxPostSize;                                         // 117\n    if (opts.minFileSize != null) options.minFileSize = opts.minFileSize;                                         // 118\n    if (opts.maxFileSize != null) options.maxFileSize = opts.maxFileSize;                                         // 119\n    if (opts.acceptFileTypes != null) options.acceptFileTypes = opts.acceptFileTypes;                             // 120\n    if (opts.imageTypes != null) options.imageTypes = opts.imageTypes;                                            // 121\n    if (opts.validateRequest != null) options.validateRequest = opts.validateRequest;                             // 122\n    if (opts.validateFile != null) options.validateFile = opts.validateFile;                                      // 123\n    if (opts.getDirectory != null) options.getDirectory = opts.getDirectory;                                      // 124\n    if (opts.getFileName != null) options.getFileName = opts.getFileName;                                         // 125\n    if (opts.finished != null) options.finished = opts.finished;                                                  // 126\n    if (opts.overwrite != null) options.overwrite = opts.overwrite;                                               // 127\n                                                                                                                  // 128\n    if (opts.uploadUrl) options.uploadUrl = opts.uploadUrl;                                                       // 129\n                                                                                                                  // 130\n    if (opts.imageVersions != null) options.imageVersions = opts.imageVersions                                    // 131\n    else options.imageVersions = [];                                                                              // 132\n  },                                                                                                              // 133\n  delete: function (filePath) {                                                                                   // 134\n                                                                                                                  // 135\n    // make sure paths are correct                                                                                // 136\n    fs.unlinkSync(path.join(options.uploadDir, filePath));                                                        // 137\n  },                                                                                                              // 138\n  serve: function (req, res) {                                                                                    // 139\n    if (options.tmpDir == null || options.uploadDir == null) {                                                    // 140\n      throw new Meteor.Error('Upload component not initialised!');                                                // 141\n    }                                                                                                             // 142\n                                                                                                                  // 143\n    res.setHeader(                                                                                                // 144\n      'Access-Control-Allow-Origin',                                                                              // 145\n      options.accessControl.allowOrigin                                                                           // 146\n    );                                                                                                            // 147\n    res.setHeader(                                                                                                // 148\n      'Access-Control-Allow-Methods',                                                                             // 149\n      options.accessControl.allowMethods                                                                          // 150\n    );                                                                                                            // 151\n    res.setHeader(                                                                                                // 152\n      'Access-Control-Allow-Headers',                                                                             // 153\n      options.accessControl.allowHeaders                                                                          // 154\n    );                                                                                                            // 155\n    var handleResult = function (result, redirect) {                                                              // 156\n        if (redirect) {                                                                                           // 157\n          res.writeHead(302, {                                                                                    // 158\n            'Location': redirect.replace(                                                                         // 159\n              /%s/,                                                                                               // 160\n              encodeURIComponent(JSON.stringify(result))                                                          // 161\n            )                                                                                                     // 162\n          });                                                                                                     // 163\n          res.end();                                                                                              // 164\n        } else if (result.error) {                                                                                // 165\n          res.writeHead(403, {'Content-Type': 'text/plain'});                                                     // 166\n          res.write(result.error);                                                                                // 167\n          res.end();                                                                                              // 168\n        } else {                                                                                                  // 169\n          //res.writeHead(200, {                                                                                  // 170\n          //  'Content-Type': req.headers.accept                                                                  // 171\n          //    .indexOf('application/json') !== -1 ?                                                             // 172\n          //    'application/json' : 'text/plain'                                                                 // 173\n          //});                                                                                                   // 174\n          res.end(JSON.stringify(result));                                                                        // 175\n        }                                                                                                         // 176\n      },                                                                                                          // 177\n      setNoCacheHeaders = function () {                                                                           // 178\n        if (options.cacheTime) {                                                                                  // 179\n          res.setHeader('Cache-Control', 'public, max-age=' + options.cacheTime);                                 // 180\n        } else {                                                                                                  // 181\n          res.setHeader('Pragma', 'no-cache');                                                                    // 182\n          res.setHeader('Cache-Control', 'no-store, no-cache, must-revalidate');                                  // 183\n          // res.setHeader('Content-Disposition', 'inline; filename=\"files.json\"');                               // 184\n        }                                                                                                         // 185\n      },                                                                                                          // 186\n      handler = new UploadHandler(req, res, handleResult);                                                        // 187\n                                                                                                                  // 188\n                                                                                                                  // 189\n    // validate the request                                                                                       // 190\n    var error = options.validateRequest(req, res);                                                                // 191\n    if (error) {                                                                                                  // 192\n      res.writeHead(403, {'Content-Type': 'text/plain'});                                                         // 193\n      res.write(error);                                                                                           // 194\n      res.end();                                                                                                  // 195\n      return;                                                                                                     // 196\n    }                                                                                                             // 197\n                                                                                                                  // 198\n    switch (req.method) {                                                                                         // 199\n      case 'OPTIONS':                                                                                             // 200\n        res.end();                                                                                                // 201\n        break;                                                                                                    // 202\n      case 'HEAD':                                                                                                // 203\n      case 'GET':                                                                                                 // 204\n        setNoCacheHeaders();                                                                                      // 205\n                                                                                                                  // 206\n        var uri = url.parse(req.url).pathname;                                                                    // 207\n        var filename = path.join(options.uploadDir, unescape(uri));                                               // 208\n        var stats;                                                                                                // 209\n                                                                                                                  // 210\n        try {                                                                                                     // 211\n          stats = fs.lstatSync(filename); // throws if path doesn't exist                                         // 212\n        } catch (e) {                                                                                             // 213\n          res.writeHead(404, {'Content-Type': 'text/plain'});                                                     // 214\n          res.write('404 Not Found\\n');                                                                           // 215\n          res.end();                                                                                              // 216\n          return;                                                                                                 // 217\n        }                                                                                                         // 218\n                                                                                                                  // 219\n        if (stats.isFile()) {                                                                                     // 220\n          // path exists, is a file                                                                               // 221\n          var mimeType = options.mimeTypes[path.extname(filename).split(\".\").reverse()[0]];                       // 222\n          if (!mimeType) {                                                                                        // 223\n            mimeType = \"application/octet-stream\";                                                                // 224\n          }                                                                                                       // 225\n          res.writeHead(200, {'Content-Type': mimeType});                                                         // 226\n                                                                                                                  // 227\n          //connect.static(options.uploadDir)(req, res);                                                          // 228\n          var fileStream = fs.createReadStream(filename);                                                         // 229\n          fileStream.pipe(res);                                                                                   // 230\n                                                                                                                  // 231\n        } else if (stats.isDirectory()) {                                                                         // 232\n          // path exists, is a directory                                                                          // 233\n          res.writeHead(403, {'Content-Type': 'text/plain'});                                                     // 234\n          res.write('Access denied');                                                                             // 235\n          res.end();                                                                                              // 236\n        } else {                                                                                                  // 237\n          res.writeHead(500, {'Content-Type': 'text/plain'});                                                     // 238\n          res.write('500 Internal server error\\n');                                                               // 239\n          res.end();                                                                                              // 240\n        }                                                                                                         // 241\n        break;                                                                                                    // 242\n      case 'POST':                                                                                                // 243\n        // validate post                                                                                          // 244\n        setNoCacheHeaders();                                                                                      // 245\n        handler.post();                                                                                           // 246\n        break;                                                                                                    // 247\n      //case 'DELETE':                                                                                            // 248\n      //  handler.destroy();                                                                                      // 249\n      //  break;                                                                                                  // 250\n      default:                                                                                                    // 251\n        res.statusCode = 405;                                                                                     // 252\n        res.end();                                                                                                // 253\n    }                                                                                                             // 254\n  }                                                                                                               // 255\n}                                                                                                                 // 256\n                                                                                                                  // 257\nvar utf8encode = function (str) {                                                                                 // 258\n  return unescape(encodeURIComponent(str));                                                                       // 259\n};                                                                                                                // 260\n                                                                                                                  // 261\nvar nameCountRegexp = /(?:(?: \\(([\\d]+)\\))?(\\.[^.]+))?$/;                                                         // 262\n                                                                                                                  // 263\nvar nameCountFunc = function (s, index, ext) {                                                                    // 264\n  return ' (' + ((parseInt(index, 10) || 0) + 1) + ')' + (ext || '');                                             // 265\n};                                                                                                                // 266\n                                                                                                                  // 267\n/**                                                                                                               // 268\n * @class FileInfo Manages paths for uploaded objects                                                             // 269\n */                                                                                                               // 270\nvar FileInfo = function (file, req, form) {                                                                       // 271\n  this.name = file.name;                                                                                          // 272\n  this.path = file.name;                                                                                          // 273\n  this.size = file.size;                                                                                          // 274\n  this.type = file.type;                                                                                          // 275\n                                                                                                                  // 276\n  this.subDirectory = options.getDirectory(this, form.formFields);                                                // 277\n  this.baseUrl = (options.ssl ? 'https:' : 'http:') + '//' + req.headers.host + options.uploadUrl;                // 278\n  this.url = this.baseUrl + (this.subDirectory ? (this.subDirectory + '/') : '') + encodeURIComponent(this.name);\n};                                                                                                                // 280\n                                                                                                                  // 281\nFileInfo.prototype.validate = function () {                                                                       // 282\n  this.error = null;                                                                                              // 283\n  if (options.minFileSize && options.minFileSize > this.size) {                                                   // 284\n    this.error = 'File is too small';                                                                             // 285\n  } else if (options.maxFileSize && options.maxFileSize < this.size) {                                            // 286\n    this.error = 'File is too big';                                                                               // 287\n  } else if (!options.acceptFileTypes.test(this.name)) {                                                          // 288\n    this.error = 'Filetype not allowed';                                                                          // 289\n  }                                                                                                               // 290\n  return this.error;                                                                                              // 291\n};                                                                                                                // 292\n                                                                                                                  // 293\n// FileInfo.prototype.safeName = function () {                                                                    // 294\n//   // Prevent directory traversal and creating hidden system files:                                             // 295\n//   this.name = path.basename(this.name).replace(/^\\.+/, '');                                                    // 296\n//   // Prevent overwriting existing files:                                                                       // 297\n//   while (_existsSync(options.uploadDir + '/' + this.name)) {                                                   // 298\n//     this.name = this.name.replace(nameCountRegexp, nameCountFunc);                                             // 299\n//   }                                                                                                            // 300\n// };                                                                                                             // 301\n                                                                                                                  // 302\nFileInfo.prototype.initUrls = function (req, form) {                                                              // 303\n  if (!this.error) {                                                                                              // 304\n    // image                                                                                                      // 305\n    var that = this;                                                                                              // 306\n    Object.keys(options.imageVersions).forEach(function (version) {                                               // 307\n      if (_existsSync(                                                                                            // 308\n          options.uploadDir + '/' + version + '/' + that.name                                                     // 309\n        )) {                                                                                                      // 310\n        that[version + 'Url'] = that.baseUrl + version + '/' +                                                    // 311\n        encodeURIComponent(that.name);                                                                            // 312\n      }                                                                                                           // 313\n    });                                                                                                           // 314\n  }                                                                                                               // 315\n};                                                                                                                // 316\n                                                                                                                  // 317\nvar UploadHandler = function (req, res, callback) {                                                               // 318\n  this.req = req;                                                                                                 // 319\n  this.res = res;                                                                                                 // 320\n  this.callback = callback;                                                                                       // 321\n};                                                                                                                // 322\n                                                                                                                  // 323\nUploadHandler.prototype.post = function () {                                                                      // 324\n  var handler = this,                                                                                             // 325\n    form = new formidable.IncomingForm(),                                                                         // 326\n    tmpFiles = [],                                                                                                // 327\n    files = [],                                                                                                   // 328\n    map = {},                                                                                                     // 329\n    counter = 1,                                                                                                  // 330\n    redirect,                                                                                                     // 331\n    finish = function () {                                                                                        // 332\n      counter -= 1;                                                                                               // 333\n      if (!counter) {                                                                                             // 334\n        files.forEach(function (fileInfo) {                                                                       // 335\n          fileInfo.initUrls(handler.req, form);                                                                   // 336\n        });                                                                                                       // 337\n        handler.callback({files: files}, redirect);                                                               // 338\n      }                                                                                                           // 339\n    };                                                                                                            // 340\n  form.uploadDir = options.tmpDir;                                                                                // 341\n  form.on('fileBegin', function (name, file) {                                                                    // 342\n    tmpFiles.push(file.path);                                                                                     // 343\n    var fileInfo = new FileInfo(file, handler.req, form);                                                         // 344\n                                                                                                                  // 345\n    //fileInfo.safeName();                                                                                        // 346\n                                                                                                                  // 347\n    // validate post                                                                                              // 348\n    var error = options.validateFile(file);                                                                       // 349\n    if (error) {                                                                                                  // 350\n      res.writeHead(403, {'Content-Type': 'text/plain'});                                                         // 351\n      res.write(error);                                                                                           // 352\n      res.end();                                                                                                  // 353\n      return;                                                                                                     // 354\n    }                                                                                                             // 355\n                                                                                                                  // 356\n    map[path.basename(file.path)] = fileInfo;                                                                     // 357\n    files.push(fileInfo);                                                                                         // 358\n  }).on('field', function (name, value) {                                                                         // 359\n    if (name === 'redirect') {                                                                                    // 360\n      redirect = value;                                                                                           // 361\n    }                                                                                                             // 362\n    // remember all the form fields                                                                               // 363\n    if (this.formFields == null) {                                                                                // 364\n      this.formFields = {};                                                                                       // 365\n    }                                                                                                             // 366\n    //  console.log('Form field: ' + name + \"-\" + value);                                                         // 367\n    this.formFields[name] = value;                                                                                // 368\n  }).on('file', function (name, file) {                                                                           // 369\n    var fileInfo = map[path.basename(file.path)];                                                                 // 370\n    fileInfo.size = file.size;                                                                                    // 371\n                                                                                                                  // 372\n    var error = fileInfo.validate();                                                                              // 373\n    if (error) {                                                                                                  // 374\n      // delete file                                                                                              // 375\n      fs.unlinkSync(file.path);                                                                                   // 376\n      // callback with error                                                                                      // 377\n      handler.callback({error: error});                                                                           // 378\n      return;                                                                                                     // 379\n    }                                                                                                             // 380\n                                                                                                                  // 381\n    // we can store files in subdirectories                                                                       // 382\n    var folder = options.getDirectory(fileInfo, this.formFields);                                                 // 383\n                                                                                                                  // 384\n    // make safe directory, disable all '.'                                                                       // 385\n    folder.replace(/\\./g, '');                                                                                    // 386\n                                                                                                                  // 387\n    // check if directory exists, if not, create all the directories                                              // 388\n    var subFolders = folder.split('/');                                                                           // 389\n    var currentFolder = options.uploadDir;                                                                        // 390\n    for (var i = 0; i < subFolders.length; i++) {                                                                 // 391\n      currentFolder += '/' + subFolders[i];                                                                       // 392\n                                                                                                                  // 393\n      if (!fs.existsSync(currentFolder)) {                                                                        // 394\n        fs.mkdirSync(currentFolder);                                                                              // 395\n      }                                                                                                           // 396\n    }                                                                                                             // 397\n                                                                                                                  // 398\n    // possibly rename file if needed;                                                                            // 399\n    var newFileName = options.getFileName(fileInfo, this.formFields);                                             // 400\n                                                                                                                  // 401\n    // make safe file name                                                                                        // 402\n    newFileName = getSafeName(currentFolder, newFileName);                                                        // 403\n                                                                                                                  // 404\n    // set the file name                                                                                          // 405\n    fileInfo.name = newFileName;                                                                                  // 406\n    fileInfo.path = folder + \"/\" + newFileName;                                                                   // 407\n                                                                                                                  // 408\n    // Move the file to the final destination                                                                     // 409\n    var destinationFile = currentFolder + \"/\" + newFileName;                                                      // 410\n    try                                                                                                           // 411\n    {                                                                                                             // 412\n     \t// Try moving through renameSync                                                                            // 413\n       \tfs.renameSync(file.path, destinationFile)                                                                 // 414\n    }                                                                                                             // 415\n    catch(exception)                                                                                              // 416\n    {                                                                                                             // 417\n    \t// if moving failed, try a copy + delete instead, this to support moving work between partitions             // 418\n    \tvar is = fs.createReadStream(file.path);                                                                     // 419\n\t\tvar os = fs.createWriteStream(destinationFile);                                                                 // 420\n\t\tis.pipe(os);                                                                                                    // 421\n\t\tis.on('end',function() {                                                                                        // 422\n    \t\tfs.unlinkSync(file.path);                                                                                   // 423\n\t\t});                                                                                                             // 424\n    }                                                                                                             // 425\n                                                                                                                  // 426\n    if (options.imageTypes.test(fileInfo.name)) {                                                                 // 427\n      Object.keys(options.imageVersions).forEach(function (version) {                                             // 428\n        counter += 1;                                                                                             // 429\n        var opts = options.imageVersions[version];                                                                // 430\n                                                                                                                  // 431\n        // check if version directory exists                                                                      // 432\n        if (!fs.existsSync(currentFolder + '/' + version)) {                                                      // 433\n          fs.mkdirSync(currentFolder + '/' + version);                                                            // 434\n        }                                                                                                         // 435\n                                                                                                                  // 436\n        var ioptions = {                                                                                          // 437\n          srcPath: currentFolder + '/' + newFileName,                                                             // 438\n          dstPath: currentFolder + '/' + version + '/' + newFileName                                              // 439\n        };                                                                                                        // 440\n                                                                                                                  // 441\n        if (opts.width) {                                                                                         // 442\n          ioptions.width = opts.width;                                                                            // 443\n        }                                                                                                         // 444\n                                                                                                                  // 445\n        if (opts.height) {                                                                                        // 446\n          ioptions.height = opts.height;                                                                          // 447\n        }                                                                                                         // 448\n                                                                                                                  // 449\n        imageMagick.resize(ioptions, finish);                                                                     // 450\n      });                                                                                                         // 451\n    }                                                                                                             // 452\n                                                                                                                  // 453\n    // call the feedback within its own fiber                                                                     // 454\n    var formFields = this.formFields;                                                                             // 455\n    Fiber(function () {                                                                                           // 456\n      options.finished(fileInfo, formFields);                                                                     // 457\n    }).run();                                                                                                     // 458\n                                                                                                                  // 459\n  }).on('aborted', function () {                                                                                  // 460\n    tmpFiles.forEach(function (file) {                                                                            // 461\n      fs.unlink(file);                                                                                            // 462\n    });                                                                                                           // 463\n  }).on('error', function (e) {                                                                                   // 464\n    console.log('ERROR');                                                                                         // 465\n    console.log(e);                                                                                               // 466\n  }).on('progress', function (bytesReceived, bytesExpected) {                                                     // 467\n    if (bytesReceived > options.maxPostSize) {                                                                    // 468\n      handler.req.connection.destroy();                                                                           // 469\n    }                                                                                                             // 470\n  }).on('end', finish).parse(handler.req);                                                                        // 471\n};                                                                                                                // 472\n                                                                                                                  // 473\nUploadHandler.prototype.destroy = function () {                                                                   // 474\n  var handler = this,                                                                                             // 475\n    fileName;                                                                                                     // 476\n  if (handler.req.url.slice(0, options.uploadUrl.length) === options.uploadUrl) {                                 // 477\n    fileName = path.basename(decodeURIComponent(handler.req.url));                                                // 478\n    if (fileName[0] !== '.') {                                                                                    // 479\n      fs.unlink(options.uploadDir + '/' + fileName, function (ex) {                                               // 480\n        Object.keys(options.imageVersions).forEach(function (version) {                                           // 481\n          fs.unlink(options.uploadDir + '/' + version + '/' + fileName);                                          // 482\n        });                                                                                                       // 483\n        handler.callback({success: !ex});                                                                         // 484\n      });                                                                                                         // 485\n      return;                                                                                                     // 486\n    }                                                                                                             // 487\n  }                                                                                                               // 488\n  handler.callback({success: false});                                                                             // 489\n};                                                                                                                // 490\n                                                                                                                  // 491\n// create directories                                                                                             // 492\n                                                                                                                  // 493\nvar checkCreateDirectory = function (dir) {                                                                       // 494\n  if (!dir) {                                                                                                     // 495\n    return;                                                                                                       // 496\n  }                                                                                                               // 497\n                                                                                                                  // 498\n  // If we're on Windows we'll remove the drive letter                                                            // 499\n  if(/^win/.test(process.platform)) {                                                                             // 500\n  \tdir = dir.replace(/([A-Z]:[\\\\\\/]).*?/gi, '')                                                                   // 501\n  }                                                                                                               // 502\n                                                                                                                  // 503\n  var dirParts = dir.split('/');                                                                                  // 504\n  var currentDir = '/';                                                                                           // 505\n                                                                                                                  // 506\n  for (var i = 0; i < dirParts.length; i++) {                                                                     // 507\n    if (!dirParts[i]) {                                                                                           // 508\n      continue;                                                                                                   // 509\n    }                                                                                                             // 510\n                                                                                                                  // 511\n    currentDir += dirParts[i] + '/';                                                                              // 512\n                                                                                                                  // 513\n    if (!fs.existsSync(currentDir)) {                                                                             // 514\n      fs.mkdirSync(currentDir);                                                                                   // 515\n      console.log('Created directory: ' + currentDir);                                                            // 516\n    }                                                                                                             // 517\n  }                                                                                                               // 518\n}                                                                                                                 // 519\n                                                                                                                  // 520\nvar getSafeName = function(directory, fileName) {                                                                 // 521\n\tvar n = fileName;                                                                                                // 522\n\t// Prevent directory traversal and creating hidden system files:                                                 // 523\n\tn = path.basename(n).replace(/^\\.+/, '');                                                                        // 524\n\t// Prevent overwriting existing files:                                                                           // 525\n\tif (!options.overwrite) {                                                                                        // 526\n  \twhile (_existsSync(directory + '/' + n)) {                                                                     // 527\n  \t\tn = n.replace(nameCountRegexp, nameCountFunc);                                                                // 528\n  \t}                                                                                                              // 529\n  }                                                                                                               // 530\n\treturn n;                                                                                                        // 531\n}                                                                                                                 // 532\n                                                                                                                  // 533\n// declare routes                                                                                                 // 534\n                                                                                                                  // 535\nRoutePolicy.declare(options.uploadUrl, 'network');                                                                // 536\nWebApp.connectHandlers.use(options.uploadUrl, UploadServer.serve);                                                // 537\n                                                                                                                  // 538\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/tomi_upload-server/router.js                                                                          //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\n//Router.route('/upload', function () {                                                                           // 1\n//  var req = this.request;                                                                                       // 2\n//  var res = this.response;                                                                                      // 3\n//                                                                                                                // 4\n//  console.log('doing something');                                                                               // 5\n//                                                                                                                // 6\n//  UploadServer.serve(req, res);                                                                                 // 7\n//}, { where: 'server' });                                                                                        // 8\n                                                                                                                  // 9\n                                                                                                                  // 10\n//Router.map(function () {                                                                                        // 11\n//  this.route('upload', {                                                                                        // 12\n//    path: '/upload/(.*)',                                                                                       // 13\n//    where: 'server',                                                                                            // 14\n//    action: function() {                                                                                        // 15\n//      UploadServer.serve(this.request, this.response);                                                          // 16\n//    }                                                                                                           // 17\n//  });                                                                                                           // 18\n//});                                                                                                             // 19\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['tomi:upload-server'] = {\n  UploadServer: UploadServer\n};\n\n})();\n","servePath":"/packages/tomi_upload-server.js","sourceMap":{"version":3,"sources":["/packages/tomi_upload-server/upload_server.js","/packages/tomi_upload-server/router.js"],"names":[],"mappingswH;;;;;;;;;;;;;;;;;;ACzhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uH","file":"/packages/tomi_upload-server.js","sourcesContent":["var formidable = Npm.require('formidable');\nvar http = Npm.require('http');\nvar sys = Npm.require('sys');\n\n//var connect = Npm.require('connect');\nvar url = Npm.require('url');\nvar path = Npm.require('path');\nvar fs = Npm.require('fs');\nvar Fiber = Npm.require('fibers');\n\nvar _existsSync = fs.existsSync || path.existsSync;\nvar imageMagick = Npm.require('imagemagick');\n\nvar options = {\n  /** @type String*/\n  tmpDir: null,\n  /** @type String*/\n  uploadDir: null,\n  uploadUrl: '/upload/',\n  checkCreateDirectories: false,\n  maxPostSize: 11000000000, // 11 GB\n  minFileSize: 1,\n  maxFileSize: 10000000000, // 10 GB\n  acceptFileTypes: /.+/i,\n  // Files not matched by this regular expression force a download dialog,\n  // to prevent executing any scripts in the context of the service domain:\n  inlineFileTypes: /\\.(gif|jpe?g|png)$/i,\n  imageTypes: /\\.(gif|jpe?g|png)$/i,\n  imageVersions: {\n    thumbnail: {\n      width: 200,\n      height: 200,\n    },\n  },\n  overwrite: false,\n  cacheTime: 86400,\n  getDirectory: function (fileInfo, formData) {\n    return \"\"\n  },\n  getFileName: function (fileInfo, formData) {\n    return fileInfo.name;\n  },\n  finished: function () {\n  },\n  validateRequest: function () {\n    return null;\n  },\n  validateFile: function () {\n    return null;\n  },\n  accessControl: {\n    allowOrigin: '*',\n    allowMethods: 'OPTIONS, HEAD, GET, POST, PUT, DELETE',\n    allowHeaders: 'Content-Type, Content-Range, Content-Disposition'\n  },\n  mimeTypes: {\n    \"html\": \"text/html\",\n    \"jpeg\": \"image/jpeg\",\n    \"jpg\": \"image/jpeg\",\n    \"png\": \"image/png\",\n    \"gif\": \"image/gif\",\n    \"js\": \"text/javascript\",\n    \"css\": \"text/css\",\n    \"pdf\": \"application/pdf\",\n    \"doc\": \"application/msword\",\n    \"docx\": \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n    \"zip\": \"application/zip, application/x-compressed-zip\",\n    \"txt\": \"text/plain\"\n  }\n  /* Uncomment and edit this section to provide the service via HTTPS:\n   ssl: {\n   key: fs.readFileSync('/Applications/XAMPP/etc/ssl.key/server.key'),\n   cert: fs.readFileSync('/Applications/XAMPP/etc/ssl.crt/server.crt')\n   },\n   */\n};\n\n\nUploadServer = {\n  getOptions: function()\n  {\n    return options;\n  },\n  init: function (opts) {\n    if (opts.checkCreateDirectories != null) options.checkCreateDirectories = opts.checkCreateDirectories;\n\n    if (opts.tmpDir == null) {\n      throw new Meteor.Error('Temporary directory needs to be assigned!');\n    } else {\n      options.tmpDir = opts.tmpDir;\n    }\n\n    if (opts.cacheTime != null) {\n      options.cacheTime = opts.cacheTime;\n    }\n\n    if (opts.mimeTypes != null) {\n      for (var key in opts.mimeTypes) {\n        options.mimeTypes[key] = opts.mimeTypes[key];\n      }\n    }\n\n    if (opts.checkCreateDirectories) {\n      checkCreateDirectory(options.tmpDir);\n    }\n\n    if (opts.uploadDir == null) {\n      throw new Meteor.Error('Upload directory needs to be assigned!');\n    } else {\n      options.uploadDir = opts.uploadDir;\n    }\n\n    if (options.checkCreateDirectories) {\n      checkCreateDirectory(options.uploadDir);\n    }\n\n    if (opts.maxPostSize != null) options.maxPostSize = opts.maxPostSize;\n    if (opts.minFileSize != null) options.minFileSize = opts.minFileSize;\n    if (opts.maxFileSize != null) options.maxFileSize = opts.maxFileSize;\n    if (opts.acceptFileTypes != null) options.acceptFileTypes = opts.acceptFileTypes;\n    if (opts.imageTypes != null) options.imageTypes = opts.imageTypes;\n    if (opts.validateRequest != null) options.validateRequest = opts.validateRequest;\n    if (opts.validateFile != null) options.validateFile = opts.validateFile;\n    if (opts.getDirectory != null) options.getDirectory = opts.getDirectory;\n    if (opts.getFileName != null) options.getFileName = opts.getFileName;\n    if (opts.finished != null) options.finished = opts.finished;\n    if (opts.overwrite != null) options.overwrite = opts.overwrite;\n\n    if (opts.uploadUrl) options.uploadUrl = opts.uploadUrl;\n\n    if (opts.imageVersions != null) options.imageVersions = opts.imageVersions\n    else options.imageVersions = [];\n  },\n  delete: function (filePath) {\n\n    // make sure paths are correct\n    fs.unlinkSync(path.join(options.uploadDir, filePath));\n  },\n  serve: function (req, res) {\n    if (options.tmpDir == null || options.uploadDir == null) {\n      throw new Meteor.Error('Upload component not initialised!');\n    }\n\n    res.setHeader(\n      'Access-Control-Allow-Origin',\n      options.accessControl.allowOrigin\n    );\n    res.setHeader(\n      'Access-Control-Allow-Methods',\n      options.accessControl.allowMethods\n    );\n    res.setHeader(\n      'Access-Control-Allow-Headers',\n      options.accessControl.allowHeaders\n    );\n    var handleResult = function (result, redirect) {\n        if (redirect) {\n          res.writeHead(302, {\n            'Location': redirect.replace(\n              /%s/,\n              encodeURIComponent(JSON.stringify(result))\n            )\n          });\n          res.end();\n        } else if (result.error) {\n          res.writeHead(403, {'Content-Type': 'text/plain'});\n          res.write(result.error);\n          res.end();\n        } else {\n          //res.writeHead(200, {\n          //  'Content-Type': req.headers.accept\n          //    .indexOf('application/json') !== -1 ?\n          //    'application/json' : 'text/plain'\n          //});\n          res.end(JSON.stringify(result));\n        }\n      },\n      setNoCacheHeaders = function () {\n        if (options.cacheTime) {\n          res.setHeader('Cache-Control', 'public, max-age=' + options.cacheTime);\n        } else {\n          res.setHeader('Pragma', 'no-cache');\n          res.setHeader('Cache-Control', 'no-store, no-cache, must-revalidate');\n          // res.setHeader('Content-Disposition', 'inline; filename=\"files.json\"');\n        }\n      },\n      handler = new UploadHandler(req, res, handleResult);\n\n\n    // validate the request\n    var error = options.validateRequest(req, res);\n    if (error) {\n      res.writeHead(403, {'Content-Type': 'text/plain'});\n      res.write(error);\n      res.end();\n      return;\n    }\n\n    switch (req.method) {\n      case 'OPTIONS':\n        res.end();\n        break;\n      case 'HEAD':\n      case 'GET':\n        setNoCacheHeaders();\n\n        var uri = url.parse(req.url).pathname;\n        var filename = path.join(options.uploadDir, unescape(uri));\n        var stats;\n\n        try {\n          stats = fs.lstatSync(filename); // throws if path doesn't exist\n        } catch (e) {\n          res.writeHead(404, {'Content-Type': 'text/plain'});\n          res.write('404 Not Found\\n');\n          res.end();\n          return;\n        }\n\n        if (stats.isFile()) {\n          // path exists, is a file\n          var mimeType = options.mimeTypes[path.extname(filename).split(\".\").reverse()[0]];\n          if (!mimeType) {\n            mimeType = \"application/octet-stream\";\n          }\n          res.writeHead(200, {'Content-Type': mimeType});\n\n          //connect.static(options.uploadDir)(req, res);\n          var fileStream = fs.createReadStream(filename);\n          fileStream.pipe(res);\n\n        } else if (stats.isDirectory()) {\n          // path exists, is a directory\n          res.writeHead(403, {'Content-Type': 'text/plain'});\n          res.write('Access denied');\n          res.end();\n        } else {\n          res.writeHead(500, {'Content-Type': 'text/plain'});\n          res.write('500 Internal server error\\n');\n          res.end();\n        }\n        break;\n      case 'POST':\n        // validate post\n        setNoCacheHeaders();\n        handler.post();\n        break;\n      //case 'DELETE':\n      //  handler.destroy();\n      //  break;\n      default:\n        res.statusCode = 405;\n        res.end();\n    }\n  }\n}\n\nvar utf8encode = function (str) {\n  return unescape(encodeURIComponent(str));\n};\n\nvar nameCountRegexp = /(?:(?: \\(([\\d]+)\\))?(\\.[^.]+))?$/;\n\nvar nameCountFunc = function (s, index, ext) {\n  return ' (' + ((parseInt(index, 10) || 0) + 1) + ')' + (ext || '');\n};\n\n/**\n * @class FileInfo Manages paths for uploaded objects\n */\nvar FileInfo = function (file, req, form) {\n  this.name = file.name;\n  this.path = file.name;\n  this.size = file.size;\n  this.type = file.type;\n\n  this.subDirectory = options.getDirectory(this, form.formFields);\n  this.baseUrl = (options.ssl ? 'https:' : 'http:') + '//' + req.headers.host + options.uploadUrl;\n  this.url = this.baseUrl + (this.subDirectory ? (this.subDirectory + '/') : '') + encodeURIComponent(this.name);\n};\n\nFileInfo.prototype.validate = function () {\n  this.error = null;\n  if (options.minFileSize && options.minFileSize > this.size) {\n    this.error = 'File is too small';\n  } else if (options.maxFileSize && options.maxFileSize < this.size) {\n    this.error = 'File is too big';\n  } else if (!options.acceptFileTypes.test(this.name)) {\n    this.error = 'Filetype not allowed';\n  }\n  return this.error;\n};\n\n// FileInfo.prototype.safeName = function () {\n//   // Prevent directory traversal and creating hidden system files:\n//   this.name = path.basename(this.name).replace(/^\\.+/, '');\n//   // Prevent overwriting existing files:\n//   while (_existsSync(options.uploadDir + '/' + this.name)) {\n//     this.name = this.name.replace(nameCountRegexp, nameCountFunc);\n//   }\n// };\n\nFileInfo.prototype.initUrls = function (req, form) {\n  if (!this.error) {\n    // image\n    var that = this;\n    Object.keys(options.imageVersions).forEach(function (version) {\n      if (_existsSync(\n          options.uploadDir + '/' + version + '/' + that.name\n        )) {\n        that[version + 'Url'] = that.baseUrl + version + '/' +\n        encodeURIComponent(that.name);\n      }\n    });\n  }\n};\n\nvar UploadHandler = function (req, res, callback) {\n  this.req = req;\n  this.res = res;\n  this.callback = callback;\n};\n\nUploadHandler.prototype.post = function () {\n  var handler = this,\n    form = new formidable.IncomingForm(),\n    tmpFiles = [],\n    files = [],\n    map = {},\n    counter = 1,\n    redirect,\n    finish = function () {\n      counter -= 1;\n      if (!counter) {\n        files.forEach(function (fileInfo) {\n          fileInfo.initUrls(handler.req, form);\n        });\n        handler.callback({files: files}, redirect);\n      }\n    };\n  form.uploadDir = options.tmpDir;\n  form.on('fileBegin', function (name, file) {\n    tmpFiles.push(file.path);\n    var fileInfo = new FileInfo(file, handler.req, form);\n\n    //fileInfo.safeName();\n\n    // validate post\n    var error = options.validateFile(file);\n    if (error) {\n      res.writeHead(403, {'Content-Type': 'text/plain'});\n      res.write(error);\n      res.end();\n      return;\n    }\n\n    map[path.basename(file.path)] = fileInfo;\n    files.push(fileInfo);\n  }).on('field', function (name, value) {\n    if (name === 'redirect') {\n      redirect = value;\n    }\n    // remember all the form fields\n    if (this.formFields == null) {\n      this.formFields = {};\n    }\n    //  console.log('Form field: ' + name + \"-\" + value);\n    this.formFields[name] = value;\n  }).on('file', function (name, file) {\n    var fileInfo = map[path.basename(file.path)];\n    fileInfo.size = file.size;\n\n    var error = fileInfo.validate();\n    if (error) {\n      // delete file\n      fs.unlinkSync(file.path);\n      // callback with error\n      handler.callback({error: error});\n      return;\n    }\n\n    // we can store files in subdirectories\n    var folder = options.getDirectory(fileInfo, this.formFields);\n\n    // make safe directory, disable all '.'\n    folder.replace(/\\./g, '');\n\n    // check if directory exists, if not, create all the directories\n    var subFolders = folder.split('/');\n    var currentFolder = options.uploadDir;\n    for (var i = 0; i < subFolders.length; i++) {\n      currentFolder += '/' + subFolders[i];\n\n      if (!fs.existsSync(currentFolder)) {\n        fs.mkdirSync(currentFolder);\n      }\n    }\n\n    // possibly rename file if needed;\n    var newFileName = options.getFileName(fileInfo, this.formFields);\n\n    // make safe file name\n    newFileName = getSafeName(currentFolder, newFileName);\n\n    // set the file name\n    fileInfo.name = newFileName;\n    fileInfo.path = folder + \"/\" + newFileName;\n\n    // Move the file to the final destination\n    var destinationFile = currentFolder + \"/\" + newFileName;\n    try\n    {\n     \t// Try moving through renameSync\n       \tfs.renameSync(file.path, destinationFile)\n    }\n    catch(exception)\n    {\n    \t// if moving failed, try a copy + delete instead, this to support moving work between partitions\n    \tvar is = fs.createReadStream(file.path);\n\t\tvar os = fs.createWriteStream(destinationFile);\n\t\tis.pipe(os);\n\t\tis.on('end',function() {\n    \t\tfs.unlinkSync(file.path);\n\t\t});\n    }\n\n    if (options.imageTypes.test(fileInfo.name)) {\n      Object.keys(options.imageVersions).forEach(function (version) {\n        counter += 1;\n        var opts = options.imageVersions[version];\n\n        // check if version directory exists\n        if (!fs.existsSync(currentFolder + '/' + version)) {\n          fs.mkdirSync(currentFolder + '/' + version);\n        }\n\n        var ioptions = {\n          srcPath: currentFolder + '/' + newFileName,\n          dstPath: currentFolder + '/' + version + '/' + newFileName\n        };\n\n        if (opts.width) {\n          ioptions.width = opts.width;\n        }\n\n        if (opts.height) {\n          ioptions.height = opts.height;\n        }\n\n        imageMagick.resize(ioptions, finish);\n      });\n    }\n\n    // call the feedback within its own fiber\n    var formFields = this.formFields;\n    Fiber(function () {\n      options.finished(fileInfo, formFields);\n    }).run();\n\n  }).on('aborted', function () {\n    tmpFiles.forEach(function (file) {\n      fs.unlink(file);\n    });\n  }).on('error', function (e) {\n    console.log('ERROR');\n    console.log(e);\n  }).on('progress', function (bytesReceived, bytesExpected) {\n    if (bytesReceived > options.maxPostSize) {\n      handler.req.connection.destroy();\n    }\n  }).on('end', finish).parse(handler.req);\n};\n\nUploadHandler.prototype.destroy = function () {\n  var handler = this,\n    fileName;\n  if (handler.req.url.slice(0, options.uploadUrl.length) === options.uploadUrl) {\n    fileName = path.basename(decodeURIComponent(handler.req.url));\n    if (fileName[0] !== '.') {\n      fs.unlink(options.uploadDir + '/' + fileName, function (ex) {\n        Object.keys(options.imageVersions).forEach(function (version) {\n          fs.unlink(options.uploadDir + '/' + version + '/' + fileName);\n        });\n        handler.callback({success: !ex});\n      });\n      return;\n    }\n  }\n  handler.callback({success: false});\n};\n\n// create directories\n\nvar checkCreateDirectory = function (dir) {\n  if (!dir) {\n    return;\n  }\n\n  // If we're on Windows we'll remove the drive letter\n  if(/^win/.test(process.platform)) {\n  \tdir = dir.replace(/([A-Z]:[\\\\\\/]).*?/gi, '')\n  }\n\n  var dirParts = dir.split('/');\n  var currentDir = '/';\n\n  for (var i = 0; i < dirParts.length; i++) {\n    if (!dirParts[i]) {\n      continue;\n    }\n\n    currentDir += dirParts[i] + '/';\n\n    if (!fs.existsSync(currentDir)) {\n      fs.mkdirSync(currentDir);\n      console.log('Created directory: ' + currentDir);\n    }\n  }\n}\n\nvar getSafeName = function(directory, fileName) {\n\tvar n = fileName;\n\t// Prevent directory traversal and creating hidden system files:\n\tn = path.basename(n).replace(/^\\.+/, '');\n\t// Prevent overwriting existing files:\n\tif (!options.overwrite) {\n  \twhile (_existsSync(directory + '/' + n)) {\n  \t\tn = n.replace(nameCountRegexp, nameCountFunc);\n  \t}\n  }\n\treturn n;\n}\n\n// declare routes\n\nRoutePolicy.declare(options.uploadUrl, 'network');\nWebApp.connectHandlers.use(options.uploadUrl, UploadServer.serve);\n","//Router.route('/upload', function () {\n//  var req = this.request;\n//  var res = this.response;\n//\n//  console.log('doing something');\n//\n//  UploadServer.serve(req, res);\n//}, { where: 'server' });\n\n\n//Router.map(function () {\n//  this.route('upload', {\n//    path: '/upload/(.*)',\n//    where: 'server',\n//    action: function() {\n//      UploadServer.serve(this.request, this.response);\n//    }\n//  });\n//});"]}}]