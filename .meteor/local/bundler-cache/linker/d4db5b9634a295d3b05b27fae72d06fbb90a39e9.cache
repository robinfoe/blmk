[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\nvar Template = Package.templating.Template;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar Spacebars = Package.spacebars.Spacebars;\nvar HTML = Package.htmljs.HTML;\n\n/* Package-scope variables */\nvar Uploader, bytesToSize;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/tomi_upload-jquery/lib/vendor/jquery.ui.widget.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*! jQuery UI - v1.11.1 - 2014-09-17                                                                                   // 1\n* http://jqueryui.com                                                                                                  // 2\n* Includes: widget.js                                                                                                  // 3\n* Copyright 2014 jQuery Foundation and other contributors; Licensed MIT */                                             // 4\n                                                                                                                       // 5\n(function( factory ) {                                                                                                 // 6\n\tif ( typeof define === \"function\" && define.amd ) {                                                                   // 7\n                                                                                                                       // 8\n\t\t// AMD. Register as an anonymous module.                                                                             // 9\n\t\tdefine([ \"jquery\" ], factory );                                                                                      // 10\n\t} else {                                                                                                              // 11\n                                                                                                                       // 12\n\t\t// Browser globals                                                                                                   // 13\n\t\tfactory( jQuery );                                                                                                   // 14\n\t}                                                                                                                     // 15\n}(function( $ ) {                                                                                                      // 16\n/*!                                                                                                                    // 17\n * jQuery UI Widget 1.11.1                                                                                             // 18\n * http://jqueryui.com                                                                                                 // 19\n *                                                                                                                     // 20\n * Copyright 2014 jQuery Foundation and other contributors                                                             // 21\n * Released under the MIT license.                                                                                     // 22\n * http://jquery.org/license                                                                                           // 23\n *                                                                                                                     // 24\n * http://api.jqueryui.com/jQuery.widget/                                                                              // 25\n */                                                                                                                    // 26\n                                                                                                                       // 27\n                                                                                                                       // 28\nvar widget_uuid = 0,                                                                                                   // 29\n\twidget_slice = Array.prototype.slice;                                                                                 // 30\n                                                                                                                       // 31\n$.cleanData = (function( orig ) {                                                                                      // 32\n\treturn function( elems ) {                                                                                            // 33\n\t\tvar events, elem, i;                                                                                                 // 34\n\t\tfor ( i = 0; (elem = elems[i]) != null; i++ ) {                                                                      // 35\n\t\t\ttry {                                                                                                               // 36\n                                                                                                                       // 37\n\t\t\t\t// Only trigger remove when necessary to save time                                                                 // 38\n\t\t\t\tevents = $._data( elem, \"events\" );                                                                                // 39\n\t\t\t\tif ( events && events.remove ) {                                                                                   // 40\n\t\t\t\t\t$( elem ).triggerHandler( \"remove\" );                                                                             // 41\n\t\t\t\t}                                                                                                                  // 42\n                                                                                                                       // 43\n\t\t\t// http://bugs.jquery.com/ticket/8235                                                                               // 44\n\t\t\t} catch( e ) {}                                                                                                     // 45\n\t\t}                                                                                                                    // 46\n\t\torig( elems );                                                                                                       // 47\n\t};                                                                                                                    // 48\n})( $.cleanData );                                                                                                     // 49\n                                                                                                                       // 50\n$.widget = function( name, base, prototype ) {                                                                         // 51\n\tvar fullName, existingConstructor, constructor, basePrototype,                                                        // 52\n\t\t// proxiedPrototype allows the provided prototype to remain unmodified                                               // 53\n\t\t// so that it can be used as a mixin for multiple widgets (#8876)                                                    // 54\n\t\tproxiedPrototype = {},                                                                                               // 55\n\t\tnamespace = name.split( \".\" )[ 0 ];                                                                                  // 56\n                                                                                                                       // 57\n\tname = name.split( \".\" )[ 1 ];                                                                                        // 58\n\tfullName = namespace + \"-\" + name;                                                                                    // 59\n                                                                                                                       // 60\n\tif ( !prototype ) {                                                                                                   // 61\n\t\tprototype = base;                                                                                                    // 62\n\t\tbase = $.Widget;                                                                                                     // 63\n\t}                                                                                                                     // 64\n                                                                                                                       // 65\n\t// create selector for plugin                                                                                         // 66\n\t$.expr[ \":\" ][ fullName.toLowerCase() ] = function( elem ) {                                                          // 67\n\t\treturn !!$.data( elem, fullName );                                                                                   // 68\n\t};                                                                                                                    // 69\n                                                                                                                       // 70\n\t$[ namespace ] = $[ namespace ] || {};                                                                                // 71\n\texistingConstructor = $[ namespace ][ name ];                                                                         // 72\n\tconstructor = $[ namespace ][ name ] = function( options, element ) {                                                 // 73\n\t\t// allow instantiation without \"new\" keyword                                                                         // 74\n\t\tif ( !this._createWidget ) {                                                                                         // 75\n\t\t\treturn new constructor( options, element );                                                                         // 76\n\t\t}                                                                                                                    // 77\n                                                                                                                       // 78\n\t\t// allow instantiation without initializing for simple inheritance                                                   // 79\n\t\t// must use \"new\" keyword (the code above always passes args)                                                        // 80\n\t\tif ( arguments.length ) {                                                                                            // 81\n\t\t\tthis._createWidget( options, element );                                                                             // 82\n\t\t}                                                                                                                    // 83\n\t};                                                                                                                    // 84\n\t// extend with the existing constructor to carry over any static properties                                           // 85\n\t$.extend( constructor, existingConstructor, {                                                                         // 86\n\t\tversion: prototype.version,                                                                                          // 87\n\t\t// copy the object used to create the prototype in case we need to                                                   // 88\n\t\t// redefine the widget later                                                                                         // 89\n\t\t_proto: $.extend( {}, prototype ),                                                                                   // 90\n\t\t// track widgets that inherit from this widget in case this widget is                                                // 91\n\t\t// redefined after a widget inherits from it                                                                         // 92\n\t\t_childConstructors: []                                                                                               // 93\n\t});                                                                                                                   // 94\n                                                                                                                       // 95\n\tbasePrototype = new base();                                                                                           // 96\n\t// we need to make the options hash a property directly on the new instance                                           // 97\n\t// otherwise we'll modify the options hash on the prototype that we're                                                // 98\n\t// inheriting from                                                                                                    // 99\n\tbasePrototype.options = $.widget.extend( {}, basePrototype.options );                                                 // 100\n\t$.each( prototype, function( prop, value ) {                                                                          // 101\n\t\tif ( !$.isFunction( value ) ) {                                                                                      // 102\n\t\t\tproxiedPrototype[ prop ] = value;                                                                                   // 103\n\t\t\treturn;                                                                                                             // 104\n\t\t}                                                                                                                    // 105\n\t\tproxiedPrototype[ prop ] = (function() {                                                                             // 106\n\t\t\tvar _super = function() {                                                                                           // 107\n\t\t\t\t\treturn base.prototype[ prop ].apply( this, arguments );                                                           // 108\n\t\t\t\t},                                                                                                                 // 109\n\t\t\t\t_superApply = function( args ) {                                                                                   // 110\n\t\t\t\t\treturn base.prototype[ prop ].apply( this, args );                                                                // 111\n\t\t\t\t};                                                                                                                 // 112\n\t\t\treturn function() {                                                                                                 // 113\n\t\t\t\tvar __super = this._super,                                                                                         // 114\n\t\t\t\t\t__superApply = this._superApply,                                                                                  // 115\n\t\t\t\t\treturnValue;                                                                                                      // 116\n                                                                                                                       // 117\n\t\t\t\tthis._super = _super;                                                                                              // 118\n\t\t\t\tthis._superApply = _superApply;                                                                                    // 119\n                                                                                                                       // 120\n\t\t\t\treturnValue = value.apply( this, arguments );                                                                      // 121\n                                                                                                                       // 122\n\t\t\t\tthis._super = __super;                                                                                             // 123\n\t\t\t\tthis._superApply = __superApply;                                                                                   // 124\n                                                                                                                       // 125\n\t\t\t\treturn returnValue;                                                                                                // 126\n\t\t\t};                                                                                                                  // 127\n\t\t})();                                                                                                                // 128\n\t});                                                                                                                   // 129\n\tconstructor.prototype = $.widget.extend( basePrototype, {                                                             // 130\n\t\t// TODO: remove support for widgetEventPrefix                                                                        // 131\n\t\t// always use the name + a colon as the prefix, e.g., draggable:start                                                // 132\n\t\t// don't prefix for widgets that aren't DOM-based                                                                    // 133\n\t\twidgetEventPrefix: existingConstructor ? (basePrototype.widgetEventPrefix || name) : name                            // 134\n\t}, proxiedPrototype, {                                                                                                // 135\n\t\tconstructor: constructor,                                                                                            // 136\n\t\tnamespace: namespace,                                                                                                // 137\n\t\twidgetName: name,                                                                                                    // 138\n\t\twidgetFullName: fullName                                                                                             // 139\n\t});                                                                                                                   // 140\n                                                                                                                       // 141\n\t// If this widget is being redefined then we need to find all widgets that                                            // 142\n\t// are inheriting from it and redefine all of them so that they inherit from                                          // 143\n\t// the new version of this widget. We're essentially trying to replace one                                            // 144\n\t// level in the prototype chain.                                                                                      // 145\n\tif ( existingConstructor ) {                                                                                          // 146\n\t\t$.each( existingConstructor._childConstructors, function( i, child ) {                                               // 147\n\t\t\tvar childPrototype = child.prototype;                                                                               // 148\n                                                                                                                       // 149\n\t\t\t// redefine the child widget using the same prototype that was                                                      // 150\n\t\t\t// originally used, but inherit from the new version of the base                                                    // 151\n\t\t\t$.widget( childPrototype.namespace + \".\" + childPrototype.widgetName, constructor, child._proto );                  // 152\n\t\t});                                                                                                                  // 153\n\t\t// remove the list of existing child constructors from the old constructor                                           // 154\n\t\t// so the old child constructors can be garbage collected                                                            // 155\n\t\tdelete existingConstructor._childConstructors;                                                                       // 156\n\t} else {                                                                                                              // 157\n\t\tbase._childConstructors.push( constructor );                                                                         // 158\n\t}                                                                                                                     // 159\n                                                                                                                       // 160\n\t$.widget.bridge( name, constructor );                                                                                 // 161\n                                                                                                                       // 162\n\treturn constructor;                                                                                                   // 163\n};                                                                                                                     // 164\n                                                                                                                       // 165\n$.widget.extend = function( target ) {                                                                                 // 166\n\tvar input = widget_slice.call( arguments, 1 ),                                                                        // 167\n\t\tinputIndex = 0,                                                                                                      // 168\n\t\tinputLength = input.length,                                                                                          // 169\n\t\tkey,                                                                                                                 // 170\n\t\tvalue;                                                                                                               // 171\n\tfor ( ; inputIndex < inputLength; inputIndex++ ) {                                                                    // 172\n\t\tfor ( key in input[ inputIndex ] ) {                                                                                 // 173\n\t\t\tvalue = input[ inputIndex ][ key ];                                                                                 // 174\n\t\t\tif ( input[ inputIndex ].hasOwnProperty( key ) && value !== undefined ) {                                           // 175\n\t\t\t\t// Clone objects                                                                                                   // 176\n\t\t\t\tif ( $.isPlainObject( value ) ) {                                                                                  // 177\n\t\t\t\t\ttarget[ key ] = $.isPlainObject( target[ key ] ) ?                                                                // 178\n\t\t\t\t\t\t$.widget.extend( {}, target[ key ], value ) :                                                                    // 179\n\t\t\t\t\t\t// Don't extend strings, arrays, etc. with objects                                                               // 180\n\t\t\t\t\t\t$.widget.extend( {}, value );                                                                                    // 181\n\t\t\t\t// Copy everything else by reference                                                                               // 182\n\t\t\t\t} else {                                                                                                           // 183\n\t\t\t\t\ttarget[ key ] = value;                                                                                            // 184\n\t\t\t\t}                                                                                                                  // 185\n\t\t\t}                                                                                                                   // 186\n\t\t}                                                                                                                    // 187\n\t}                                                                                                                     // 188\n\treturn target;                                                                                                        // 189\n};                                                                                                                     // 190\n                                                                                                                       // 191\n$.widget.bridge = function( name, object ) {                                                                           // 192\n\tvar fullName = object.prototype.widgetFullName || name;                                                               // 193\n\t$.fn[ name ] = function( options ) {                                                                                  // 194\n\t\tvar isMethodCall = typeof options === \"string\",                                                                      // 195\n\t\t\targs = widget_slice.call( arguments, 1 ),                                                                           // 196\n\t\t\treturnValue = this;                                                                                                 // 197\n                                                                                                                       // 198\n\t\t// allow multiple hashes to be passed on init                                                                        // 199\n\t\toptions = !isMethodCall && args.length ?                                                                             // 200\n\t\t\t$.widget.extend.apply( null, [ options ].concat(args) ) :                                                           // 201\n\t\t\toptions;                                                                                                            // 202\n                                                                                                                       // 203\n\t\tif ( isMethodCall ) {                                                                                                // 204\n\t\t\tthis.each(function() {                                                                                              // 205\n\t\t\t\tvar methodValue,                                                                                                   // 206\n\t\t\t\t\tinstance = $.data( this, fullName );                                                                              // 207\n\t\t\t\tif ( options === \"instance\" ) {                                                                                    // 208\n\t\t\t\t\treturnValue = instance;                                                                                           // 209\n\t\t\t\t\treturn false;                                                                                                     // 210\n\t\t\t\t}                                                                                                                  // 211\n\t\t\t\tif ( !instance ) {                                                                                                 // 212\n\t\t\t\t\treturn $.error( \"cannot call methods on \" + name + \" prior to initialization; \" +                                 // 213\n\t\t\t\t\t\t\"attempted to call method '\" + options + \"'\" );                                                                  // 214\n\t\t\t\t}                                                                                                                  // 215\n\t\t\t\tif ( !$.isFunction( instance[options] ) || options.charAt( 0 ) === \"_\" ) {                                         // 216\n\t\t\t\t\treturn $.error( \"no such method '\" + options + \"' for \" + name + \" widget instance\" );                            // 217\n\t\t\t\t}                                                                                                                  // 218\n\t\t\t\tmethodValue = instance[ options ].apply( instance, args );                                                         // 219\n\t\t\t\tif ( methodValue !== instance && methodValue !== undefined ) {                                                     // 220\n\t\t\t\t\treturnValue = methodValue && methodValue.jquery ?                                                                 // 221\n\t\t\t\t\t\treturnValue.pushStack( methodValue.get() ) :                                                                     // 222\n\t\t\t\t\t\tmethodValue;                                                                                                     // 223\n\t\t\t\t\treturn false;                                                                                                     // 224\n\t\t\t\t}                                                                                                                  // 225\n\t\t\t});                                                                                                                 // 226\n\t\t} else {                                                                                                             // 227\n\t\t\tthis.each(function() {                                                                                              // 228\n\t\t\t\tvar instance = $.data( this, fullName );                                                                           // 229\n\t\t\t\tif ( instance ) {                                                                                                  // 230\n\t\t\t\t\tinstance.option( options || {} );                                                                                 // 231\n\t\t\t\t\tif ( instance._init ) {                                                                                           // 232\n\t\t\t\t\t\tinstance._init();                                                                                                // 233\n\t\t\t\t\t}                                                                                                                 // 234\n\t\t\t\t} else {                                                                                                           // 235\n\t\t\t\t\t$.data( this, fullName, new object( options, this ) );                                                            // 236\n\t\t\t\t}                                                                                                                  // 237\n\t\t\t});                                                                                                                 // 238\n\t\t}                                                                                                                    // 239\n                                                                                                                       // 240\n\t\treturn returnValue;                                                                                                  // 241\n\t};                                                                                                                    // 242\n};                                                                                                                     // 243\n                                                                                                                       // 244\n$.Widget = function( /* options, element */ ) {};                                                                      // 245\n$.Widget._childConstructors = [];                                                                                      // 246\n                                                                                                                       // 247\n$.Widget.prototype = {                                                                                                 // 248\n\twidgetName: \"widget\",                                                                                                 // 249\n\twidgetEventPrefix: \"\",                                                                                                // 250\n\tdefaultElement: \"<div>\",                                                                                              // 251\n\toptions: {                                                                                                            // 252\n\t\tdisabled: false,                                                                                                     // 253\n                                                                                                                       // 254\n\t\t// callbacks                                                                                                         // 255\n\t\tcreate: null                                                                                                         // 256\n\t},                                                                                                                    // 257\n\t_createWidget: function( options, element ) {                                                                         // 258\n\t\telement = $( element || this.defaultElement || this )[ 0 ];                                                          // 259\n\t\tthis.element = $( element );                                                                                         // 260\n\t\tthis.uuid = widget_uuid++;                                                                                           // 261\n\t\tthis.eventNamespace = \".\" + this.widgetName + this.uuid;                                                             // 262\n\t\tthis.options = $.widget.extend( {},                                                                                  // 263\n\t\t\tthis.options,                                                                                                       // 264\n\t\t\tthis._getCreateOptions(),                                                                                           // 265\n\t\t\toptions );                                                                                                          // 266\n                                                                                                                       // 267\n\t\tthis.bindings = $();                                                                                                 // 268\n\t\tthis.hoverable = $();                                                                                                // 269\n\t\tthis.focusable = $();                                                                                                // 270\n                                                                                                                       // 271\n\t\tif ( element !== this ) {                                                                                            // 272\n\t\t\t$.data( element, this.widgetFullName, this );                                                                       // 273\n\t\t\tthis._on( true, this.element, {                                                                                     // 274\n\t\t\t\tremove: function( event ) {                                                                                        // 275\n\t\t\t\t\tif ( event.target === element ) {                                                                                 // 276\n\t\t\t\t\t\tthis.destroy();                                                                                                  // 277\n\t\t\t\t\t}                                                                                                                 // 278\n\t\t\t\t}                                                                                                                  // 279\n\t\t\t});                                                                                                                 // 280\n\t\t\tthis.document = $( element.style ?                                                                                  // 281\n\t\t\t\t// element within the document                                                                                     // 282\n\t\t\t\telement.ownerDocument :                                                                                            // 283\n\t\t\t\t// element is window or document                                                                                   // 284\n\t\t\t\telement.document || element );                                                                                     // 285\n\t\t\tthis.window = $( this.document[0].defaultView || this.document[0].parentWindow );                                   // 286\n\t\t}                                                                                                                    // 287\n                                                                                                                       // 288\n\t\tthis._create();                                                                                                      // 289\n\t\tthis._trigger( \"create\", null, this._getCreateEventData() );                                                         // 290\n\t\tthis._init();                                                                                                        // 291\n\t},                                                                                                                    // 292\n\t_getCreateOptions: $.noop,                                                                                            // 293\n\t_getCreateEventData: $.noop,                                                                                          // 294\n\t_create: $.noop,                                                                                                      // 295\n\t_init: $.noop,                                                                                                        // 296\n                                                                                                                       // 297\n\tdestroy: function() {                                                                                                 // 298\n\t\tthis._destroy();                                                                                                     // 299\n\t\t// we can probably remove the unbind calls in 2.0                                                                    // 300\n\t\t// all event bindings should go through this._on()                                                                   // 301\n\t\tthis.element                                                                                                         // 302\n\t\t\t.unbind( this.eventNamespace )                                                                                      // 303\n\t\t\t.removeData( this.widgetFullName )                                                                                  // 304\n\t\t\t// support: jquery <1.6.3                                                                                           // 305\n\t\t\t// http://bugs.jquery.com/ticket/9413                                                                               // 306\n\t\t\t.removeData( $.camelCase( this.widgetFullName ) );                                                                  // 307\n\t\tthis.widget()                                                                                                        // 308\n\t\t\t.unbind( this.eventNamespace )                                                                                      // 309\n\t\t\t.removeAttr( \"aria-disabled\" )                                                                                      // 310\n\t\t\t.removeClass(                                                                                                       // 311\n\t\t\t\tthis.widgetFullName + \"-disabled \" +                                                                               // 312\n\t\t\t\t\"ui-state-disabled\" );                                                                                             // 313\n                                                                                                                       // 314\n\t\t// clean up events and states                                                                                        // 315\n\t\tthis.bindings.unbind( this.eventNamespace );                                                                         // 316\n\t\tthis.hoverable.removeClass( \"ui-state-hover\" );                                                                      // 317\n\t\tthis.focusable.removeClass( \"ui-state-focus\" );                                                                      // 318\n\t},                                                                                                                    // 319\n\t_destroy: $.noop,                                                                                                     // 320\n                                                                                                                       // 321\n\twidget: function() {                                                                                                  // 322\n\t\treturn this.element;                                                                                                 // 323\n\t},                                                                                                                    // 324\n                                                                                                                       // 325\n\toption: function( key, value ) {                                                                                      // 326\n\t\tvar options = key,                                                                                                   // 327\n\t\t\tparts,                                                                                                              // 328\n\t\t\tcurOption,                                                                                                          // 329\n\t\t\ti;                                                                                                                  // 330\n                                                                                                                       // 331\n\t\tif ( arguments.length === 0 ) {                                                                                      // 332\n\t\t\t// don't return a reference to the internal hash                                                                    // 333\n\t\t\treturn $.widget.extend( {}, this.options );                                                                         // 334\n\t\t}                                                                                                                    // 335\n                                                                                                                       // 336\n\t\tif ( typeof key === \"string\" ) {                                                                                     // 337\n\t\t\t// handle nested keys, e.g., \"foo.bar\" => { foo: { bar: ___ } }                                                     // 338\n\t\t\toptions = {};                                                                                                       // 339\n\t\t\tparts = key.split( \".\" );                                                                                           // 340\n\t\t\tkey = parts.shift();                                                                                                // 341\n\t\t\tif ( parts.length ) {                                                                                               // 342\n\t\t\t\tcurOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );                                           // 343\n\t\t\t\tfor ( i = 0; i < parts.length - 1; i++ ) {                                                                         // 344\n\t\t\t\t\tcurOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};                                                          // 345\n\t\t\t\t\tcurOption = curOption[ parts[ i ] ];                                                                              // 346\n\t\t\t\t}                                                                                                                  // 347\n\t\t\t\tkey = parts.pop();                                                                                                 // 348\n\t\t\t\tif ( arguments.length === 1 ) {                                                                                    // 349\n\t\t\t\t\treturn curOption[ key ] === undefined ? null : curOption[ key ];                                                  // 350\n\t\t\t\t}                                                                                                                  // 351\n\t\t\t\tcurOption[ key ] = value;                                                                                          // 352\n\t\t\t} else {                                                                                                            // 353\n\t\t\t\tif ( arguments.length === 1 ) {                                                                                    // 354\n\t\t\t\t\treturn this.options[ key ] === undefined ? null : this.options[ key ];                                            // 355\n\t\t\t\t}                                                                                                                  // 356\n\t\t\t\toptions[ key ] = value;                                                                                            // 357\n\t\t\t}                                                                                                                   // 358\n\t\t}                                                                                                                    // 359\n                                                                                                                       // 360\n\t\tthis._setOptions( options );                                                                                         // 361\n                                                                                                                       // 362\n\t\treturn this;                                                                                                         // 363\n\t},                                                                                                                    // 364\n\t_setOptions: function( options ) {                                                                                    // 365\n\t\tvar key;                                                                                                             // 366\n                                                                                                                       // 367\n\t\tfor ( key in options ) {                                                                                             // 368\n\t\t\tthis._setOption( key, options[ key ] );                                                                             // 369\n\t\t}                                                                                                                    // 370\n                                                                                                                       // 371\n\t\treturn this;                                                                                                         // 372\n\t},                                                                                                                    // 373\n\t_setOption: function( key, value ) {                                                                                  // 374\n\t\tthis.options[ key ] = value;                                                                                         // 375\n                                                                                                                       // 376\n\t\tif ( key === \"disabled\" ) {                                                                                          // 377\n\t\t\tthis.widget()                                                                                                       // 378\n\t\t\t\t.toggleClass( this.widgetFullName + \"-disabled\", !!value );                                                        // 379\n                                                                                                                       // 380\n\t\t\t// If the widget is becoming disabled, then nothing is interactive                                                  // 381\n\t\t\tif ( value ) {                                                                                                      // 382\n\t\t\t\tthis.hoverable.removeClass( \"ui-state-hover\" );                                                                    // 383\n\t\t\t\tthis.focusable.removeClass( \"ui-state-focus\" );                                                                    // 384\n\t\t\t}                                                                                                                   // 385\n\t\t}                                                                                                                    // 386\n                                                                                                                       // 387\n\t\treturn this;                                                                                                         // 388\n\t},                                                                                                                    // 389\n                                                                                                                       // 390\n\tenable: function() {                                                                                                  // 391\n\t\treturn this._setOptions({ disabled: false });                                                                        // 392\n\t},                                                                                                                    // 393\n\tdisable: function() {                                                                                                 // 394\n\t\treturn this._setOptions({ disabled: true });                                                                         // 395\n\t},                                                                                                                    // 396\n                                                                                                                       // 397\n\t_on: function( suppressDisabledCheck, element, handlers ) {                                                           // 398\n\t\tvar delegateElement,                                                                                                 // 399\n\t\t\tinstance = this;                                                                                                    // 400\n                                                                                                                       // 401\n\t\t// no suppressDisabledCheck flag, shuffle arguments                                                                  // 402\n\t\tif ( typeof suppressDisabledCheck !== \"boolean\" ) {                                                                  // 403\n\t\t\thandlers = element;                                                                                                 // 404\n\t\t\telement = suppressDisabledCheck;                                                                                    // 405\n\t\t\tsuppressDisabledCheck = false;                                                                                      // 406\n\t\t}                                                                                                                    // 407\n                                                                                                                       // 408\n\t\t// no element argument, shuffle and use this.element                                                                 // 409\n\t\tif ( !handlers ) {                                                                                                   // 410\n\t\t\thandlers = element;                                                                                                 // 411\n\t\t\telement = this.element;                                                                                             // 412\n\t\t\tdelegateElement = this.widget();                                                                                    // 413\n\t\t} else {                                                                                                             // 414\n\t\t\telement = delegateElement = $( element );                                                                           // 415\n\t\t\tthis.bindings = this.bindings.add( element );                                                                       // 416\n\t\t}                                                                                                                    // 417\n                                                                                                                       // 418\n\t\t$.each( handlers, function( event, handler ) {                                                                       // 419\n\t\t\tfunction handlerProxy() {                                                                                           // 420\n\t\t\t\t// allow widgets to customize the disabled handling                                                                // 421\n\t\t\t\t// - disabled as an array instead of boolean                                                                       // 422\n\t\t\t\t// - disabled class as method for disabling individual parts                                                       // 423\n\t\t\t\tif ( !suppressDisabledCheck &&                                                                                     // 424\n\t\t\t\t\t\t( instance.options.disabled === true ||                                                                          // 425\n\t\t\t\t\t\t\t$( this ).hasClass( \"ui-state-disabled\" ) ) ) {                                                                 // 426\n\t\t\t\t\treturn;                                                                                                           // 427\n\t\t\t\t}                                                                                                                  // 428\n\t\t\t\treturn ( typeof handler === \"string\" ? instance[ handler ] : handler )                                             // 429\n\t\t\t\t\t.apply( instance, arguments );                                                                                    // 430\n\t\t\t}                                                                                                                   // 431\n                                                                                                                       // 432\n\t\t\t// copy the guid so direct unbinding works                                                                          // 433\n\t\t\tif ( typeof handler !== \"string\" ) {                                                                                // 434\n\t\t\t\thandlerProxy.guid = handler.guid =                                                                                 // 435\n\t\t\t\t\thandler.guid || handlerProxy.guid || $.guid++;                                                                    // 436\n\t\t\t}                                                                                                                   // 437\n                                                                                                                       // 438\n\t\t\tvar match = event.match( /^([\\w:-]*)\\s*(.*)$/ ),                                                                    // 439\n\t\t\t\teventName = match[1] + instance.eventNamespace,                                                                    // 440\n\t\t\t\tselector = match[2];                                                                                               // 441\n\t\t\tif ( selector ) {                                                                                                   // 442\n\t\t\t\tdelegateElement.delegate( selector, eventName, handlerProxy );                                                     // 443\n\t\t\t} else {                                                                                                            // 444\n\t\t\t\telement.bind( eventName, handlerProxy );                                                                           // 445\n\t\t\t}                                                                                                                   // 446\n\t\t});                                                                                                                  // 447\n\t},                                                                                                                    // 448\n                                                                                                                       // 449\n\t_off: function( element, eventName ) {                                                                                // 450\n\t\teventName = (eventName || \"\").split( \" \" ).join( this.eventNamespace + \" \" ) + this.eventNamespace;                  // 451\n\t\telement.unbind( eventName ).undelegate( eventName );                                                                 // 452\n\t},                                                                                                                    // 453\n                                                                                                                       // 454\n\t_delay: function( handler, delay ) {                                                                                  // 455\n\t\tfunction handlerProxy() {                                                                                            // 456\n\t\t\treturn ( typeof handler === \"string\" ? instance[ handler ] : handler )                                              // 457\n\t\t\t\t.apply( instance, arguments );                                                                                     // 458\n\t\t}                                                                                                                    // 459\n\t\tvar instance = this;                                                                                                 // 460\n\t\treturn setTimeout( handlerProxy, delay || 0 );                                                                       // 461\n\t},                                                                                                                    // 462\n                                                                                                                       // 463\n\t_hoverable: function( element ) {                                                                                     // 464\n\t\tthis.hoverable = this.hoverable.add( element );                                                                      // 465\n\t\tthis._on( element, {                                                                                                 // 466\n\t\t\tmouseenter: function( event ) {                                                                                     // 467\n\t\t\t\t$( event.currentTarget ).addClass( \"ui-state-hover\" );                                                             // 468\n\t\t\t},                                                                                                                  // 469\n\t\t\tmouseleave: function( event ) {                                                                                     // 470\n\t\t\t\t$( event.currentTarget ).removeClass( \"ui-state-hover\" );                                                          // 471\n\t\t\t}                                                                                                                   // 472\n\t\t});                                                                                                                  // 473\n\t},                                                                                                                    // 474\n                                                                                                                       // 475\n\t_focusable: function( element ) {                                                                                     // 476\n\t\tthis.focusable = this.focusable.add( element );                                                                      // 477\n\t\tthis._on( element, {                                                                                                 // 478\n\t\t\tfocusin: function( event ) {                                                                                        // 479\n\t\t\t\t$( event.currentTarget ).addClass( \"ui-state-focus\" );                                                             // 480\n\t\t\t},                                                                                                                  // 481\n\t\t\tfocusout: function( event ) {                                                                                       // 482\n\t\t\t\t$( event.currentTarget ).removeClass( \"ui-state-focus\" );                                                          // 483\n\t\t\t}                                                                                                                   // 484\n\t\t});                                                                                                                  // 485\n\t},                                                                                                                    // 486\n                                                                                                                       // 487\n\t_trigger: function( type, event, data ) {                                                                             // 488\n\t\tvar prop, orig,                                                                                                      // 489\n\t\t\tcallback = this.options[ type ];                                                                                    // 490\n                                                                                                                       // 491\n\t\tdata = data || {};                                                                                                   // 492\n\t\tevent = $.Event( event );                                                                                            // 493\n\t\tevent.type = ( type === this.widgetEventPrefix ?                                                                     // 494\n\t\t\ttype :                                                                                                              // 495\n\t\t\tthis.widgetEventPrefix + type ).toLowerCase();                                                                      // 496\n\t\t// the original event may come from any element                                                                      // 497\n\t\t// so we need to reset the target on the new event                                                                   // 498\n\t\tevent.target = this.element[ 0 ];                                                                                    // 499\n                                                                                                                       // 500\n\t\t// copy original event properties over to the new event                                                              // 501\n\t\torig = event.originalEvent;                                                                                          // 502\n\t\tif ( orig ) {                                                                                                        // 503\n\t\t\tfor ( prop in orig ) {                                                                                              // 504\n\t\t\t\tif ( !( prop in event ) ) {                                                                                        // 505\n\t\t\t\t\tevent[ prop ] = orig[ prop ];                                                                                     // 506\n\t\t\t\t}                                                                                                                  // 507\n\t\t\t}                                                                                                                   // 508\n\t\t}                                                                                                                    // 509\n                                                                                                                       // 510\n\t\tthis.element.trigger( event, data );                                                                                 // 511\n\t\treturn !( $.isFunction( callback ) &&                                                                                // 512\n\t\t\tcallback.apply( this.element[0], [ event ].concat( data ) ) === false ||                                            // 513\n\t\t\tevent.isDefaultPrevented() );                                                                                       // 514\n\t}                                                                                                                     // 515\n};                                                                                                                     // 516\n                                                                                                                       // 517\n$.each( { show: \"fadeIn\", hide: \"fadeOut\" }, function( method, defaultEffect ) {                                       // 518\n\t$.Widget.prototype[ \"_\" + method ] = function( element, options, callback ) {                                         // 519\n\t\tif ( typeof options === \"string\" ) {                                                                                 // 520\n\t\t\toptions = { effect: options };                                                                                      // 521\n\t\t}                                                                                                                    // 522\n\t\tvar hasOptions,                                                                                                      // 523\n\t\t\teffectName = !options ?                                                                                             // 524\n\t\t\t\tmethod :                                                                                                           // 525\n\t\t\t\toptions === true || typeof options === \"number\" ?                                                                  // 526\n\t\t\t\t\tdefaultEffect :                                                                                                   // 527\n\t\t\t\t\toptions.effect || defaultEffect;                                                                                  // 528\n\t\toptions = options || {};                                                                                             // 529\n\t\tif ( typeof options === \"number\" ) {                                                                                 // 530\n\t\t\toptions = { duration: options };                                                                                    // 531\n\t\t}                                                                                                                    // 532\n\t\thasOptions = !$.isEmptyObject( options );                                                                            // 533\n\t\toptions.complete = callback;                                                                                         // 534\n\t\tif ( options.delay ) {                                                                                               // 535\n\t\t\telement.delay( options.delay );                                                                                     // 536\n\t\t}                                                                                                                    // 537\n\t\tif ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {                                                   // 538\n\t\t\telement[ method ]( options );                                                                                       // 539\n\t\t} else if ( effectName !== method && element[ effectName ] ) {                                                       // 540\n\t\t\telement[ effectName ]( options.duration, options.easing, callback );                                                // 541\n\t\t} else {                                                                                                             // 542\n\t\t\telement.queue(function( next ) {                                                                                    // 543\n\t\t\t\t$( this )[ method ]();                                                                                             // 544\n\t\t\t\tif ( callback ) {                                                                                                  // 545\n\t\t\t\t\tcallback.call( element[ 0 ] );                                                                                    // 546\n\t\t\t\t}                                                                                                                  // 547\n\t\t\t\tnext();                                                                                                            // 548\n\t\t\t});                                                                                                                 // 549\n\t\t}                                                                                                                    // 550\n\t};                                                                                                                    // 551\n});                                                                                                                    // 552\n                                                                                                                       // 553\nvar widget = $.widget;                                                                                                 // 554\n                                                                                                                       // 555\n                                                                                                                       // 556\n                                                                                                                       // 557\n}));                                                                                                                   // 558\n                                                                                                                       // 559\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/tomi_upload-jquery/lib/jquery.iframe-transport.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n * jQuery Iframe Transport Plugin 1.8.2                                                                                // 2\n * https://github.com/blueimp/jQuery-File-Upload                                                                       // 3\n *                                                                                                                     // 4\n * Copyright 2011, Sebastian Tschan                                                                                    // 5\n * https://blueimp.net                                                                                                 // 6\n *                                                                                                                     // 7\n * Licensed under the MIT license:                                                                                     // 8\n * http://www.opensource.org/licenses/MIT                                                                              // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n/* global define, window, document */                                                                                  // 12\n                                                                                                                       // 13\n(function (factory) {                                                                                                  // 14\n    'use strict';                                                                                                      // 15\n    if (typeof define === 'function' && define.amd) {                                                                  // 16\n        // Register as an anonymous AMD module:                                                                        // 17\n        define(['jquery'], factory);                                                                                   // 18\n    } else {                                                                                                           // 19\n        // Browser globals:                                                                                            // 20\n        factory(window.jQuery);                                                                                        // 21\n    }                                                                                                                  // 22\n}(function ($) {                                                                                                       // 23\n    'use strict';                                                                                                      // 24\n                                                                                                                       // 25\n    // Helper variable to create unique names for the transport iframes:                                               // 26\n    var counter = 0;                                                                                                   // 27\n                                                                                                                       // 28\n    // The iframe transport accepts four additional options:                                                           // 29\n    // options.fileInput: a jQuery collection of file input fields                                                     // 30\n    // options.paramName: the parameter name for the file form data,                                                   // 31\n    //  overrides the name property of the file input field(s),                                                        // 32\n    //  can be a string or an array of strings.                                                                        // 33\n    // options.formData: an array of objects with name and value properties,                                           // 34\n    //  equivalent to the return data of .serializeArray(), e.g.:                                                      // 35\n    //  [{name: 'a', value: 1}, {name: 'b', value: 2}]                                                                 // 36\n    // options.initialIframeSrc: the URL of the initial iframe src,                                                    // 37\n    //  by default set to \"javascript:false;\"                                                                          // 38\n    $.ajaxTransport('iframe', function (options) {                                                                     // 39\n        if (options.async) {                                                                                           // 40\n            // javascript:false as initial iframe src                                                                  // 41\n            // prevents warning popups on HTTPS in IE6:                                                                // 42\n            /*jshint scripturl: true */                                                                                // 43\n            var initialIframeSrc = options.initialIframeSrc || 'javascript:false;',                                    // 44\n            /*jshint scripturl: false */                                                                               // 45\n                form,                                                                                                  // 46\n                iframe,                                                                                                // 47\n                addParamChar;                                                                                          // 48\n            return {                                                                                                   // 49\n                send: function (_, completeCallback) {                                                                 // 50\n                    form = $('<form style=\"display:none;\"></form>');                                                   // 51\n                    form.attr('accept-charset', options.formAcceptCharset);                                            // 52\n                    addParamChar = /\\?/.test(options.url) ? '&' : '?';                                                 // 53\n                    // XDomainRequest only supports GET and POST:                                                      // 54\n                    if (options.type === 'DELETE') {                                                                   // 55\n                        options.url = options.url + addParamChar + '_method=DELETE';                                   // 56\n                        options.type = 'POST';                                                                         // 57\n                    } else if (options.type === 'PUT') {                                                               // 58\n                        options.url = options.url + addParamChar + '_method=PUT';                                      // 59\n                        options.type = 'POST';                                                                         // 60\n                    } else if (options.type === 'PATCH') {                                                             // 61\n                        options.url = options.url + addParamChar + '_method=PATCH';                                    // 62\n                        options.type = 'POST';                                                                         // 63\n                    }                                                                                                  // 64\n                    // IE versions below IE8 cannot set the name property of                                           // 65\n                    // elements that have already been added to the DOM,                                               // 66\n                    // so we set the name along with the iframe HTML markup:                                           // 67\n                    counter += 1;                                                                                      // 68\n                    iframe = $(                                                                                        // 69\n                        '<iframe src=\"' + initialIframeSrc +                                                           // 70\n                            '\" name=\"iframe-transport-' + counter + '\"></iframe>'                                      // 71\n                    ).bind('load', function () {                                                                       // 72\n                        var fileInputClones,                                                                           // 73\n                            paramNames = $.isArray(options.paramName) ?                                                // 74\n                                    options.paramName : [options.paramName];                                           // 75\n                        iframe                                                                                         // 76\n                            .unbind('load')                                                                            // 77\n                            .bind('load', function () {                                                                // 78\n                                var response;                                                                          // 79\n                                // Wrap in a try/catch block to catch exceptions thrown                                // 80\n                                // when trying to access cross-domain iframe contents:                                 // 81\n                                try {                                                                                  // 82\n                                    response = iframe.contents();                                                      // 83\n                                    // Google Chrome and Firefox do not throw an                                       // 84\n                                    // exception when calling iframe.contents() on                                     // 85\n                                    // cross-domain requests, so we unify the response:                                // 86\n                                    if (!response.length || !response[0].firstChild) {                                 // 87\n                                        throw new Error();                                                             // 88\n                                    }                                                                                  // 89\n                                } catch (e) {                                                                          // 90\n                                    response = undefined;                                                              // 91\n                                }                                                                                      // 92\n                                // The complete callback returns the                                                   // 93\n                                // iframe content document as response object:                                         // 94\n                                completeCallback(                                                                      // 95\n                                    200,                                                                               // 96\n                                    'success',                                                                         // 97\n                                    {'iframe': response}                                                               // 98\n                                );                                                                                     // 99\n                                // Fix for IE endless progress bar activity bug                                        // 100\n                                // (happens on form submits to iframe targets):                                        // 101\n                                $('<iframe src=\"' + initialIframeSrc + '\"></iframe>')                                  // 102\n                                    .appendTo(form);                                                                   // 103\n                                window.setTimeout(function () {                                                        // 104\n                                    // Removing the form in a setTimeout call                                          // 105\n                                    // allows Chrome's developer tools to display                                      // 106\n                                    // the response result                                                             // 107\n                                    form.remove();                                                                     // 108\n                                }, 0);                                                                                 // 109\n                            });                                                                                        // 110\n                        form                                                                                           // 111\n                            .prop('target', iframe.prop('name'))                                                       // 112\n                            .prop('action', options.url)                                                               // 113\n                            .prop('method', options.type);                                                             // 114\n                        if (options.formData) {                                                                        // 115\n                            $.each(options.formData, function (index, field) {                                         // 116\n                                $('<input type=\"hidden\"/>')                                                            // 117\n                                    .prop('name', field.name)                                                          // 118\n                                    .val(field.value)                                                                  // 119\n                                    .appendTo(form);                                                                   // 120\n                            });                                                                                        // 121\n                        }                                                                                              // 122\n                        if (options.fileInput && options.fileInput.length &&                                           // 123\n                                options.type === 'POST') {                                                             // 124\n                            fileInputClones = options.fileInput.clone();                                               // 125\n                            // Insert a clone for each file input field:                                               // 126\n                            options.fileInput.after(function (index) {                                                 // 127\n                                return fileInputClones[index];                                                         // 128\n                            });                                                                                        // 129\n                            if (options.paramName) {                                                                   // 130\n                                options.fileInput.each(function (index) {                                              // 131\n                                    $(this).prop(                                                                      // 132\n                                        'name',                                                                        // 133\n                                        paramNames[index] || options.paramName                                         // 134\n                                    );                                                                                 // 135\n                                });                                                                                    // 136\n                            }                                                                                          // 137\n                            // Appending the file input fields to the hidden form                                      // 138\n                            // removes them from their original location:                                              // 139\n                            form                                                                                       // 140\n                                .append(options.fileInput)                                                             // 141\n                                .prop('enctype', 'multipart/form-data')                                                // 142\n                                // enctype must be set as encoding for IE:                                             // 143\n                                .prop('encoding', 'multipart/form-data');                                              // 144\n                            // Remove the HTML5 form attribute from the input(s):                                      // 145\n                            options.fileInput.removeAttr('form');                                                      // 146\n                        }                                                                                              // 147\n                        form.submit();                                                                                 // 148\n                        // Insert the file input fields at their original location                                     // 149\n                        // by replacing the clones with the originals:                                                 // 150\n                        if (fileInputClones && fileInputClones.length) {                                               // 151\n                            options.fileInput.each(function (index, input) {                                           // 152\n                                var clone = $(fileInputClones[index]);                                                 // 153\n                                // Restore the original name and form properties:                                      // 154\n                                $(input)                                                                               // 155\n                                    .prop('name', clone.prop('name'))                                                  // 156\n                                    .attr('form', clone.attr('form'));                                                 // 157\n                                clone.replaceWith(input);                                                              // 158\n                            });                                                                                        // 159\n                        }                                                                                              // 160\n                    });                                                                                                // 161\n                    form.append(iframe).appendTo(document.body);                                                       // 162\n                },                                                                                                     // 163\n                abort: function () {                                                                                   // 164\n                    if (iframe) {                                                                                      // 165\n                        // javascript:false as iframe src aborts the request                                           // 166\n                        // and prevents warning popups on HTTPS in IE6.                                                // 167\n                        // concat is used to avoid the \"Script URL\" JSLint error:                                      // 168\n                        iframe                                                                                         // 169\n                            .unbind('load')                                                                            // 170\n                            .prop('src', initialIframeSrc);                                                            // 171\n                    }                                                                                                  // 172\n                    if (form) {                                                                                        // 173\n                        form.remove();                                                                                 // 174\n                    }                                                                                                  // 175\n                }                                                                                                      // 176\n            };                                                                                                         // 177\n        }                                                                                                              // 178\n    });                                                                                                                // 179\n                                                                                                                       // 180\n    // The iframe transport returns the iframe content document as response.                                           // 181\n    // The following adds converters from iframe to text, json, html, xml                                              // 182\n    // and script.                                                                                                     // 183\n    // Please note that the Content-Type for JSON responses has to be text/plain                                       // 184\n    // or text/html, if the browser doesn't include application/json in the                                            // 185\n    // Accept header, else IE will show a download dialog.                                                             // 186\n    // The Content-Type for XML responses on the other hand has to be always                                           // 187\n    // application/xml or text/xml, so IE properly parses the XML response.                                            // 188\n    // See also                                                                                                        // 189\n    // https://github.com/blueimp/jQuery-File-Upload/wiki/Setup#content-type-negotiation                               // 190\n    $.ajaxSetup({                                                                                                      // 191\n        converters: {                                                                                                  // 192\n            'iframe text': function (iframe) {                                                                         // 193\n                return iframe && $(iframe[0].body).text();                                                             // 194\n            },                                                                                                         // 195\n            'iframe json': function (iframe) {                                                                         // 196\n                return iframe && $.parseJSON($(iframe[0].body).text());                                                // 197\n            },                                                                                                         // 198\n            'iframe html': function (iframe) {                                                                         // 199\n                return iframe && $(iframe[0].body).html();                                                             // 200\n            },                                                                                                         // 201\n            'iframe xml': function (iframe) {                                                                          // 202\n                var xmlDoc = iframe && iframe[0];                                                                      // 203\n                return xmlDoc && $.isXMLDoc(xmlDoc) ? xmlDoc :                                                         // 204\n                        $.parseXML((xmlDoc.XMLDocument && xmlDoc.XMLDocument.xml) ||                                   // 205\n                            $(xmlDoc.body).html());                                                                    // 206\n            },                                                                                                         // 207\n            'iframe script': function (iframe) {                                                                       // 208\n                return iframe && $.globalEval($(iframe[0].body).text());                                               // 209\n            }                                                                                                          // 210\n        }                                                                                                              // 211\n    });                                                                                                                // 212\n                                                                                                                       // 213\n}));                                                                                                                   // 214\n                                                                                                                       // 215\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/tomi_upload-jquery/lib/jquery.fileupload.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n * jQuery File Upload Plugin 5.42.0                                                                                    // 2\n * https://github.com/blueimp/jQuery-File-Upload                                                                       // 3\n *                                                                                                                     // 4\n * Copyright 2010, Sebastian Tschan                                                                                    // 5\n * https://blueimp.net                                                                                                 // 6\n *                                                                                                                     // 7\n * Licensed under the MIT license:                                                                                     // 8\n * http://www.opensource.org/licenses/MIT                                                                              // 9\n */                                                                                                                    // 10\n                                                                                                                       // 11\n/* jshint nomen:false */                                                                                               // 12\n/* global define, window, document, location, Blob, FormData */                                                        // 13\n                                                                                                                       // 14\n(function (factory) {                                                                                                  // 15\n  'use strict';                                                                                                        // 16\n  // Added by me so that it compiles with velocity                                                                     // 17\n  if (!window) {                                                                                                       // 18\n    window = {};                                                                                                       // 19\n  }                                                                                                                    // 20\n  if (typeof define === 'function' && define.amd) {                                                                    // 21\n    // Register as an anonymous AMD module:                                                                            // 22\n    define([                                                                                                           // 23\n      'jquery',                                                                                                        // 24\n      'jquery.ui.widget'                                                                                               // 25\n    ], factory);                                                                                                       // 26\n  } else {                                                                                                             // 27\n    // Browser globals:                                                                                                // 28\n    factory(window.jQuery);                                                                                            // 29\n  }                                                                                                                    // 30\n}(function ($) {                                                                                                       // 31\n  'use strict';                                                                                                        // 32\n                                                                                                                       // 33\n  // Detect file input support, based on                                                                               // 34\n  // http://viljamis.com/blog/2012/file-upload-support-on-mobile/                                                      // 35\n  $.support.fileInput = !(new RegExp(                                                                                  // 36\n    // Handle devices which give false positives for the feature detection:                                            // 37\n    '(Android (1\\\\.[0156]|2\\\\.[01]))' +                                                                                // 38\n    '|(Windows Phone (OS 7|8\\\\.0))|(XBLWP)|(ZuneWP)|(WPDesktop)' +                                                     // 39\n    '|(w(eb)?OSBrowser)|(webOS)' +                                                                                     // 40\n    '|(Kindle/(1\\\\.0|2\\\\.[05]|3\\\\.0))'                                                                                 // 41\n  ).test(window.navigator.userAgent) ||                                                                                // 42\n    // Feature detection for all other devices:                                                                        // 43\n  $('<input type=\"file\">').prop('disabled'));                                                                          // 44\n                                                                                                                       // 45\n  // The FileReader API is not actually used, but works as feature detection,                                          // 46\n  // as some Safari versions (5?) support XHR file uploads via the FormData API,                                       // 47\n  // but not non-multipart XHR file uploads.                                                                           // 48\n  // window.XMLHttpRequestUpload is not available on IE10, so we check for                                             // 49\n  // window.ProgressEvent instead to detect XHR2 file upload capability:                                               // 50\n  $.support.xhrFileUpload = !!(window.ProgressEvent && window.FileReader);                                             // 51\n  $.support.xhrFormDataFileUpload = !!window.FormData;                                                                 // 52\n                                                                                                                       // 53\n  // Detect support for Blob slicing (required for chunked uploads):                                                   // 54\n  $.support.blobSlice = window.Blob && (Blob.prototype.slice ||                                                        // 55\n  Blob.prototype.webkitSlice || Blob.prototype.mozSlice);                                                              // 56\n                                                                                                                       // 57\n  // Helper function to create drag handlers for dragover/dragenter/dragleave:                                         // 58\n  function getDragHandler(type) {                                                                                      // 59\n    var isDragOver = type === 'dragover';                                                                              // 60\n    return function (e) {                                                                                              // 61\n      e.dataTransfer = e.originalEvent && e.originalEvent.dataTransfer;                                                // 62\n      var dataTransfer = e.dataTransfer;                                                                               // 63\n      if (dataTransfer && $.inArray('Files', dataTransfer.types) !== -1 &&                                             // 64\n        this._trigger(                                                                                                 // 65\n          type,                                                                                                        // 66\n          $.Event(type, {delegatedEvent: e})                                                                           // 67\n        ) !== false) {                                                                                                 // 68\n        e.preventDefault();                                                                                            // 69\n        if (isDragOver) {                                                                                              // 70\n          dataTransfer.dropEffect = 'copy';                                                                            // 71\n        }                                                                                                              // 72\n      }                                                                                                                // 73\n    };                                                                                                                 // 74\n  }                                                                                                                    // 75\n                                                                                                                       // 76\n  // The fileupload widget listens for change events on file input fields defined                                      // 77\n  // via fileInput setting and paste or drop events of the given dropZone.                                             // 78\n  // In addition to the default jQuery Widget methods, the fileupload widget                                           // 79\n  // exposes the \"add\" and \"send\" methods, to add or directly send files using                                         // 80\n  // the fileupload API.                                                                                               // 81\n  // By default, files added via file input selection, paste, drag & drop or                                           // 82\n  // \"add\" method are uploaded immediately, but it is possible to override                                             // 83\n  // the \"add\" callback option to queue file uploads.                                                                  // 84\n  $.widget('blueimp.fileupload', {                                                                                     // 85\n                                                                                                                       // 86\n    options: {                                                                                                         // 87\n      // The drop target element(s), by the default the complete document.                                             // 88\n      // Set to null to disable drag & drop support:                                                                   // 89\n      dropZone: $(document),                                                                                           // 90\n      // The paste target element(s), by the default undefined.                                                        // 91\n      // Set to a DOM node or jQuery object to enable file pasting:                                                    // 92\n      pasteZone: undefined,                                                                                            // 93\n      // The file input field(s), that are listened to for change events.                                              // 94\n      // If undefined, it is set to the file input fields inside                                                       // 95\n      // of the widget element on plugin initialization.                                                               // 96\n      // Set to null to disable the change listener.                                                                   // 97\n      fileInput: undefined,                                                                                            // 98\n      // By default, the file input field is replaced with a clone after                                               // 99\n      // each input field change event. This is required for iframe transport                                          // 100\n      // queues and allows change events to be fired for the same file                                                 // 101\n      // selection, but can be disabled by setting the following option to false:                                      // 102\n      replaceFileInput: true,                                                                                          // 103\n      // The parameter name for the file form data (the request argument name).                                        // 104\n      // If undefined or empty, the name property of the file input field is                                           // 105\n      // used, or \"files[]\" if the file input name property is also empty,                                             // 106\n      // can be a string or an array of strings:                                                                       // 107\n      paramName: undefined,                                                                                            // 108\n      // By default, each file of a selection is uploaded using an individual                                          // 109\n      // request for XHR type uploads. Set to false to upload file                                                     // 110\n      // selections in one request each:                                                                               // 111\n      singleFileUploads: true,                                                                                         // 112\n      // To limit the number of files uploaded with one XHR request,                                                   // 113\n      // set the following option to an integer greater than 0:                                                        // 114\n      limitMultiFileUploads: undefined,                                                                                // 115\n      // The following option limits the number of files uploaded with one                                             // 116\n      // XHR request to keep the request size under or equal to the defined                                            // 117\n      // limit in bytes:                                                                                               // 118\n      limitMultiFileUploadSize: undefined,                                                                             // 119\n      // Multipart file uploads add a number of bytes to each uploaded file,                                           // 120\n      // therefore the following option adds an overhead for each file used                                            // 121\n      // in the limitMultiFileUploadSize configuration:                                                                // 122\n      limitMultiFileUploadSizeOverhead: 512,                                                                           // 123\n      // Set the following option to true to issue all file upload requests                                            // 124\n      // in a sequential order:                                                                                        // 125\n      sequentialUploads: false,                                                                                        // 126\n      // To limit the number of concurrent uploads,                                                                    // 127\n      // set the following option to an integer greater than 0:                                                        // 128\n      limitConcurrentUploads: undefined,                                                                               // 129\n      // Set the following option to true to force iframe transport uploads:                                           // 130\n      forceIframeTransport: false,                                                                                     // 131\n      // Set the following option to the location of a redirect url on the                                             // 132\n      // origin server, for cross-domain iframe transport uploads:                                                     // 133\n      redirect: undefined,                                                                                             // 134\n      // The parameter name for the redirect url, sent as part of the form                                             // 135\n      // data and set to 'redirect' if this option is empty:                                                           // 136\n      redirectParamName: undefined,                                                                                    // 137\n      // Set the following option to the location of a postMessage window,                                             // 138\n      // to enable postMessage transport uploads:                                                                      // 139\n      postMessage: undefined,                                                                                          // 140\n      // By default, XHR file uploads are sent as multipart/form-data.                                                 // 141\n      // The iframe transport is always using multipart/form-data.                                                     // 142\n      // Set to false to enable non-multipart XHR uploads:                                                             // 143\n      multipart: true,                                                                                                 // 144\n      // To upload large files in smaller chunks, set the following option                                             // 145\n      // to a preferred maximum chunk size. If set to 0, null or undefined,                                            // 146\n      // or the browser does not support the required Blob API, files will                                             // 147\n      // be uploaded as a whole.                                                                                       // 148\n      maxChunkSize: undefined,                                                                                         // 149\n      // When a non-multipart upload or a chunked multipart upload has been                                            // 150\n      // aborted, this option can be used to resume the upload by setting                                              // 151\n      // it to the size of the already uploaded bytes. This option is most                                             // 152\n      // useful when modifying the options object inside of the \"add\" or                                               // 153\n      // \"send\" callbacks, as the options are cloned for each file upload.                                             // 154\n      uploadedBytes: undefined,                                                                                        // 155\n      // By default, failed (abort or error) file uploads are removed from the                                         // 156\n      // global progress calculation. Set the following option to false to                                             // 157\n      // prevent recalculating the global progress data:                                                               // 158\n      recalculateProgress: true,                                                                                       // 159\n      // Interval in milliseconds to calculate and trigger progress events:                                            // 160\n      progressInterval: 100,                                                                                           // 161\n      // Interval in milliseconds to calculate progress bitrate:                                                       // 162\n      bitrateInterval: 500,                                                                                            // 163\n      // By default, uploads are started automatically when adding files:                                              // 164\n      autoUpload: true,                                                                                                // 165\n                                                                                                                       // 166\n      // Error and info messages:                                                                                      // 167\n      messages: {                                                                                                      // 168\n        uploadedBytes: 'Uploaded bytes exceed file size'                                                               // 169\n      },                                                                                                               // 170\n                                                                                                                       // 171\n      // Translation function, gets the message key to be translated                                                   // 172\n      // and an object with context specific data as arguments:                                                        // 173\n      i18n: function (message, context) {                                                                              // 174\n        message = this.messages[message] || message.toString();                                                        // 175\n        if (context) {                                                                                                 // 176\n          $.each(context, function (key, value) {                                                                      // 177\n            message = message.replace('{' + key + '}', value);                                                         // 178\n          });                                                                                                          // 179\n        }                                                                                                              // 180\n        return message;                                                                                                // 181\n      },                                                                                                               // 182\n                                                                                                                       // 183\n      // Additional form data to be sent along with the file uploads can be set                                        // 184\n      // using this option, which accepts an array of objects with name and                                            // 185\n      // value properties, a function returning such an array, a FormData                                              // 186\n      // object (for XHR file uploads), or a simple object.                                                            // 187\n      // The form of the first fileInput is given as parameter to the function:                                        // 188\n      formData: function (form) {                                                                                      // 189\n        return form.serializeArray();                                                                                  // 190\n      },                                                                                                               // 191\n                                                                                                                       // 192\n      // The add callback is invoked as soon as files are added to the fileupload                                      // 193\n      // widget (via file input selection, drag & drop, paste or add API call).                                        // 194\n      // If the singleFileUploads option is enabled, this callback will be                                             // 195\n      // called once for each file in the selection for XHR file uploads, else                                         // 196\n      // once for each file selection.                                                                                 // 197\n      //                                                                                                               // 198\n      // The upload starts when the submit method is invoked on the data parameter.                                    // 199\n      // The data object contains a files property holding the added files                                             // 200\n      // and allows you to override plugin options as well as define ajax settings.                                    // 201\n      //                                                                                                               // 202\n      // Listeners for this callback can also be bound the following way:                                              // 203\n      // .bind('fileuploadadd', func);                                                                                 // 204\n      //                                                                                                               // 205\n      // data.submit() returns a Promise object and allows to attach additional                                        // 206\n      // handlers using jQuery's Deferred callbacks:                                                                   // 207\n      // data.submit().done(func).fail(func).always(func);                                                             // 208\n      add: function (e, data) {                                                                                        // 209\n        if (e.isDefaultPrevented()) {                                                                                  // 210\n          return false;                                                                                                // 211\n        }                                                                                                              // 212\n        if (data.autoUpload || (data.autoUpload !== false &&                                                           // 213\n          $(this).fileupload('option', 'autoUpload'))) {                                                               // 214\n          data.process().done(function () {                                                                            // 215\n            data.submit();                                                                                             // 216\n          });                                                                                                          // 217\n        }                                                                                                              // 218\n      },                                                                                                               // 219\n                                                                                                                       // 220\n      // Other callbacks:                                                                                              // 221\n                                                                                                                       // 222\n      // Callback for the submit event of each file upload:                                                            // 223\n      // submit: function (e, data) {}, // .bind('fileuploadsubmit', func);                                            // 224\n                                                                                                                       // 225\n      // Callback for the start of each file upload request:                                                           // 226\n      // send: function (e, data) {}, // .bind('fileuploadsend', func);                                                // 227\n                                                                                                                       // 228\n      // Callback for successful uploads:                                                                              // 229\n      // done: function (e, data) {}, // .bind('fileuploaddone', func);                                                // 230\n                                                                                                                       // 231\n      // Callback for failed (abort or error) uploads:                                                                 // 232\n      // fail: function (e, data) {}, // .bind('fileuploadfail', func);                                                // 233\n                                                                                                                       // 234\n      // Callback for completed (success, abort or error) requests:                                                    // 235\n      // always: function (e, data) {}, // .bind('fileuploadalways', func);                                            // 236\n                                                                                                                       // 237\n      // Callback for upload progress events:                                                                          // 238\n      // progress: function (e, data) {}, // .bind('fileuploadprogress', func);                                        // 239\n                                                                                                                       // 240\n      // Callback for global upload progress events:                                                                   // 241\n      // progressall: function (e, data) {}, // .bind('fileuploadprogressall', func);                                  // 242\n                                                                                                                       // 243\n      // Callback for uploads start, equivalent to the global ajaxStart event:                                         // 244\n      // start: function (e) {}, // .bind('fileuploadstart', func);                                                    // 245\n                                                                                                                       // 246\n      // Callback for uploads stop, equivalent to the global ajaxStop event:                                           // 247\n      // stop: function (e) {}, // .bind('fileuploadstop', func);                                                      // 248\n                                                                                                                       // 249\n      // Callback for change events of the fileInput(s):                                                               // 250\n      // change: function (e, data) {}, // .bind('fileuploadchange', func);                                            // 251\n                                                                                                                       // 252\n      // Callback for paste events to the pasteZone(s):                                                                // 253\n      // paste: function (e, data) {}, // .bind('fileuploadpaste', func);                                              // 254\n                                                                                                                       // 255\n      // Callback for drop events of the dropZone(s):                                                                  // 256\n      // drop: function (e, data) {}, // .bind('fileuploaddrop', func);                                                // 257\n                                                                                                                       // 258\n      // Callback for dragover events of the dropZone(s):                                                              // 259\n      // dragover: function (e) {}, // .bind('fileuploaddragover', func);                                              // 260\n                                                                                                                       // 261\n      // Callback for the start of each chunk upload request:                                                          // 262\n      // chunksend: function (e, data) {}, // .bind('fileuploadchunksend', func);                                      // 263\n                                                                                                                       // 264\n      // Callback for successful chunk uploads:                                                                        // 265\n      // chunkdone: function (e, data) {}, // .bind('fileuploadchunkdone', func);                                      // 266\n                                                                                                                       // 267\n      // Callback for failed (abort or error) chunk uploads:                                                           // 268\n      // chunkfail: function (e, data) {}, // .bind('fileuploadchunkfail', func);                                      // 269\n                                                                                                                       // 270\n      // Callback for completed (success, abort or error) chunk upload requests:                                       // 271\n      // chunkalways: function (e, data) {}, // .bind('fileuploadchunkalways', func);                                  // 272\n                                                                                                                       // 273\n      // The plugin options are used as settings object for the ajax calls.                                            // 274\n      // The following are jQuery ajax settings required for the file uploads:                                         // 275\n      processData: false,                                                                                              // 276\n      contentType: false,                                                                                              // 277\n      cache: false                                                                                                     // 278\n    },                                                                                                                 // 279\n                                                                                                                       // 280\n    // A list of options that require reinitializing event listeners and/or                                            // 281\n    // special initialization code:                                                                                    // 282\n    _specialOptions: [                                                                                                 // 283\n      'fileInput',                                                                                                     // 284\n      'dropZone',                                                                                                      // 285\n      'pasteZone',                                                                                                     // 286\n      'multipart',                                                                                                     // 287\n      'forceIframeTransport'                                                                                           // 288\n    ],                                                                                                                 // 289\n                                                                                                                       // 290\n    _blobSlice: $.support.blobSlice && function () {                                                                   // 291\n      var slice = this.slice || this.webkitSlice || this.mozSlice;                                                     // 292\n      return slice.apply(this, arguments);                                                                             // 293\n    },                                                                                                                 // 294\n                                                                                                                       // 295\n    _BitrateTimer: function () {                                                                                       // 296\n      this.timestamp = ((Date.now) ? Date.now() : (new Date()).getTime());                                             // 297\n      this.loaded = 0;                                                                                                 // 298\n      this.bitrate = 0;                                                                                                // 299\n      this.getBitrate = function (now, loaded, interval) {                                                             // 300\n        var timeDiff = now - this.timestamp;                                                                           // 301\n        if (!this.bitrate || !interval || timeDiff > interval) {                                                       // 302\n          this.bitrate = (loaded - this.loaded) * (1000 / timeDiff) * 8;                                               // 303\n          this.loaded = loaded;                                                                                        // 304\n          this.timestamp = now;                                                                                        // 305\n        }                                                                                                              // 306\n        return this.bitrate;                                                                                           // 307\n      };                                                                                                               // 308\n    },                                                                                                                 // 309\n                                                                                                                       // 310\n    _isXHRUpload: function (options) {                                                                                 // 311\n      return !options.forceIframeTransport &&                                                                          // 312\n        ((!options.multipart && $.support.xhrFileUpload) ||                                                            // 313\n        $.support.xhrFormDataFileUpload);                                                                              // 314\n    },                                                                                                                 // 315\n                                                                                                                       // 316\n    _getFormData: function (options) {                                                                                 // 317\n      var formData;                                                                                                    // 318\n      if ($.type(options.formData) === 'function') {                                                                   // 319\n        return options.formData(options.form);                                                                         // 320\n      }                                                                                                                // 321\n      if ($.isArray(options.formData)) {                                                                               // 322\n        return options.formData;                                                                                       // 323\n      }                                                                                                                // 324\n      if ($.type(options.formData) === 'object') {                                                                     // 325\n        formData = [];                                                                                                 // 326\n        $.each(options.formData, function (name, value) {                                                              // 327\n          formData.push({name: name, value: value});                                                                   // 328\n        });                                                                                                            // 329\n        return formData;                                                                                               // 330\n      }                                                                                                                // 331\n      return [];                                                                                                       // 332\n    },                                                                                                                 // 333\n                                                                                                                       // 334\n    _getTotal: function (files) {                                                                                      // 335\n      var total = 0;                                                                                                   // 336\n      $.each(files, function (index, file) {                                                                           // 337\n        total += file.size || 1;                                                                                       // 338\n      });                                                                                                              // 339\n      return total;                                                                                                    // 340\n    },                                                                                                                 // 341\n                                                                                                                       // 342\n    _initProgressObject: function (obj) {                                                                              // 343\n      var progress = {                                                                                                 // 344\n        loaded: 0,                                                                                                     // 345\n        total: 0,                                                                                                      // 346\n        bitrate: 0                                                                                                     // 347\n      };                                                                                                               // 348\n      if (obj._progress) {                                                                                             // 349\n        $.extend(obj._progress, progress);                                                                             // 350\n      } else {                                                                                                         // 351\n        obj._progress = progress;                                                                                      // 352\n      }                                                                                                                // 353\n    },                                                                                                                 // 354\n                                                                                                                       // 355\n    _initResponseObject: function (obj) {                                                                              // 356\n      var prop;                                                                                                        // 357\n      if (obj._response) {                                                                                             // 358\n        for (prop in obj._response) {                                                                                  // 359\n          if (obj._response.hasOwnProperty(prop)) {                                                                    // 360\n            delete obj._response[prop];                                                                                // 361\n          }                                                                                                            // 362\n        }                                                                                                              // 363\n      } else {                                                                                                         // 364\n        obj._response = {};                                                                                            // 365\n      }                                                                                                                // 366\n    },                                                                                                                 // 367\n                                                                                                                       // 368\n    _onProgress: function (e, data) {                                                                                  // 369\n      if (e.lengthComputable) {                                                                                        // 370\n        var now = ((Date.now) ? Date.now() : (new Date()).getTime()),                                                  // 371\n          loaded;                                                                                                      // 372\n        if (data._time && data.progressInterval &&                                                                     // 373\n          (now - data._time < data.progressInterval) &&                                                                // 374\n          e.loaded !== e.total) {                                                                                      // 375\n          return;                                                                                                      // 376\n        }                                                                                                              // 377\n        data._time = now;                                                                                              // 378\n        loaded = Math.floor(                                                                                           // 379\n          e.loaded / e.total * (data.chunkSize || data._progress.total)                                                // 380\n        ) + (data.uploadedBytes || 0);                                                                                 // 381\n        // Add the difference from the previously loaded state                                                         // 382\n        // to the global loaded counter:                                                                               // 383\n        this._progress.loaded += (loaded - data._progress.loaded);                                                     // 384\n        this._progress.bitrate = this._bitrateTimer.getBitrate(                                                        // 385\n          now,                                                                                                         // 386\n          this._progress.loaded,                                                                                       // 387\n          data.bitrateInterval                                                                                         // 388\n        );                                                                                                             // 389\n        data._progress.loaded = data.loaded = loaded;                                                                  // 390\n        data._progress.bitrate = data.bitrate = data._bitrateTimer.getBitrate(                                         // 391\n          now,                                                                                                         // 392\n          loaded,                                                                                                      // 393\n          data.bitrateInterval                                                                                         // 394\n        );                                                                                                             // 395\n        // Trigger a custom progress event with a total data property set                                              // 396\n        // to the file size(s) of the current upload and a loaded data                                                 // 397\n        // property calculated accordingly:                                                                            // 398\n        this._trigger(                                                                                                 // 399\n          'progress',                                                                                                  // 400\n          $.Event('progress', {delegatedEvent: e}),                                                                    // 401\n          data                                                                                                         // 402\n        );                                                                                                             // 403\n        // Trigger a global progress event for all current file uploads,                                               // 404\n        // including ajax calls queued for sequential file uploads:                                                    // 405\n        this._trigger(                                                                                                 // 406\n          'progressall',                                                                                               // 407\n          $.Event('progressall', {delegatedEvent: e}),                                                                 // 408\n          this._progress                                                                                               // 409\n        );                                                                                                             // 410\n      }                                                                                                                // 411\n    },                                                                                                                 // 412\n                                                                                                                       // 413\n    _initProgressListener: function (options) {                                                                        // 414\n      var that = this,                                                                                                 // 415\n        xhr = options.xhr ? options.xhr() : $.ajaxSettings.xhr();                                                      // 416\n      // Accesss to the native XHR object is required to add event listeners                                           // 417\n      // for the upload progress event:                                                                                // 418\n      if (xhr.upload) {                                                                                                // 419\n        $(xhr.upload).bind('progress', function (e) {                                                                  // 420\n          var oe = e.originalEvent;                                                                                    // 421\n          // Make sure the progress event properties get copied over:                                                  // 422\n          e.lengthComputable = oe.lengthComputable;                                                                    // 423\n          e.loaded = oe.loaded;                                                                                        // 424\n          e.total = oe.total;                                                                                          // 425\n          that._onProgress(e, options);                                                                                // 426\n        });                                                                                                            // 427\n        options.xhr = function () {                                                                                    // 428\n          return xhr;                                                                                                  // 429\n        };                                                                                                             // 430\n      }                                                                                                                // 431\n    },                                                                                                                 // 432\n                                                                                                                       // 433\n    _isInstanceOf: function (type, obj) {                                                                              // 434\n      // Cross-frame instanceof check                                                                                  // 435\n      return Object.prototype.toString.call(obj) === '[object ' + type + ']';                                          // 436\n    },                                                                                                                 // 437\n                                                                                                                       // 438\n    _initXHRData: function (options) {                                                                                 // 439\n      var that = this,                                                                                                 // 440\n        formData,                                                                                                      // 441\n        file = options.files[0],                                                                                       // 442\n      // Ignore non-multipart setting if not supported:                                                                // 443\n        multipart = options.multipart || !$.support.xhrFileUpload,                                                     // 444\n        paramName = $.type(options.paramName) === 'array' ?                                                            // 445\n          options.paramName[0] : options.paramName;                                                                    // 446\n      options.headers = $.extend({}, options.headers);                                                                 // 447\n      if (options.contentRange) {                                                                                      // 448\n        options.headers['Content-Range'] = options.contentRange;                                                       // 449\n      }                                                                                                                // 450\n      if (!multipart || options.blob || !this._isInstanceOf('File', file)) {                                           // 451\n        options.headers['Content-Disposition'] = 'attachment; filename=\"' +                                            // 452\n        encodeURI(file.name) + '\"';                                                                                    // 453\n      }                                                                                                                // 454\n      if (!multipart) {                                                                                                // 455\n        options.contentType = file.type || 'application/octet-stream';                                                 // 456\n        options.data = options.blob || file;                                                                           // 457\n      } else if ($.support.xhrFormDataFileUpload) {                                                                    // 458\n        if (options.postMessage) {                                                                                     // 459\n          // window.postMessage does not allow sending FormData                                                        // 460\n          // objects, so we just add the File/Blob objects to                                                          // 461\n          // the formData array and let the postMessage window                                                         // 462\n          // create the FormData object out of this array:                                                             // 463\n          formData = this._getFormData(options);                                                                       // 464\n          if (options.blob) {                                                                                          // 465\n            formData.push({                                                                                            // 466\n              name: paramName,                                                                                         // 467\n              value: options.blob                                                                                      // 468\n            });                                                                                                        // 469\n          } else {                                                                                                     // 470\n            $.each(options.files, function (index, file) {                                                             // 471\n              formData.push({                                                                                          // 472\n                name: ($.type(options.paramName) === 'array' &&                                                        // 473\n                options.paramName[index]) || paramName,                                                                // 474\n                value: file                                                                                            // 475\n              });                                                                                                      // 476\n            });                                                                                                        // 477\n          }                                                                                                            // 478\n        } else {                                                                                                       // 479\n          if (that._isInstanceOf('FormData', options.formData)) {                                                      // 480\n            formData = options.formData;                                                                               // 481\n          } else {                                                                                                     // 482\n            formData = new FormData();                                                                                 // 483\n            $.each(this._getFormData(options), function (index, field) {                                               // 484\n              formData.append(field.name, field.value);                                                                // 485\n            });                                                                                                        // 486\n          }                                                                                                            // 487\n          if (options.blob) {                                                                                          // 488\n            formData.append(paramName, options.blob, file.name);                                                       // 489\n          } else {                                                                                                     // 490\n            $.each(options.files, function (index, file) {                                                             // 491\n              // This check allows the tests to run with                                                               // 492\n              // dummy objects:                                                                                        // 493\n              if (that._isInstanceOf('File', file) ||                                                                  // 494\n                that._isInstanceOf('Blob', file)) {                                                                    // 495\n                formData.append(                                                                                       // 496\n                  ($.type(options.paramName) === 'array' &&                                                            // 497\n                  options.paramName[index]) || paramName,                                                              // 498\n                  file,                                                                                                // 499\n                  file.uploadName || file.name                                                                         // 500\n                );                                                                                                     // 501\n              }                                                                                                        // 502\n            });                                                                                                        // 503\n          }                                                                                                            // 504\n        }                                                                                                              // 505\n        options.data = formData;                                                                                       // 506\n      }                                                                                                                // 507\n      // Blob reference is not needed anymore, free memory:                                                            // 508\n      options.blob = null;                                                                                             // 509\n    },                                                                                                                 // 510\n                                                                                                                       // 511\n    _initIframeSettings: function (options) {                                                                          // 512\n      var targetHost = $('<a></a>').prop('href', options.url).prop('host');                                            // 513\n      // Setting the dataType to iframe enables the iframe transport:                                                  // 514\n      options.dataType = 'iframe ' + (options.dataType || '');                                                         // 515\n      // The iframe transport accepts a serialized array as form data:                                                 // 516\n      options.formData = this._getFormData(options);                                                                   // 517\n      // Add redirect url to form data on cross-domain uploads:                                                        // 518\n      if (options.redirect && targetHost && targetHost !== location.host) {                                            // 519\n        options.formData.push({                                                                                        // 520\n          name: options.redirectParamName || 'redirect',                                                               // 521\n          value: options.redirect                                                                                      // 522\n        });                                                                                                            // 523\n      }                                                                                                                // 524\n    },                                                                                                                 // 525\n                                                                                                                       // 526\n    _initDataSettings: function (options) {                                                                            // 527\n      if (this._isXHRUpload(options)) {                                                                                // 528\n        if (!this._chunkedUpload(options, true)) {                                                                     // 529\n          if (!options.data) {                                                                                         // 530\n            this._initXHRData(options);                                                                                // 531\n          }                                                                                                            // 532\n          this._initProgressListener(options);                                                                         // 533\n        }                                                                                                              // 534\n        if (options.postMessage) {                                                                                     // 535\n          // Setting the dataType to postmessage enables the                                                           // 536\n          // postMessage transport:                                                                                    // 537\n          options.dataType = 'postmessage ' + (options.dataType || '');                                                // 538\n        }                                                                                                              // 539\n      } else {                                                                                                         // 540\n        this._initIframeSettings(options);                                                                             // 541\n      }                                                                                                                // 542\n    },                                                                                                                 // 543\n                                                                                                                       // 544\n    _getParamName: function (options) {                                                                                // 545\n      var fileInput = $(options.fileInput),                                                                            // 546\n        paramName = options.paramName;                                                                                 // 547\n      if (!paramName) {                                                                                                // 548\n        paramName = [];                                                                                                // 549\n        fileInput.each(function () {                                                                                   // 550\n          var input = $(this),                                                                                         // 551\n            name = input.prop('name') || 'files[]',                                                                    // 552\n            i = (input.prop('files') || [1]).length;                                                                   // 553\n          while (i) {                                                                                                  // 554\n            paramName.push(name);                                                                                      // 555\n            i -= 1;                                                                                                    // 556\n          }                                                                                                            // 557\n        });                                                                                                            // 558\n        if (!paramName.length) {                                                                                       // 559\n          paramName = [fileInput.prop('name') || 'files[]'];                                                           // 560\n        }                                                                                                              // 561\n      } else if (!$.isArray(paramName)) {                                                                              // 562\n        paramName = [paramName];                                                                                       // 563\n      }                                                                                                                // 564\n      return paramName;                                                                                                // 565\n    },                                                                                                                 // 566\n                                                                                                                       // 567\n    _initFormSettings: function (options) {                                                                            // 568\n      // Retrieve missing options from the input field and the                                                         // 569\n      // associated form, if available:                                                                                // 570\n      if (!options.form || !options.form.length) {                                                                     // 571\n        options.form = $(options.fileInput.prop('form'));                                                              // 572\n        // If the given file input doesn't have an associated form,                                                    // 573\n        // use the default widget file input's form:                                                                   // 574\n        if (!options.form.length) {                                                                                    // 575\n          options.form = $(this.options.fileInput.prop('form'));                                                       // 576\n        }                                                                                                              // 577\n      }                                                                                                                // 578\n      options.paramName = this._getParamName(options);                                                                 // 579\n      if (!options.url) {                                                                                              // 580\n        options.url = options.form.prop('action') || location.href;                                                    // 581\n      }                                                                                                                // 582\n      // The HTTP request method must be \"POST\" or \"PUT\":                                                              // 583\n      options.type = (options.type ||                                                                                  // 584\n      ($.type(options.form.prop('method')) === 'string' &&                                                             // 585\n      options.form.prop('method')) || ''                                                                               // 586\n      ).toUpperCase();                                                                                                 // 587\n      if (options.type !== 'POST' && options.type !== 'PUT' &&                                                         // 588\n        options.type !== 'PATCH') {                                                                                    // 589\n        options.type = 'POST';                                                                                         // 590\n      }                                                                                                                // 591\n      if (!options.formAcceptCharset) {                                                                                // 592\n        options.formAcceptCharset = options.form.attr('accept-charset');                                               // 593\n      }                                                                                                                // 594\n    },                                                                                                                 // 595\n                                                                                                                       // 596\n    _getAJAXSettings: function (data) {                                                                                // 597\n      var options = $.extend({}, this.options, data);                                                                  // 598\n      this._initFormSettings(options);                                                                                 // 599\n      this._initDataSettings(options);                                                                                 // 600\n      return options;                                                                                                  // 601\n    },                                                                                                                 // 602\n                                                                                                                       // 603\n    // jQuery 1.6 doesn't provide .state(),                                                                            // 604\n    // while jQuery 1.8+ removed .isRejected() and .isResolved():                                                      // 605\n    _getDeferredState: function (deferred) {                                                                           // 606\n      if (deferred.state) {                                                                                            // 607\n        return deferred.state();                                                                                       // 608\n      }                                                                                                                // 609\n      if (deferred.isResolved()) {                                                                                     // 610\n        return 'resolved';                                                                                             // 611\n      }                                                                                                                // 612\n      if (deferred.isRejected()) {                                                                                     // 613\n        return 'rejected';                                                                                             // 614\n      }                                                                                                                // 615\n      return 'pending';                                                                                                // 616\n    },                                                                                                                 // 617\n                                                                                                                       // 618\n    // Maps jqXHR callbacks to the equivalent                                                                          // 619\n    // methods of the given Promise object:                                                                            // 620\n    _enhancePromise: function (promise) {                                                                              // 621\n      promise.success = promise.done;                                                                                  // 622\n      promise.error = promise.fail;                                                                                    // 623\n      promise.complete = promise.always;                                                                               // 624\n      return promise;                                                                                                  // 625\n    },                                                                                                                 // 626\n                                                                                                                       // 627\n    // Creates and returns a Promise object enhanced with                                                              // 628\n    // the jqXHR methods abort, success, error and complete:                                                           // 629\n    _getXHRPromise: function (resolveOrReject, context, args) {                                                        // 630\n      var dfd = $.Deferred(),                                                                                          // 631\n        promise = dfd.promise();                                                                                       // 632\n      context = context || this.options.context || promise;                                                            // 633\n      if (resolveOrReject === true) {                                                                                  // 634\n        dfd.resolveWith(context, args);                                                                                // 635\n      } else if (resolveOrReject === false) {                                                                          // 636\n        dfd.rejectWith(context, args);                                                                                 // 637\n      }                                                                                                                // 638\n      promise.abort = dfd.promise;                                                                                     // 639\n      return this._enhancePromise(promise);                                                                            // 640\n    },                                                                                                                 // 641\n                                                                                                                       // 642\n    // Adds convenience methods to the data callback argument:                                                         // 643\n    _addConvenienceMethods: function (e, data) {                                                                       // 644\n      var that = this,                                                                                                 // 645\n        getPromise = function (args) {                                                                                 // 646\n          return $.Deferred().resolveWith(that, args).promise();                                                       // 647\n        };                                                                                                             // 648\n      data.process = function (resolveFunc, rejectFunc) {                                                              // 649\n        if (resolveFunc || rejectFunc) {                                                                               // 650\n          data._processQueue = this._processQueue =                                                                    // 651\n            (this._processQueue || getPromise([this])).pipe(                                                           // 652\n              function () {                                                                                            // 653\n                if (data.errorThrown) {                                                                                // 654\n                  return $.Deferred()                                                                                  // 655\n                    .rejectWith(that, [data]).promise();                                                               // 656\n                }                                                                                                      // 657\n                return getPromise(arguments);                                                                          // 658\n              }                                                                                                        // 659\n            ).pipe(resolveFunc, rejectFunc);                                                                           // 660\n        }                                                                                                              // 661\n        return this._processQueue || getPromise([this]);                                                               // 662\n      };                                                                                                               // 663\n      data.submit = function () {                                                                                      // 664\n        if (this.state() !== 'pending') {                                                                              // 665\n          data.jqXHR = this.jqXHR =                                                                                    // 666\n            (that._trigger(                                                                                            // 667\n              'submit',                                                                                                // 668\n              $.Event('submit', {delegatedEvent: e}),                                                                  // 669\n              this                                                                                                     // 670\n            ) !== false) && that._onSend(e, this);                                                                     // 671\n        }                                                                                                              // 672\n        return this.jqXHR || that._getXHRPromise();                                                                    // 673\n      };                                                                                                               // 674\n      data.abort = function () {                                                                                       // 675\n        if (this.jqXHR) {                                                                                              // 676\n          return this.jqXHR.abort();                                                                                   // 677\n        }                                                                                                              // 678\n        this.errorThrown = 'abort';                                                                                    // 679\n        that._trigger('fail', null, this);                                                                             // 680\n        return that._getXHRPromise(false);                                                                             // 681\n      };                                                                                                               // 682\n      data.state = function () {                                                                                       // 683\n        if (this.jqXHR) {                                                                                              // 684\n          return that._getDeferredState(this.jqXHR);                                                                   // 685\n        }                                                                                                              // 686\n        if (this._processQueue) {                                                                                      // 687\n          return that._getDeferredState(this._processQueue);                                                           // 688\n        }                                                                                                              // 689\n      };                                                                                                               // 690\n      data.processing = function () {                                                                                  // 691\n        return !this.jqXHR && this._processQueue && that                                                               // 692\n            ._getDeferredState(this._processQueue) === 'pending';                                                      // 693\n      };                                                                                                               // 694\n      data.progress = function () {                                                                                    // 695\n        return this._progress;                                                                                         // 696\n      };                                                                                                               // 697\n      data.response = function () {                                                                                    // 698\n        return this._response;                                                                                         // 699\n      };                                                                                                               // 700\n    },                                                                                                                 // 701\n                                                                                                                       // 702\n    // Parses the Range header from the server response                                                                // 703\n    // and returns the uploaded bytes:                                                                                 // 704\n    _getUploadedBytes: function (jqXHR) {                                                                              // 705\n      var range = jqXHR.getResponseHeader('Range'),                                                                    // 706\n        parts = range && range.split('-'),                                                                             // 707\n        upperBytesPos = parts && parts.length > 1 &&                                                                   // 708\n          parseInt(parts[1], 10);                                                                                      // 709\n      return upperBytesPos && upperBytesPos + 1;                                                                       // 710\n    },                                                                                                                 // 711\n                                                                                                                       // 712\n    // Uploads a file in multiple, sequential requests                                                                 // 713\n    // by splitting the file up in multiple blob chunks.                                                               // 714\n    // If the second parameter is true, only tests if the file                                                         // 715\n    // should be uploaded in chunks, but does not invoke any                                                           // 716\n    // upload requests:                                                                                                // 717\n    _chunkedUpload: function (options, testOnly) {                                                                     // 718\n      options.uploadedBytes = options.uploadedBytes || 0;                                                              // 719\n      var that = this,                                                                                                 // 720\n        file = options.files[0],                                                                                       // 721\n        fs = file.size,                                                                                                // 722\n        ub = options.uploadedBytes,                                                                                    // 723\n        mcs = options.maxChunkSize || fs,                                                                              // 724\n        slice = this._blobSlice,                                                                                       // 725\n        dfd = $.Deferred(),                                                                                            // 726\n        promise = dfd.promise(),                                                                                       // 727\n        jqXHR,                                                                                                         // 728\n        upload;                                                                                                        // 729\n      if (!(this._isXHRUpload(options) && slice && (ub || mcs < fs)) ||                                                // 730\n        options.data) {                                                                                                // 731\n        return false;                                                                                                  // 732\n      }                                                                                                                // 733\n      if (testOnly) {                                                                                                  // 734\n        return true;                                                                                                   // 735\n      }                                                                                                                // 736\n      if (ub >= fs) {                                                                                                  // 737\n        file.error = options.i18n('uploadedBytes');                                                                    // 738\n        return this._getXHRPromise(                                                                                    // 739\n          false,                                                                                                       // 740\n          options.context,                                                                                             // 741\n          [null, 'error', file.error]                                                                                  // 742\n        );                                                                                                             // 743\n      }                                                                                                                // 744\n      // The chunk upload method:                                                                                      // 745\n      upload = function () {                                                                                           // 746\n        // Clone the options object for each chunk upload:                                                             // 747\n        var o = $.extend({}, options),                                                                                 // 748\n          currentLoaded = o._progress.loaded;                                                                          // 749\n        o.blob = slice.call(                                                                                           // 750\n          file,                                                                                                        // 751\n          ub,                                                                                                          // 752\n          ub + mcs,                                                                                                    // 753\n          file.type                                                                                                    // 754\n        );                                                                                                             // 755\n        // Store the current chunk size, as the blob itself                                                            // 756\n        // will be dereferenced after data processing:                                                                 // 757\n        o.chunkSize = o.blob.size;                                                                                     // 758\n        // Expose the chunk bytes position range:                                                                      // 759\n        o.contentRange = 'bytes ' + ub + '-' +                                                                         // 760\n        (ub + o.chunkSize - 1) + '/' + fs;                                                                             // 761\n        // Process the upload data (the blob and potential form data):                                                 // 762\n        that._initXHRData(o);                                                                                          // 763\n        // Add progress listeners for this chunk upload:                                                               // 764\n        that._initProgressListener(o);                                                                                 // 765\n        jqXHR = ((that._trigger('chunksend', null, o) !== false && $.ajax(o)) ||                                       // 766\n        that._getXHRPromise(false, o.context))                                                                         // 767\n          .done(function (result, textStatus, jqXHR) {                                                                 // 768\n            ub = that._getUploadedBytes(jqXHR) ||                                                                      // 769\n            (ub + o.chunkSize);                                                                                        // 770\n            // Create a progress event if no final progress event                                                      // 771\n            // with loaded equaling total has been triggered                                                           // 772\n            // for this chunk:                                                                                         // 773\n            if (currentLoaded + o.chunkSize - o._progress.loaded) {                                                    // 774\n              that._onProgress($.Event('progress', {                                                                   // 775\n                lengthComputable: true,                                                                                // 776\n                loaded: ub - o.uploadedBytes,                                                                          // 777\n                total: ub - o.uploadedBytes                                                                            // 778\n              }), o);                                                                                                  // 779\n            }                                                                                                          // 780\n            options.uploadedBytes = o.uploadedBytes = ub;                                                              // 781\n            o.result = result;                                                                                         // 782\n            o.textStatus = textStatus;                                                                                 // 783\n            o.jqXHR = jqXHR;                                                                                           // 784\n            that._trigger('chunkdone', null, o);                                                                       // 785\n            that._trigger('chunkalways', null, o);                                                                     // 786\n            if (ub < fs) {                                                                                             // 787\n              // File upload not yet complete,                                                                         // 788\n              // continue with the next chunk:                                                                         // 789\n              upload();                                                                                                // 790\n            } else {                                                                                                   // 791\n              dfd.resolveWith(                                                                                         // 792\n                o.context,                                                                                             // 793\n                [result, textStatus, jqXHR]                                                                            // 794\n              );                                                                                                       // 795\n            }                                                                                                          // 796\n          })                                                                                                           // 797\n          .fail(function (jqXHR, textStatus, errorThrown) {                                                            // 798\n            o.jqXHR = jqXHR;                                                                                           // 799\n            o.textStatus = textStatus;                                                                                 // 800\n            o.errorThrown = errorThrown;                                                                               // 801\n            that._trigger('chunkfail', null, o);                                                                       // 802\n            that._trigger('chunkalways', null, o);                                                                     // 803\n            dfd.rejectWith(                                                                                            // 804\n              o.context,                                                                                               // 805\n              [jqXHR, textStatus, errorThrown]                                                                         // 806\n            );                                                                                                         // 807\n          });                                                                                                          // 808\n      };                                                                                                               // 809\n      this._enhancePromise(promise);                                                                                   // 810\n      promise.abort = function () {                                                                                    // 811\n        return jqXHR.abort();                                                                                          // 812\n      };                                                                                                               // 813\n      upload();                                                                                                        // 814\n      return promise;                                                                                                  // 815\n    },                                                                                                                 // 816\n                                                                                                                       // 817\n    _beforeSend: function (e, data) {                                                                                  // 818\n      if (this._active === 0) {                                                                                        // 819\n        // the start callback is triggered when an upload starts                                                       // 820\n        // and no other uploads are currently running,                                                                 // 821\n        // equivalent to the global ajaxStart event:                                                                   // 822\n        this._trigger('start');                                                                                        // 823\n        // Set timer for global bitrate progress calculation:                                                          // 824\n        this._bitrateTimer = new this._BitrateTimer();                                                                 // 825\n        // Reset the global progress values:                                                                           // 826\n        this._progress.loaded = this._progress.total = 0;                                                              // 827\n        this._progress.bitrate = 0;                                                                                    // 828\n      }                                                                                                                // 829\n      // Make sure the container objects for the .response() and                                                       // 830\n      // .progress() methods on the data object are available                                                          // 831\n      // and reset to their initial state:                                                                             // 832\n      this._initResponseObject(data);                                                                                  // 833\n      this._initProgressObject(data);                                                                                  // 834\n      data._progress.loaded = data.loaded = data.uploadedBytes || 0;                                                   // 835\n      data._progress.total = data.total = this._getTotal(data.files) || 1;                                             // 836\n      data._progress.bitrate = data.bitrate = 0;                                                                       // 837\n      this._active += 1;                                                                                               // 838\n      // Initialize the global progress values:                                                                        // 839\n      this._progress.loaded += data.loaded;                                                                            // 840\n      this._progress.total += data.total;                                                                              // 841\n    },                                                                                                                 // 842\n                                                                                                                       // 843\n    _onDone: function (result, textStatus, jqXHR, options) {                                                           // 844\n      var total = options._progress.total,                                                                             // 845\n        response = options._response;                                                                                  // 846\n      if (options._progress.loaded < total) {                                                                          // 847\n        // Create a progress event if no final progress event                                                          // 848\n        // with loaded equaling total has been triggered:                                                              // 849\n        this._onProgress($.Event('progress', {                                                                         // 850\n          lengthComputable: true,                                                                                      // 851\n          loaded: total,                                                                                               // 852\n          total: total                                                                                                 // 853\n        }), options);                                                                                                  // 854\n      }                                                                                                                // 855\n      response.result = options.result = result;                                                                       // 856\n      response.textStatus = options.textStatus = textStatus;                                                           // 857\n      response.jqXHR = options.jqXHR = jqXHR;                                                                          // 858\n      this._trigger('done', null, options);                                                                            // 859\n    },                                                                                                                 // 860\n                                                                                                                       // 861\n    _onFail: function (jqXHR, textStatus, errorThrown, options) {                                                      // 862\n      var response = options._response;                                                                                // 863\n      if (options.recalculateProgress) {                                                                               // 864\n        // Remove the failed (error or abort) file upload from                                                         // 865\n        // the global progress calculation:                                                                            // 866\n        this._progress.loaded -= options._progress.loaded;                                                             // 867\n        this._progress.total -= options._progress.total;                                                               // 868\n      }                                                                                                                // 869\n      response.jqXHR = options.jqXHR = jqXHR;                                                                          // 870\n      response.textStatus = options.textStatus = textStatus;                                                           // 871\n      response.errorThrown = options.errorThrown = errorThrown;                                                        // 872\n      this._trigger('fail', null, options);                                                                            // 873\n    },                                                                                                                 // 874\n                                                                                                                       // 875\n    _onAlways: function (jqXHRorResult, textStatus, jqXHRorError, options) {                                           // 876\n      // jqXHRorResult, textStatus and jqXHRorError are added to the                                                   // 877\n      // options object via done and fail callbacks                                                                    // 878\n      this._trigger('always', null, options);                                                                          // 879\n    },                                                                                                                 // 880\n                                                                                                                       // 881\n    _onSend: function (e, data) {                                                                                      // 882\n      if (!data.submit) {                                                                                              // 883\n        this._addConvenienceMethods(e, data);                                                                          // 884\n      }                                                                                                                // 885\n      var that = this,                                                                                                 // 886\n        jqXHR,                                                                                                         // 887\n        aborted,                                                                                                       // 888\n        slot,                                                                                                          // 889\n        pipe,                                                                                                          // 890\n        options = that._getAJAXSettings(data),                                                                         // 891\n        send = function () {                                                                                           // 892\n          that._sending += 1;                                                                                          // 893\n          // Set timer for bitrate progress calculation:                                                               // 894\n          options._bitrateTimer = new that._BitrateTimer();                                                            // 895\n          jqXHR = jqXHR || (                                                                                           // 896\n          ((aborted || that._trigger(                                                                                  // 897\n            'send',                                                                                                    // 898\n            $.Event('send', {delegatedEvent: e}),                                                                      // 899\n            options                                                                                                    // 900\n          ) === false) &&                                                                                              // 901\n          that._getXHRPromise(false, options.context, aborted)) ||                                                     // 902\n          that._chunkedUpload(options) || $.ajax(options)                                                              // 903\n          ).done(function (result, textStatus, jqXHR) {                                                                // 904\n              that._onDone(result, textStatus, jqXHR, options);                                                        // 905\n            }).fail(function (jqXHR, textStatus, errorThrown) {                                                        // 906\n              that._onFail(jqXHR, textStatus, errorThrown, options);                                                   // 907\n            }).always(function (jqXHRorResult, textStatus, jqXHRorError) {                                             // 908\n              that._onAlways(                                                                                          // 909\n                jqXHRorResult,                                                                                         // 910\n                textStatus,                                                                                            // 911\n                jqXHRorError,                                                                                          // 912\n                options                                                                                                // 913\n              );                                                                                                       // 914\n              that._sending -= 1;                                                                                      // 915\n              that._active -= 1;                                                                                       // 916\n              if (options.limitConcurrentUploads &&                                                                    // 917\n                options.limitConcurrentUploads > that._sending) {                                                      // 918\n                // Start the next queued upload,                                                                       // 919\n                // that has not been aborted:                                                                          // 920\n                var nextSlot = that._slots.shift();                                                                    // 921\n                while (nextSlot) {                                                                                     // 922\n                  if (that._getDeferredState(nextSlot) === 'pending') {                                                // 923\n                    nextSlot.resolve();                                                                                // 924\n                    break;                                                                                             // 925\n                  }                                                                                                    // 926\n                  nextSlot = that._slots.shift();                                                                      // 927\n                }                                                                                                      // 928\n              }                                                                                                        // 929\n              if (that._active === 0) {                                                                                // 930\n                // The stop callback is triggered when all uploads have                                                // 931\n                // been completed, equivalent to the global ajaxStop event:                                            // 932\n                that._trigger('stop');                                                                                 // 933\n              }                                                                                                        // 934\n            });                                                                                                        // 935\n          return jqXHR;                                                                                                // 936\n        };                                                                                                             // 937\n      this._beforeSend(e, options);                                                                                    // 938\n      if (this.options.sequentialUploads ||                                                                            // 939\n        (this.options.limitConcurrentUploads &&                                                                        // 940\n        this.options.limitConcurrentUploads <= this._sending)) {                                                       // 941\n        if (this.options.limitConcurrentUploads > 1) {                                                                 // 942\n          slot = $.Deferred();                                                                                         // 943\n          this._slots.push(slot);                                                                                      // 944\n          pipe = slot.pipe(send);                                                                                      // 945\n        } else {                                                                                                       // 946\n          this._sequence = this._sequence.pipe(send, send);                                                            // 947\n          pipe = this._sequence;                                                                                       // 948\n        }                                                                                                              // 949\n        // Return the piped Promise object, enhanced with an abort method,                                             // 950\n        // which is delegated to the jqXHR object of the current upload,                                               // 951\n        // and jqXHR callbacks mapped to the equivalent Promise methods:                                               // 952\n        pipe.abort = function () {                                                                                     // 953\n          aborted = [undefined, 'abort', 'abort'];                                                                     // 954\n          if (!jqXHR) {                                                                                                // 955\n            if (slot) {                                                                                                // 956\n              slot.rejectWith(options.context, aborted);                                                               // 957\n            }                                                                                                          // 958\n            return send();                                                                                             // 959\n          }                                                                                                            // 960\n          return jqXHR.abort();                                                                                        // 961\n        };                                                                                                             // 962\n        return this._enhancePromise(pipe);                                                                             // 963\n      }                                                                                                                // 964\n      return send();                                                                                                   // 965\n    },                                                                                                                 // 966\n                                                                                                                       // 967\n    _onAdd: function (e, data) {                                                                                       // 968\n      var that = this,                                                                                                 // 969\n        result = true,                                                                                                 // 970\n        options = $.extend({}, this.options, data),                                                                    // 971\n        files = data.files,                                                                                            // 972\n        filesLength = files.length,                                                                                    // 973\n        limit = options.limitMultiFileUploads,                                                                         // 974\n        limitSize = options.limitMultiFileUploadSize,                                                                  // 975\n        overhead = options.limitMultiFileUploadSizeOverhead,                                                           // 976\n        batchSize = 0,                                                                                                 // 977\n        paramName = this._getParamName(options),                                                                       // 978\n        paramNameSet,                                                                                                  // 979\n        paramNameSlice,                                                                                                // 980\n        fileSet,                                                                                                       // 981\n        i,                                                                                                             // 982\n        j = 0;                                                                                                         // 983\n      if (limitSize && (!filesLength || files[0].size === undefined)) {                                                // 984\n        limitSize = undefined;                                                                                         // 985\n      }                                                                                                                // 986\n      if (!(options.singleFileUploads || limit || limitSize) || !this._isXHRUpload(options)) {                         // 987\n        fileSet = [files];                                                                                             // 988\n        paramNameSet = [paramName];                                                                                    // 989\n      } else if (!(options.singleFileUploads || limitSize) && limit) {                                                 // 990\n        fileSet = [];                                                                                                  // 991\n        paramNameSet = [];                                                                                             // 992\n        for (i = 0; i < filesLength; i += limit) {                                                                     // 993\n          fileSet.push(files.slice(i, i + limit));                                                                     // 994\n          paramNameSlice = paramName.slice(i, i + limit);                                                              // 995\n          if (!paramNameSlice.length) {                                                                                // 996\n            paramNameSlice = paramName;                                                                                // 997\n          }                                                                                                            // 998\n          paramNameSet.push(paramNameSlice);                                                                           // 999\n        }                                                                                                              // 1000\n      } else if (!options.singleFileUploads && limitSize) {                                                            // 1001\n        fileSet = [];                                                                                                  // 1002\n        paramNameSet = [];                                                                                             // 1003\n        for (i = 0; i < filesLength; i = i + 1) {                                                                      // 1004\n          batchSize += files[i].size + overhead;                                                                       // 1005\n          if (i + 1 === filesLength ||                                                                                 // 1006\n            ((batchSize + files[i + 1].size + overhead) > limitSize) ||                                                // 1007\n            (limit && i + 1 - j >= limit)) {                                                                           // 1008\n            fileSet.push(files.slice(j, i + 1));                                                                       // 1009\n            paramNameSlice = paramName.slice(j, i + 1);                                                                // 1010\n            if (!paramNameSlice.length) {                                                                              // 1011\n              paramNameSlice = paramName;                                                                              // 1012\n            }                                                                                                          // 1013\n            paramNameSet.push(paramNameSlice);                                                                         // 1014\n            j = i + 1;                                                                                                 // 1015\n            batchSize = 0;                                                                                             // 1016\n          }                                                                                                            // 1017\n        }                                                                                                              // 1018\n      } else {                                                                                                         // 1019\n        paramNameSet = paramName;                                                                                      // 1020\n      }                                                                                                                // 1021\n      data.originalFiles = files;                                                                                      // 1022\n      $.each(fileSet || files, function (index, element) {                                                             // 1023\n        var newData = $.extend({}, data);                                                                              // 1024\n        newData.files = fileSet ? element : [element];                                                                 // 1025\n        newData.paramName = paramNameSet[index];                                                                       // 1026\n        that._initResponseObject(newData);                                                                             // 1027\n        that._initProgressObject(newData);                                                                             // 1028\n        that._addConvenienceMethods(e, newData);                                                                       // 1029\n        result = that._trigger(                                                                                        // 1030\n          'add',                                                                                                       // 1031\n          $.Event('add', {delegatedEvent: e}),                                                                         // 1032\n          newData                                                                                                      // 1033\n        );                                                                                                             // 1034\n        return result;                                                                                                 // 1035\n      });                                                                                                              // 1036\n      return result;                                                                                                   // 1037\n    },                                                                                                                 // 1038\n                                                                                                                       // 1039\n    _replaceFileInput: function (data) {                                                                               // 1040\n      var input = data.fileInput,                                                                                      // 1041\n        inputClone = input.clone(true);                                                                                // 1042\n      // Add a reference for the new cloned file input to the data argument:                                           // 1043\n      data.fileInputClone = inputClone;                                                                                // 1044\n      $('<form></form>').append(inputClone)[0].reset();                                                                // 1045\n      // Detaching allows to insert the fileInput on another form                                                      // 1046\n      // without loosing the file input value:                                                                         // 1047\n      input.after(inputClone).detach();                                                                                // 1048\n      // Avoid memory leaks with the detached file input:                                                              // 1049\n      $.cleanData(input.unbind('remove'));                                                                             // 1050\n      // Replace the original file input element in the fileInput                                                      // 1051\n      // elements set with the clone, which has been copied including                                                  // 1052\n      // event handlers:                                                                                               // 1053\n      this.options.fileInput = this.options.fileInput.map(function (i, el) {                                           // 1054\n        if (el === input[0]) {                                                                                         // 1055\n          return inputClone[0];                                                                                        // 1056\n        }                                                                                                              // 1057\n        return el;                                                                                                     // 1058\n      });                                                                                                              // 1059\n      // If the widget has been initialized on the file input itself,                                                  // 1060\n      // override this.element with the file input clone:                                                              // 1061\n      if (input[0] === this.element[0]) {                                                                              // 1062\n        this.element = inputClone;                                                                                     // 1063\n      }                                                                                                                // 1064\n    },                                                                                                                 // 1065\n                                                                                                                       // 1066\n    _handleFileTreeEntry: function (entry, path) {                                                                     // 1067\n      var that = this,                                                                                                 // 1068\n        dfd = $.Deferred(),                                                                                            // 1069\n        errorHandler = function (e) {                                                                                  // 1070\n          if (e && !e.entry) {                                                                                         // 1071\n            e.entry = entry;                                                                                           // 1072\n          }                                                                                                            // 1073\n          // Since $.when returns immediately if one                                                                   // 1074\n          // Deferred is rejected, we use resolve instead.                                                             // 1075\n          // This allows valid files and invalid items                                                                 // 1076\n          // to be returned together in one set:                                                                       // 1077\n          dfd.resolve([e]);                                                                                            // 1078\n        },                                                                                                             // 1079\n        successHandler = function (entries) {                                                                          // 1080\n          that._handleFileTreeEntries(                                                                                 // 1081\n            entries,                                                                                                   // 1082\n            path + entry.name + '/'                                                                                    // 1083\n          ).done(function (files) {                                                                                    // 1084\n              dfd.resolve(files);                                                                                      // 1085\n            }).fail(errorHandler);                                                                                     // 1086\n        },                                                                                                             // 1087\n        readEntries = function () {                                                                                    // 1088\n          dirReader.readEntries(function (results) {                                                                   // 1089\n            if (!results.length) {                                                                                     // 1090\n              successHandler(entries);                                                                                 // 1091\n            } else {                                                                                                   // 1092\n              entries = entries.concat(results);                                                                       // 1093\n              readEntries();                                                                                           // 1094\n            }                                                                                                          // 1095\n          }, errorHandler);                                                                                            // 1096\n        },                                                                                                             // 1097\n        dirReader, entries = [];                                                                                       // 1098\n      path = path || '';                                                                                               // 1099\n      if (entry.isFile) {                                                                                              // 1100\n        if (entry._file) {                                                                                             // 1101\n          // Workaround for Chrome bug #149735                                                                         // 1102\n          entry._file.relativePath = path;                                                                             // 1103\n          dfd.resolve(entry._file);                                                                                    // 1104\n        } else {                                                                                                       // 1105\n          entry.file(function (file) {                                                                                 // 1106\n            file.relativePath = path;                                                                                  // 1107\n            dfd.resolve(file);                                                                                         // 1108\n          }, errorHandler);                                                                                            // 1109\n        }                                                                                                              // 1110\n      } else if (entry.isDirectory) {                                                                                  // 1111\n        dirReader = entry.createReader();                                                                              // 1112\n        readEntries();                                                                                                 // 1113\n      } else {                                                                                                         // 1114\n        // Return an empy list for file system items                                                                   // 1115\n        // other than files or directories:                                                                            // 1116\n        dfd.resolve([]);                                                                                               // 1117\n      }                                                                                                                // 1118\n      return dfd.promise();                                                                                            // 1119\n    },                                                                                                                 // 1120\n                                                                                                                       // 1121\n    _handleFileTreeEntries: function (entries, path) {                                                                 // 1122\n      var that = this;                                                                                                 // 1123\n      return $.when.apply(                                                                                             // 1124\n        $,                                                                                                             // 1125\n        $.map(entries, function (entry) {                                                                              // 1126\n          return that._handleFileTreeEntry(entry, path);                                                               // 1127\n        })                                                                                                             // 1128\n      ).pipe(function () {                                                                                             // 1129\n          return Array.prototype.concat.apply(                                                                         // 1130\n            [],                                                                                                        // 1131\n            arguments                                                                                                  // 1132\n          );                                                                                                           // 1133\n        });                                                                                                            // 1134\n    },                                                                                                                 // 1135\n                                                                                                                       // 1136\n    _getDroppedFiles: function (dataTransfer) {                                                                        // 1137\n      dataTransfer = dataTransfer || {};                                                                               // 1138\n      var items = dataTransfer.items;                                                                                  // 1139\n      if (items && items.length && (items[0].webkitGetAsEntry ||                                                       // 1140\n        items[0].getAsEntry)) {                                                                                        // 1141\n        return this._handleFileTreeEntries(                                                                            // 1142\n          $.map(items, function (item) {                                                                               // 1143\n            var entry;                                                                                                 // 1144\n            if (item.webkitGetAsEntry) {                                                                               // 1145\n              entry = item.webkitGetAsEntry();                                                                         // 1146\n              if (entry) {                                                                                             // 1147\n                // Workaround for Chrome bug #149735:                                                                  // 1148\n                entry._file = item.getAsFile();                                                                        // 1149\n              }                                                                                                        // 1150\n              return entry;                                                                                            // 1151\n            }                                                                                                          // 1152\n            return item.getAsEntry();                                                                                  // 1153\n          })                                                                                                           // 1154\n        );                                                                                                             // 1155\n      }                                                                                                                // 1156\n      return $.Deferred().resolve(                                                                                     // 1157\n        $.makeArray(dataTransfer.files)                                                                                // 1158\n      ).promise();                                                                                                     // 1159\n    },                                                                                                                 // 1160\n                                                                                                                       // 1161\n    _getSingleFileInputFiles: function (fileInput) {                                                                   // 1162\n      fileInput = $(fileInput);                                                                                        // 1163\n      var entries = fileInput.prop('webkitEntries') ||                                                                 // 1164\n          fileInput.prop('entries'),                                                                                   // 1165\n        files,                                                                                                         // 1166\n        value;                                                                                                         // 1167\n      if (entries && entries.length) {                                                                                 // 1168\n        return this._handleFileTreeEntries(entries);                                                                   // 1169\n      }                                                                                                                // 1170\n      files = $.makeArray(fileInput.prop('files'));                                                                    // 1171\n      if (!files.length) {                                                                                             // 1172\n        value = fileInput.prop('value');                                                                               // 1173\n        if (!value) {                                                                                                  // 1174\n          return $.Deferred().resolve([]).promise();                                                                   // 1175\n        }                                                                                                              // 1176\n        // If the files property is not available, the browser does not                                                // 1177\n        // support the File API and we add a pseudo File object with                                                   // 1178\n        // the input value as name with path information removed:                                                      // 1179\n        files = [{name: value.replace(/^.*\\\\/, '')}];                                                                  // 1180\n      } else if (files[0].name === undefined && files[0].fileName) {                                                   // 1181\n        // File normalization for Safari 4 and Firefox 3:                                                              // 1182\n        $.each(files, function (index, file) {                                                                         // 1183\n          file.name = file.fileName;                                                                                   // 1184\n          file.size = file.fileSize;                                                                                   // 1185\n        });                                                                                                            // 1186\n      }                                                                                                                // 1187\n      return $.Deferred().resolve(files).promise();                                                                    // 1188\n    },                                                                                                                 // 1189\n                                                                                                                       // 1190\n    _getFileInputFiles: function (fileInput) {                                                                         // 1191\n      if (!(fileInput instanceof $) || fileInput.length === 1) {                                                       // 1192\n        return this._getSingleFileInputFiles(fileInput);                                                               // 1193\n      }                                                                                                                // 1194\n      return $.when.apply(                                                                                             // 1195\n        $,                                                                                                             // 1196\n        $.map(fileInput, this._getSingleFileInputFiles)                                                                // 1197\n      ).pipe(function () {                                                                                             // 1198\n          return Array.prototype.concat.apply(                                                                         // 1199\n            [],                                                                                                        // 1200\n            arguments                                                                                                  // 1201\n          );                                                                                                           // 1202\n        });                                                                                                            // 1203\n    },                                                                                                                 // 1204\n                                                                                                                       // 1205\n    _onChange: function (e) {                                                                                          // 1206\n      var that = this,                                                                                                 // 1207\n        data = {                                                                                                       // 1208\n          fileInput: $(e.target),                                                                                      // 1209\n          form: $(e.target.form)                                                                                       // 1210\n        };                                                                                                             // 1211\n      this._getFileInputFiles(data.fileInput).always(function (files) {                                                // 1212\n        data.files = files;                                                                                            // 1213\n        if (that.options.replaceFileInput) {                                                                           // 1214\n          that._replaceFileInput(data);                                                                                // 1215\n        }                                                                                                              // 1216\n        if (that._trigger(                                                                                             // 1217\n            'change',                                                                                                  // 1218\n            $.Event('change', {delegatedEvent: e}),                                                                    // 1219\n            data                                                                                                       // 1220\n          ) !== false) {                                                                                               // 1221\n          that._onAdd(e, data);                                                                                        // 1222\n        }                                                                                                              // 1223\n      });                                                                                                              // 1224\n    },                                                                                                                 // 1225\n                                                                                                                       // 1226\n    _onPaste: function (e) {                                                                                           // 1227\n      var items = e.originalEvent && e.originalEvent.clipboardData &&                                                  // 1228\n          e.originalEvent.clipboardData.items,                                                                         // 1229\n        data = {files: []};                                                                                            // 1230\n      if (items && items.length) {                                                                                     // 1231\n        $.each(items, function (index, item) {                                                                         // 1232\n          var file = item.getAsFile && item.getAsFile();                                                               // 1233\n          if (file) {                                                                                                  // 1234\n            data.files.push(file);                                                                                     // 1235\n          }                                                                                                            // 1236\n        });                                                                                                            // 1237\n        if (this._trigger(                                                                                             // 1238\n            'paste',                                                                                                   // 1239\n            $.Event('paste', {delegatedEvent: e}),                                                                     // 1240\n            data                                                                                                       // 1241\n          ) !== false) {                                                                                               // 1242\n          this._onAdd(e, data);                                                                                        // 1243\n        }                                                                                                              // 1244\n      }                                                                                                                // 1245\n    },                                                                                                                 // 1246\n                                                                                                                       // 1247\n    _onDrop: function (e) {                                                                                            // 1248\n      e.dataTransfer = e.originalEvent && e.originalEvent.dataTransfer;                                                // 1249\n      var that = this,                                                                                                 // 1250\n        dataTransfer = e.dataTransfer,                                                                                 // 1251\n        data = {};                                                                                                     // 1252\n      if (dataTransfer && dataTransfer.files && dataTransfer.files.length) {                                           // 1253\n        e.preventDefault();                                                                                            // 1254\n        this._getDroppedFiles(dataTransfer).always(function (files) {                                                  // 1255\n          data.files = files;                                                                                          // 1256\n          if (that._trigger(                                                                                           // 1257\n              'drop',                                                                                                  // 1258\n              $.Event('drop', {delegatedEvent: e}),                                                                    // 1259\n              data                                                                                                     // 1260\n            ) !== false) {                                                                                             // 1261\n            that._onAdd(e, data);                                                                                      // 1262\n          }                                                                                                            // 1263\n        });                                                                                                            // 1264\n      }                                                                                                                // 1265\n    },                                                                                                                 // 1266\n                                                                                                                       // 1267\n    _onDragOver: getDragHandler('dragover'),                                                                           // 1268\n                                                                                                                       // 1269\n    _onDragEnter: getDragHandler('dragenter'),                                                                         // 1270\n                                                                                                                       // 1271\n    _onDragLeave: getDragHandler('dragleave'),                                                                         // 1272\n                                                                                                                       // 1273\n    _initEventHandlers: function () {                                                                                  // 1274\n      if (this._isXHRUpload(this.options)) {                                                                           // 1275\n        this._on(this.options.dropZone, {                                                                              // 1276\n          dragover: this._onDragOver,                                                                                  // 1277\n          drop: this._onDrop,                                                                                          // 1278\n          // event.preventDefault() on dragenter is required for IE10+:                                                // 1279\n          dragenter: this._onDragEnter,                                                                                // 1280\n          // dragleave is not required, but added for completeness:                                                    // 1281\n          dragleave: this._onDragLeave                                                                                 // 1282\n        });                                                                                                            // 1283\n        this._on(this.options.pasteZone, {                                                                             // 1284\n          paste: this._onPaste                                                                                         // 1285\n        });                                                                                                            // 1286\n      }                                                                                                                // 1287\n      if ($.support.fileInput) {                                                                                       // 1288\n        this._on(this.options.fileInput, {                                                                             // 1289\n          change: this._onChange                                                                                       // 1290\n        });                                                                                                            // 1291\n      }                                                                                                                // 1292\n    },                                                                                                                 // 1293\n                                                                                                                       // 1294\n    _destroyEventHandlers: function () {                                                                               // 1295\n      this._off(this.options.dropZone, 'dragenter dragleave dragover drop');                                           // 1296\n      this._off(this.options.pasteZone, 'paste');                                                                      // 1297\n      this._off(this.options.fileInput, 'change');                                                                     // 1298\n    },                                                                                                                 // 1299\n                                                                                                                       // 1300\n    _setOption: function (key, value) {                                                                                // 1301\n      var reinit = $.inArray(key, this._specialOptions) !== -1;                                                        // 1302\n      if (reinit) {                                                                                                    // 1303\n        this._destroyEventHandlers();                                                                                  // 1304\n      }                                                                                                                // 1305\n      this._super(key, value);                                                                                         // 1306\n      if (reinit) {                                                                                                    // 1307\n        this._initSpecialOptions();                                                                                    // 1308\n        this._initEventHandlers();                                                                                     // 1309\n      }                                                                                                                // 1310\n    },                                                                                                                 // 1311\n                                                                                                                       // 1312\n    _initSpecialOptions: function () {                                                                                 // 1313\n      var options = this.options;                                                                                      // 1314\n      if (options.fileInput === undefined) {                                                                           // 1315\n        options.fileInput = this.element.is('input[type=\"file\"]') ?                                                    // 1316\n          this.element : this.element.find('input[type=\"file\"]');                                                      // 1317\n      } else if (!(options.fileInput instanceof $)) {                                                                  // 1318\n        options.fileInput = $(options.fileInput);                                                                      // 1319\n      }                                                                                                                // 1320\n      if (!(options.dropZone instanceof $)) {                                                                          // 1321\n        options.dropZone = $(options.dropZone);                                                                        // 1322\n      }                                                                                                                // 1323\n      if (!(options.pasteZone instanceof $)) {                                                                         // 1324\n        options.pasteZone = $(options.pasteZone);                                                                      // 1325\n      }                                                                                                                // 1326\n    },                                                                                                                 // 1327\n                                                                                                                       // 1328\n    _getRegExp: function (str) {                                                                                       // 1329\n      var parts = str.split('/'),                                                                                      // 1330\n        modifiers = parts.pop();                                                                                       // 1331\n      parts.shift();                                                                                                   // 1332\n      return new RegExp(parts.join('/'), modifiers);                                                                   // 1333\n    },                                                                                                                 // 1334\n                                                                                                                       // 1335\n    _isRegExpOption: function (key, value) {                                                                           // 1336\n      return key !== 'url' && $.type(value) === 'string' &&                                                            // 1337\n        /^\\/.*\\/[igm]{0,3}$/.test(value);                                                                              // 1338\n    },                                                                                                                 // 1339\n                                                                                                                       // 1340\n    _initDataAttributes: function () {                                                                                 // 1341\n      var that = this,                                                                                                 // 1342\n        options = this.options,                                                                                        // 1343\n        clone = $(this.element[0].cloneNode(false));                                                                   // 1344\n      // Initialize options set via HTML5 data-attributes:                                                             // 1345\n      $.each(                                                                                                          // 1346\n        clone.data(),                                                                                                  // 1347\n        function (key, value) {                                                                                        // 1348\n          var dataAttributeName = 'data-' +                                                                            // 1349\n              // Convert camelCase to hyphen-ated key:                                                                 // 1350\n            key.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();                                                     // 1351\n          if (clone.attr(dataAttributeName)) {                                                                         // 1352\n            if (that._isRegExpOption(key, value)) {                                                                    // 1353\n              value = that._getRegExp(value);                                                                          // 1354\n            }                                                                                                          // 1355\n            options[key] = value;                                                                                      // 1356\n          }                                                                                                            // 1357\n        }                                                                                                              // 1358\n      );                                                                                                               // 1359\n    },                                                                                                                 // 1360\n                                                                                                                       // 1361\n    _create: function () {                                                                                             // 1362\n      this._initDataAttributes();                                                                                      // 1363\n      this._initSpecialOptions();                                                                                      // 1364\n      this._slots = [];                                                                                                // 1365\n      this._sequence = this._getXHRPromise(true);                                                                      // 1366\n      this._sending = this._active = 0;                                                                                // 1367\n      this._initProgressObject(this);                                                                                  // 1368\n      this._initEventHandlers();                                                                                       // 1369\n    },                                                                                                                 // 1370\n                                                                                                                       // 1371\n    // This method is exposed to the widget API and allows to query                                                    // 1372\n    // the number of active uploads:                                                                                   // 1373\n    active: function () {                                                                                              // 1374\n      return this._active;                                                                                             // 1375\n    },                                                                                                                 // 1376\n                                                                                                                       // 1377\n    // This method is exposed to the widget API and allows to query                                                    // 1378\n    // the widget upload progress.                                                                                     // 1379\n    // It returns an object with loaded, total and bitrate properties                                                  // 1380\n    // for the running uploads:                                                                                        // 1381\n    progress: function () {                                                                                            // 1382\n      return this._progress;                                                                                           // 1383\n    },                                                                                                                 // 1384\n                                                                                                                       // 1385\n    // This method is exposed to the widget API and allows adding files                                                // 1386\n    // using the fileupload API. The data parameter accepts an object which                                            // 1387\n    // must have a files property and can contain additional options:                                                  // 1388\n    // .fileupload('add', {files: filesList});                                                                         // 1389\n    add: function (data) {                                                                                             // 1390\n      var that = this;                                                                                                 // 1391\n      if (!data || this.options.disabled) {                                                                            // 1392\n        return;                                                                                                        // 1393\n      }                                                                                                                // 1394\n      if (data.fileInput && !data.files) {                                                                             // 1395\n        this._getFileInputFiles(data.fileInput).always(function (files) {                                              // 1396\n          data.files = files;                                                                                          // 1397\n          that._onAdd(null, data);                                                                                     // 1398\n        });                                                                                                            // 1399\n      } else {                                                                                                         // 1400\n        data.files = $.makeArray(data.files);                                                                          // 1401\n        this._onAdd(null, data);                                                                                       // 1402\n      }                                                                                                                // 1403\n    },                                                                                                                 // 1404\n                                                                                                                       // 1405\n    // This method is exposed to the widget API and allows sending files                                               // 1406\n    // using the fileupload API. The data parameter accepts an object which                                            // 1407\n    // must have a files or fileInput property and can contain additional options:                                     // 1408\n    // .fileupload('send', {files: filesList});                                                                        // 1409\n    // The method returns a Promise object for the file upload call.                                                   // 1410\n    send: function (data) {                                                                                            // 1411\n      if (data && !this.options.disabled) {                                                                            // 1412\n        if (data.fileInput && !data.files) {                                                                           // 1413\n          var that = this,                                                                                             // 1414\n            dfd = $.Deferred(),                                                                                        // 1415\n            promise = dfd.promise(),                                                                                   // 1416\n            jqXHR,                                                                                                     // 1417\n            aborted;                                                                                                   // 1418\n          promise.abort = function () {                                                                                // 1419\n            aborted = true;                                                                                            // 1420\n            if (jqXHR) {                                                                                               // 1421\n              return jqXHR.abort();                                                                                    // 1422\n            }                                                                                                          // 1423\n            dfd.reject(null, 'abort', 'abort');                                                                        // 1424\n            return promise;                                                                                            // 1425\n          };                                                                                                           // 1426\n          this._getFileInputFiles(data.fileInput).always(                                                              // 1427\n            function (files) {                                                                                         // 1428\n              if (aborted) {                                                                                           // 1429\n                return;                                                                                                // 1430\n              }                                                                                                        // 1431\n              if (!files.length) {                                                                                     // 1432\n                dfd.reject();                                                                                          // 1433\n                return;                                                                                                // 1434\n              }                                                                                                        // 1435\n              data.files = files;                                                                                      // 1436\n              jqXHR = that._onSend(null, data);                                                                        // 1437\n              jqXHR.then(                                                                                              // 1438\n                function (result, textStatus, jqXHR) {                                                                 // 1439\n                  dfd.resolve(result, textStatus, jqXHR);                                                              // 1440\n                },                                                                                                     // 1441\n                function (jqXHR, textStatus, errorThrown) {                                                            // 1442\n                  dfd.reject(jqXHR, textStatus, errorThrown);                                                          // 1443\n                }                                                                                                      // 1444\n              );                                                                                                       // 1445\n            }                                                                                                          // 1446\n          );                                                                                                           // 1447\n          return this._enhancePromise(promise);                                                                        // 1448\n        }                                                                                                              // 1449\n        data.files = $.makeArray(data.files);                                                                          // 1450\n        if (data.files.length) {                                                                                       // 1451\n          return this._onSend(null, data);                                                                             // 1452\n        }                                                                                                              // 1453\n      }                                                                                                                // 1454\n      return this._getXHRPromise(false, data && data.context);                                                         // 1455\n    }                                                                                                                  // 1456\n                                                                                                                       // 1457\n  });                                                                                                                  // 1458\n                                                                                                                       // 1459\n}));                                                                                                                   // 1460\n                                                                                                                       // 1461\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/tomi_upload-jquery/templates/template.queueItem.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"queueItem\");                                                                                     // 2\nTemplate[\"queueItem\"] = new Template(\"Template.queueItem\", (function() {                                               // 3\n  var view = this;                                                                                                     // 4\n  return HTML.DIV({                                                                                                    // 5\n    \"class\": \"uploadPanel\",                                                                                            // 6\n    style: \"margin-top: 6px\"                                                                                           // 7\n  }, \"\\n        \", HTML.DIV({                                                                                          // 8\n    \"class\": function() {                                                                                              // 9\n      return Spacebars.mustache(view.lookup(\"class\"), \"progressOuter\");                                                // 10\n    }                                                                                                                  // 11\n  }, \"\\n            \", HTML.DIV({                                                                                      // 12\n    \"class\": function() {                                                                                              // 13\n      return Spacebars.mustache(view.lookup(\"class\"), \"progressInner\");                                                // 14\n    }                                                                                                                  // 15\n  }, \"\\n                \", HTML.DIV({                                                                                  // 16\n    \"class\": function() {                                                                                              // 17\n      return Spacebars.mustache(view.lookup(\"class\"), \"progressBar\");                                                  // 18\n    },                                                                                                                 // 19\n    role: \"progressbar\",                                                                                               // 20\n    \"aria-valuemin\": \"0\",                                                                                              // 21\n    \"aria-valuemax\": \"100\",                                                                                            // 22\n    style: function() {                                                                                                // 23\n      return Spacebars.mustache(view.lookup(\"progress\"));                                                              // 24\n    }                                                                                                                  // 25\n  }, \"\\n                    \", HTML.Raw(\"&nbsp;\"), \"\\n                \"), \"\\n                \", HTML.DIV({             // 26\n    \"class\": \"progress-label\"                                                                                          // 27\n  }, \"\\n                    \", Blaze.View(\"lookup:infoLabel\", function() {                                             // 28\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"infoLabel\")));                                            // 29\n  }), \"\\n                \"), \"\\n            \"), \"\\n        \"), \"\\n\\n        \", Blaze._TemplateWith(function() {        // 30\n    return {                                                                                                           // 31\n      state: Spacebars.call(view.lookup(\"buttonState\")),                                                               // 32\n      type: Spacebars.call(view.lookup(\"type\")),                                                                       // 33\n      uploadContext: Spacebars.call(view.lookup(\"uploadContext\")),                                                     // 34\n      name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"item\", \"name\"))                                            // 35\n    };                                                                                                                 // 36\n  }, function() {                                                                                                      // 37\n    return Spacebars.include(view.lookupTemplate(\"buttons\"));                                                          // 38\n  }), \"\\n    \");                                                                                                       // 39\n}));                                                                                                                   // 40\n                                                                                                                       // 41\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/tomi_upload-jquery/templates/queueItem.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate['queueItem'].helpers({                                                                                        // 1\n  'class': function(what) {                                                                                            // 2\n    return Uploader.UI[this.type][what] ;                                                                              // 3\n  },                                                                                                                   // 4\n  'infoLabel': function() {                                                                                            // 5\n    var progress = this.uploadContext.queue[this.item.name].get();                                                     // 6\n    return progress.running ?                                                                                          // 7\n      Uploader.formatProgress(this.item.name, progress.progress, progress.bitrate) :                                   // 8\n      (this.item.name + '&nbsp;<span style=\"font-size: smaller; color: grey\">' + bytesToSize(this.item.size) + '</span>');\n  },                                                                                                                   // 10\n  buttonState: function() {                                                                                            // 11\n    var that = this;                                                                                                   // 12\n    return {                                                                                                           // 13\n      'idle': function () {                                                                                            // 14\n        return !that.uploadContext.queue[that.item.name].get().running ||                                              // 15\n          that.uploadContext.queue[that.item.name].get().progress === 100;                                             // 16\n      },                                                                                                               // 17\n      'cancelled': function () {                                                                                       // 18\n        return that.uploadContext.queue[that.item.name].get().cancelled;                                               // 19\n      },                                                                                                               // 20\n      'waiting': function () {                                                                                         // 21\n        return that.uploadContext.queue[that.item.name].get().progress !== 100;                                        // 22\n      },                                                                                                               // 23\n      'removeFromQueue': function() {                                                                                  // 24\n        return true;                                                                                                   // 25\n      }                                                                                                                // 26\n    }                                                                                                                  // 27\n  },                                                                                                                   // 28\n  'progress': function() {                                                                                             // 29\n    return 'width:' + this.uploadContext.queue[this.item.name].get().progress + '%';                                   // 30\n  }                                                                                                                    // 31\n});                                                                                                                    // 32\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/tomi_upload-jquery/templates/template.upload.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"upload_bootstrap\");                                                                              // 2\nTemplate[\"upload_bootstrap\"] = new Template(\"Template.upload_bootstrap\", (function() {                                 // 3\n  var view = this;                                                                                                     // 4\n  return Blaze._TemplateWith(function() {                                                                              // 5\n    return {                                                                                                           // 6\n      type: Spacebars.call(\"bootstrap\"),                                                                               // 7\n      formData: Spacebars.call(view.lookup(\"formData\")),                                                               // 8\n      fileTypes: Spacebars.call(view.lookup(\"fileTypes\")),                                                             // 9\n      multiple: Spacebars.call(view.lookup(\"multiple\")),                                                               // 10\n      callbacks: Spacebars.call(view.lookup(\"callbacks\")),                                                             // 11\n      autoStart: Spacebars.call(view.lookup(\"autoStart\")),                                                             // 12\n      contentType: Spacebars.call(view.lookup(\"contentType\"))                                                          // 13\n    };                                                                                                                 // 14\n  }, function() {                                                                                                      // 15\n    return Spacebars.include(view.lookupTemplate(\"upload\"));                                                           // 16\n  });                                                                                                                  // 17\n}));                                                                                                                   // 18\n                                                                                                                       // 19\nTemplate.__checkName(\"upload_semanticUI\");                                                                             // 20\nTemplate[\"upload_semanticUI\"] = new Template(\"Template.upload_semanticUI\", (function() {                               // 21\n  var view = this;                                                                                                     // 22\n  return Blaze._TemplateWith(function() {                                                                              // 23\n    return {                                                                                                           // 24\n      type: Spacebars.call(\"semanticUI\"),                                                                              // 25\n      formData: Spacebars.call(view.lookup(\"formData\")),                                                               // 26\n      fileTypes: Spacebars.call(view.lookup(\"fileTypes\")),                                                             // 27\n      multiple: Spacebars.call(view.lookup(\"multiple\")),                                                               // 28\n      callbacks: Spacebars.call(view.lookup(\"callbacks\")),                                                             // 29\n      autoStart: Spacebars.call(view.lookup(\"autoStart\")),                                                             // 30\n      contentType: Spacebars.call(view.lookup(\"contentType\"))                                                          // 31\n    };                                                                                                                 // 32\n  }, function() {                                                                                                      // 33\n    return Spacebars.include(view.lookupTemplate(\"upload\"));                                                           // 34\n  });                                                                                                                  // 35\n}));                                                                                                                   // 36\n                                                                                                                       // 37\nTemplate.__checkName(\"upload\");                                                                                        // 38\nTemplate[\"upload\"] = new Template(\"Template.upload\", (function() {                                                     // 39\n  var view = this;                                                                                                     // 40\n  return HTML.FORM({                                                                                                   // 41\n    method: \"POST\",                                                                                                    // 42\n    enctype: \"multipart/form-data\"                                                                                     // 43\n  }, \"\\n\\n        \", HTML.DIV({                                                                                        // 44\n    \"class\": \"uploadPanel\"                                                                                             // 45\n  }, \"\\n            \", HTML.Raw(\"<!-- The fileinput-button span is used to style the file input field as button -->\"), \"\\n\\n            \", HTML.DIV({\n    \"class\": function() {                                                                                              // 47\n      return Spacebars.mustache(view.lookup(\"class\"), \"upload\");                                                       // 48\n    }                                                                                                                  // 49\n  }, \"\\n                \", Blaze.View(\"lookup:ut9n\", function() {                                                      // 50\n    return Spacebars.mustache(view.lookup(\"ut9n\"), \"browse\");                                                          // 51\n  }), HTML.Raw(\"&hellip;\"), \" \", HTML.INPUT({                                                                          // 52\n    type: \"file\",                                                                                                      // 53\n    \"class\": \"jqUploadclass\",                                                                                          // 54\n    multiple: function() {                                                                                             // 55\n      return Spacebars.mustache(view.lookup(\"multiple\"));                                                              // 56\n    },                                                                                                                 // 57\n    \"data-form-data\": function() {                                                                                     // 58\n      return Spacebars.mustache(view.lookup(\"submitData\"));                                                            // 59\n    },                                                                                                                 // 60\n    accept: function() {                                                                                               // 61\n      return Spacebars.mustache(view.lookup(\"fileTypes\"));                                                             // 62\n    }                                                                                                                  // 63\n  }), \"\\n            \"), \"\\n\\n            \", HTML.DIV({                                                                // 64\n    \"class\": function() {                                                                                              // 65\n      return Spacebars.mustache(view.lookup(\"class\"), \"progressOuter\");                                                // 66\n    }                                                                                                                  // 67\n  }, \"\\n                \", HTML.DIV({                                                                                  // 68\n    \"class\": function() {                                                                                              // 69\n      return Spacebars.mustache(view.lookup(\"class\"), \"progressInner\");                                                // 70\n    }                                                                                                                  // 71\n  }, \"\\n                    \", HTML.DIV({                                                                              // 72\n    \"class\": function() {                                                                                              // 73\n      return Spacebars.mustache(view.lookup(\"class\"), \"progressBar\");                                                  // 74\n    },                                                                                                                 // 75\n    role: \"progressbar\",                                                                                               // 76\n    \"aria-valuemin\": \"0\",                                                                                              // 77\n    \"aria-valuemax\": \"100\",                                                                                            // 78\n    style: function() {                                                                                                // 79\n      return Spacebars.mustache(view.lookup(\"progress\"));                                                              // 80\n    }                                                                                                                  // 81\n  }, \"\\n                        \", HTML.Raw(\"&nbsp;\"), \"\\n                    \"), \"\\n                    \", HTML.DIV({\n    \"class\": \"progress-label\"                                                                                          // 83\n  }, \"\\n                        \", Blaze.View(\"lookup:infoLabel\", function() {                                         // 84\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"infoLabel\")));                                            // 85\n  }), \"\\n                    \"), \"\\n                \"), \"\\n            \"), \"\\n\\n            \", Blaze._TemplateWith(function() {\n    return {                                                                                                           // 87\n      type: Spacebars.call(view.lookup(\"type\")),                                                                       // 88\n      state: Spacebars.call(view.lookup(\"buttonState\")),                                                               // 89\n      uploadContext: Spacebars.call(view.lookup(\"uploadContext\")),                                                     // 90\n      autoStart: Spacebars.call(view.lookup(\"autoStart\"))                                                              // 91\n    };                                                                                                                 // 92\n  }, function() {                                                                                                      // 93\n    return Spacebars.include(view.lookupTemplate(\"buttons\"));                                                          // 94\n  }), \"\\n        \"), \"\\n        \", Blaze.If(function() {                                                               // 95\n    return Spacebars.call(view.lookup(\"showQueue\"));                                                                   // 96\n  }, function() {                                                                                                      // 97\n    return [ \"\\n            \", HTML.DIV({                                                                              // 98\n      \"class\": \"panel panel-default\",                                                                                  // 99\n      style: \"margin-top: 1px; background: #efefef\"                                                                    // 100\n    }, \"\\n                \", HTML.DIV({                                                                                // 101\n      \"class\": \"panel-body\"                                                                                            // 102\n    }, \"\\n                    \", Blaze.Each(function() {                                                               // 103\n      return Spacebars.call(view.lookup(\"queueItems\"));                                                                // 104\n    }, function() {                                                                                                    // 105\n      return [ \"\\n                        \", Blaze._TemplateWith(function() {                                          // 106\n        return {                                                                                                       // 107\n          type: Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"type\")),                                              // 108\n          uploadContext: Spacebars.call(view.lookup(\"uploadContext\")),                                                 // 109\n          item: Spacebars.call(view.lookup(\".\"))                                                                       // 110\n        };                                                                                                             // 111\n      }, function() {                                                                                                  // 112\n        return Spacebars.include(view.lookupTemplate(\"queueItem\"));                                                    // 113\n      }), \"\\n                    \" ];                                                                                  // 114\n    }), \"\\n                \"), \"\\n            \"), \"\\n        \" ];                                                      // 115\n  }), \"\\n    \");                                                                                                       // 116\n}));                                                                                                                   // 117\n                                                                                                                       // 118\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/tomi_upload-jquery/templates/upload.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate.registerHelper('ut9n', function (key){                                                                        // 1\n    return Uploader.localisation[key];                                                                                 // 2\n});                                                                                                                    // 3\n                                                                                                                       // 4\n// each upload_multiple template instance holds its own local collection of files list                                 // 5\nTemplate['upload'].created = function () {                                                                             // 6\n  Uploader.init(this);                                                                                                 // 7\n                                                                                                                       // 8\n  // copy values to context                                                                                            // 9\n  if (this.data) {                                                                                                     // 10\n    this.autoStart = this.data.autoStart;                                                                              // 11\n  }                                                                                                                    // 12\n};                                                                                                                     // 13\n                                                                                                                       // 14\nTemplate['upload'].helpers({                                                                                           // 15\n  'class': function(where) {                                                                                           // 16\n    return Uploader.UI[this.type][where];                                                                              // 17\n  },                                                                                                                   // 18\n  'uploadContext': function() {                                                                                        // 19\n    return Template.instance();                                                                                        // 20\n  },                                                                                                                   // 21\n  'submitData': function() {                                                                                           // 22\n    if (this.formData) {                                                                                               // 23\n      this.formData['contentType'] = this.contentType;                                                                 // 24\n    } else {                                                                                                           // 25\n      this.formData = {contentType: this.contentType};                                                                 // 26\n    }                                                                                                                  // 27\n    return typeof this.formData == 'string' ? this.formData : JSON.stringify(this.formData);                           // 28\n  },                                                                                                                   // 29\n  'infoLabel': function() {                                                                                            // 30\n    var instance = Template.instance();                                                                                // 31\n                                                                                                                       // 32\n    var progress = instance.globalInfo.get();                                                                          // 33\n    var info = instance.info.get()                                                                                     // 34\n    // we may have not yet selected a file                                                                             // 35\n    if (!instance.info.get()) {                                                                                        // 36\n      return \"\";                                                                                                       // 37\n    }                                                                                                                  // 38\n                                                                                                                       // 39\n    return progress.running ?                                                                                          // 40\n      Uploader.formatProgress(info.name, progress.progress, progress.bitrate) :                                        // 41\n      (info.name + '&nbsp;<span style=\"font-size: smaller; color: #333\">' + bytesToSize(info.size) + '</span>');       // 42\n  },                                                                                                                   // 43\n  'progress': function() {                                                                                             // 44\n    return 'width:' + Template.instance().globalInfo.get().progress + '%';                                             // 45\n  },                                                                                                                   // 46\n  buttonState: function() {                                                                                            // 47\n    var that = Template.instance();                                                                                    // 48\n    return {                                                                                                           // 49\n      'idle': function () {                                                                                            // 50\n        return !that.globalInfo.get().running;                                                                         // 51\n      },                                                                                                               // 52\n      'cancelled': function () {                                                                                       // 53\n        return that.globalInfo.get().cancelled;                                                                        // 54\n      },                                                                                                               // 55\n      'waiting': function () {                                                                                         // 56\n        return that.globalInfo.get().progress !== 100;                                                                 // 57\n      },                                                                                                               // 58\n      'removeFromQueue': function() {                                                                                  // 59\n        return false;                                                                                                  // 60\n      }                                                                                                                // 61\n    }                                                                                                                  // 62\n  },                                                                                                                   // 63\n  'queueItems': function() {                                                                                           // 64\n    return Template.instance().queueView.get();                                                                        // 65\n  },                                                                                                                   // 66\n  'showQueue': function() {                                                                                            // 67\n    return Template.instance().queueView.get().length > 1;                                                             // 68\n  }                                                                                                                    // 69\n});                                                                                                                    // 70\n                                                                                                                       // 71\nTemplate['upload'].rendered = function () {                                                                            // 72\n  Uploader.render.call(this);                                                                                          // 73\n};                                                                                                                     // 74\n                                                                                                                       // 75\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/tomi_upload-jquery/templates/template.buttons.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"buttons\");                                                                                       // 2\nTemplate[\"buttons\"] = new Template(\"Template.buttons\", (function() {                                                   // 3\n  var view = this;                                                                                                     // 4\n  return Blaze.If(function() {                                                                                         // 5\n    return Spacebars.call(view.lookup(\"idle\"));                                                                        // 6\n  }, function() {                                                                                                      // 7\n    return [ \"\\n        \", Blaze.If(function() {                                                                       // 8\n      return Spacebars.call(view.lookup(\"cancelled\"));                                                                 // 9\n    }, function() {                                                                                                    // 10\n      return [ \"\\n            \", HTML.DIV({                                                                            // 11\n        \"class\": function() {                                                                                          // 12\n          return Spacebars.mustache(view.lookup(\"class\"), \"cancelledButton\");                                          // 13\n        }                                                                                                              // 14\n      }, \"\\n                \", HTML.I({                                                                                // 15\n        \"class\": function() {                                                                                          // 16\n          return Spacebars.mustache(view.lookup(\"class\"), \"cancelledButtonIcon\");                                      // 17\n        }                                                                                                              // 18\n      }), \"\\n                \", HTML.SPAN(Blaze.View(\"lookup:ut9n\", function() {                                       // 19\n        return Spacebars.mustache(view.lookup(\"ut9n\"), \"cancelled\");                                                   // 20\n      })), \"\\n            \"), \"\\n        \" ];                                                                          // 21\n    }, function() {                                                                                                    // 22\n      return [ \"\\n            \", Blaze.If(function() {                                                                 // 23\n        return Spacebars.call(view.lookup(\"waiting\"));                                                                 // 24\n      }, function() {                                                                                                  // 25\n        return [ \"\\n                \", Blaze.If(function() {                                                           // 26\n          return Spacebars.call(view.lookup(\"removeFromQueue\"));                                                       // 27\n        }, function() {                                                                                                // 28\n          return [ \"\\n                    \", HTML.DIV({                                                                // 29\n            type: \"submit\",                                                                                            // 30\n            \"class\": function() {                                                                                      // 31\n              return Spacebars.mustache(view.lookup(\"class\"), \"removeButton\");                                         // 32\n            }                                                                                                          // 33\n          }, \"\\n                        \", HTML.I({                                                                    // 34\n            \"class\": function() {                                                                                      // 35\n              return Spacebars.mustache(view.lookup(\"class\"), \"removeButtonIcon\");                                     // 36\n            }                                                                                                          // 37\n          }), \"\\n                        \", HTML.SPAN(Blaze.View(\"lookup:ut9n\", function() {                           // 38\n            return Spacebars.mustache(view.lookup(\"ut9n\"), \"remove\");                                                  // 39\n          })), \"\\n                    \"), \"\\n                \" ];                                                      // 40\n        }, function() {                                                                                                // 41\n          return [ \"\\n                    \", Blaze.Unless(function() {                                                 // 42\n            return Spacebars.call(view.lookup(\"autoStart\"));                                                           // 43\n          }, function() {                                                                                              // 44\n            return [ \"\\n                        \", HTML.DIV({                                                          // 45\n              type: \"submit\",                                                                                          // 46\n              \"class\": function() {                                                                                    // 47\n                return Spacebars.mustache(view.lookup(\"class\"), \"startButton\");                                        // 48\n              }                                                                                                        // 49\n            }, \"\\n                            \", HTML.I({                                                              // 50\n              \"class\": function() {                                                                                    // 51\n                return Spacebars.mustache(view.lookup(\"class\"), \"startButtonIcon\");                                    // 52\n              }                                                                                                        // 53\n            }), \"\\n                            \", HTML.SPAN(Blaze.View(\"lookup:ut9n\", function() {                     // 54\n              return Spacebars.mustache(view.lookup(\"ut9n\"), \"upload\");                                                // 55\n            })), \"\\n                        \"), \"\\n                    \" ];                                            // 56\n          }), \"\\n                \" ];                                                                                  // 57\n        }), \"\\n            \" ];                                                                                        // 58\n      }, function() {                                                                                                  // 59\n        return [ \"\\n                \", HTML.DIV({                                                                      // 60\n          \"class\": function() {                                                                                        // 61\n            return Spacebars.mustache(view.lookup(\"class\"), \"doneButton\");                                             // 62\n          }                                                                                                            // 63\n        }, \"\\n                    \", HTML.I({                                                                          // 64\n          \"class\": function() {                                                                                        // 65\n            return Spacebars.mustache(view.lookup(\"class\"), \"doneButtonIcon\");                                         // 66\n          }                                                                                                            // 67\n        }), \"\\n                    \", Blaze.View(\"lookup:ut9n\", function() {                                           // 68\n          return Spacebars.mustache(view.lookup(\"ut9n\"), \"done\");                                                      // 69\n        }), \"\\n                \"), \"\\n            \" ];                                                                 // 70\n      }), \"\\n        \" ];                                                                                              // 71\n    }), \"\\n    \" ];                                                                                                    // 72\n  }, function() {                                                                                                      // 73\n    return [ \"\\n        \", HTML.DIV({                                                                                  // 74\n      \"class\": function() {                                                                                            // 75\n        return Spacebars.mustache(view.lookup(\"class\"), \"cancelButton\");                                               // 76\n      }                                                                                                                // 77\n    }, \"\\n            \", HTML.I({                                                                                      // 78\n      \"class\": function() {                                                                                            // 79\n        return Spacebars.mustache(view.lookup(\"class\"), \"cancelButtonIcon\");                                           // 80\n      }                                                                                                                // 81\n    }), \"\\n            \", HTML.SPAN(Blaze.View(\"lookup:ut9n\", function() {                                             // 82\n      return Spacebars.mustache(view.lookup(\"ut9n\"), \"cancel\");                                                        // 83\n    })), \"\\n        \"), \"\\n    \" ];                                                                                    // 84\n  });                                                                                                                  // 85\n}));                                                                                                                   // 86\n                                                                                                                       // 87\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/tomi_upload-jquery/templates/buttons.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nTemplate['buttons'].helpers({                                                                                          // 1\n  'class': function(what) {                                                                                            // 2\n    return Uploader.UI[this.type][what] ;                                                                              // 3\n  },                                                                                                                   // 4\n  'idle': function() {                                                                                                 // 5\n    return this.state.idle();                                                                                          // 6\n  },                                                                                                                   // 7\n  'cancelled': function() {                                                                                            // 8\n    return this.state.cancelled();                                                                                     // 9\n  },                                                                                                                   // 10\n  'waiting': function() {                                                                                              // 11\n    return this.state.waiting();                                                                                       // 12\n  },                                                                                                                   // 13\n  'removeFromQueue': function() {                                                                                      // 14\n    return this.state.removeFromQueue();                                                                               // 15\n  }                                                                                                                    // 16\n});                                                                                                                    // 17\n                                                                                                                       // 18\nTemplate['buttons'].events({                                                                                           // 19\n  'click .cancel': function (e) {                                                                                      // 20\n    Uploader.cancelUpload.call(this.uploadContext, e, this.name);                                                      // 21\n  },                                                                                                                   // 22\n  'click .start': function (e) {                                                                                       // 23\n    Uploader.startUpload.call(this.uploadContext, e, this.name);                                                       // 24\n  },                                                                                                                   // 25\n  'click .remove': function (e) {                                                                                      // 26\n    Uploader.removeFromQueue.call(this.uploadContext, e, this.name);                                                   // 27\n  },                                                                                                                   // 28\n  'click .done': function(e) {                                                                                         // 29\n    Uploader.reset.call(this.uploadContext, e);                                                                        // 30\n  }                                                                                                                    // 31\n});                                                                                                                    // 32\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/tomi_upload-jquery/templates/template.dropzone.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n                                                                                                                       // 1\nTemplate.__checkName(\"dropzone\");                                                                                      // 2\nTemplate[\"dropzone\"] = new Template(\"Template.dropzone\", (function() {                                                 // 3\n  var view = this;                                                                                                     // 4\n  return HTML.FORM({                                                                                                   // 5\n    method: \"POST\",                                                                                                    // 6\n    enctype: \"multipart/form-data\"                                                                                     // 7\n  }, \"\\n        \", HTML.INPUT({                                                                                        // 8\n    type: \"file\",                                                                                                      // 9\n    \"class\": \"jqUploadclass\",                                                                                          // 10\n    multiple: \"true\",                                                                                                  // 11\n    \"data-content-category\": function() {                                                                              // 12\n      return Spacebars.mustache(view.lookup(\"contentType\"));                                                           // 13\n    },                                                                                                                 // 14\n    \"data-form-data\": function() {                                                                                     // 15\n      return Spacebars.mustache(view.lookup(\"submitData\"));                                                            // 16\n    },                                                                                                                 // 17\n    accept: function() {                                                                                               // 18\n      return Spacebars.mustache(view.lookup(\"fileTypes\"));                                                             // 19\n    },                                                                                                                 // 20\n    style: \"display: none\"                                                                                             // 21\n  }), \"\\n        \", HTML.DIV({                                                                                         // 22\n    \"class\": \"jqDropZone fade\"                                                                                         // 23\n  }, Blaze.View(\"lookup:infoLabel\", function() {                                                                       // 24\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"infoLabel\")));                                            // 25\n  })), \"\\n    \");                                                                                                      // 26\n}));                                                                                                                   // 27\n                                                                                                                       // 28\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/tomi_upload-jquery/templates/dropzone.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// each upload_multiple template instance holds its own local collection of files list                                 // 1\nTemplate['dropzone'].created = function () {                                                                           // 2\n  // start automatically on drop                                                                                       // 3\n  Template.instance().autoStart = true;                                                                                // 4\n                                                                                                                       // 5\n  // init the control                                                                                                  // 6\n  Uploader.init(this);                                                                                                 // 7\n};                                                                                                                     // 8\n                                                                                                                       // 9\n// each upload_multiple template instance holds its own local collection of files list                                 // 10\nTemplate['dropzone'].helpers({                                                                                         // 11\n  'infoLabel': function() {                                                                                            // 12\n    var progress = Template.instance().globalInfo.get();                                                               // 13\n                                                                                                                       // 14\n    // we may have not yet selected a file                                                                             // 15\n    if (progress.progress == 0 || progress.progress == 100) {                                                          // 16\n      return \"Drop files here\";                                                                                        // 17\n    }                                                                                                                  // 18\n    return progress.progress + \"%\";                                                                                    // 19\n  },                                                                                                                   // 20\n  'submitData': function() {                                                                                           // 21\n    if (this.formData) {                                                                                               // 22\n      this.formData['contentType'] = this.contentType;                                                                 // 23\n    } else {                                                                                                           // 24\n      this.formData = {contentType: this.contentType};                                                                 // 25\n    }                                                                                                                  // 26\n    return typeof this.formData == 'string' ? this.formData : JSON.stringify(this.formData);                           // 27\n  }                                                                                                                    // 28\n});                                                                                                                    // 29\n                                                                                                                       // 30\nTemplate['dropzone'].rendered = function () {                                                                          // 31\n  // initialise the uploader area                                                                                      // 32\n  Uploader.render.call(this);                                                                                          // 33\n                                                                                                                       // 34\n  // allow visual clues for drag and drop area                                                                         // 35\n  $(document).bind('dragover', function (e) {                                                                          // 36\n    var dropZone = $('.jqDropZone'),                                                                                   // 37\n      foundDropzone,                                                                                                   // 38\n      timeout = window.dropZoneTimeout;                                                                                // 39\n    if (!timeout) {                                                                                                    // 40\n      dropZone.addClass('in');                                                                                         // 41\n    }                                                                                                                  // 42\n    else {                                                                                                             // 43\n      clearTimeout(timeout);                                                                                           // 44\n    }                                                                                                                  // 45\n    var found = false,                                                                                                 // 46\n      node = e.target;                                                                                                 // 47\n    do {                                                                                                               // 48\n      if ($(node).hasClass('jqDropZone')) {                                                                            // 49\n        found = true;                                                                                                  // 50\n        foundDropzone = $(node);                                                                                       // 51\n        break;                                                                                                         // 52\n      }                                                                                                                // 53\n      node = node.parentNode;                                                                                          // 54\n    } while (node != null);                                                                                            // 55\n                                                                                                                       // 56\n    dropZone.removeClass('in hover');                                                                                  // 57\n    if (found) {                                                                                                       // 58\n      foundDropzone.addClass('hover');                                                                                 // 59\n    }                                                                                                                  // 60\n    window.dropZoneTimeout = setTimeout(function () {                                                                  // 61\n      window.dropZoneTimeout = null;                                                                                   // 62\n      dropZone.removeClass('in hover');                                                                                // 63\n    }, 100);                                                                                                           // 64\n  });                                                                                                                  // 65\n};                                                                                                                     // 66\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/tomi_upload-jquery/uploader.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nUploader = {                                                                                                           // 1\n  logLevels: {                                                                                                         // 2\n    \"debug\": 0,                                                                                                        // 3\n    \"error\": 1                                                                                                         // 4\n  },                                                                                                                   // 5\n  logLevel: 1,                                                                                                         // 6\n  log: function(level, text) {                                                                                         // 7\n    if (level >= Uploader.logLevel) {                                                                                  // 8\n      console.log(text);                                                                                               // 9\n    }                                                                                                                  // 10\n  },                                                                                                                   // 11\n  localisation: {                                                                                                      // 12\n    browse: \"Browse\",                                                                                                  // 13\n    cancelled: \"Cancelled\",                                                                                            // 14\n    remove: \"Remove\",                                                                                                  // 15\n    upload: \"Upload\",                                                                                                  // 16\n    done: \"Done\",                                                                                                      // 17\n    cancel: \"Cancel\"                                                                                                   // 18\n  },                                                                                                                   // 19\n  UI: {                                                                                                                // 20\n    bootstrap: {                                                                                                       // 21\n      upload: 'btn btn-primary btn-file upload-control',                                                               // 22\n      progressOuter: 'form-control upload-control',                                                                    // 23\n      progressInner: 'progressInner',                                                                                  // 24\n      progressBar: 'progress-bar progress-bar-success progress-bar-striped',                                           // 25\n      removeButton: 'btn btn-default upload-control remove',                                                           // 26\n      removeButtonIcon: 'glyphicon glyphicon-remove',                                                                  // 27\n      startButton: 'btn btn-info upload-control start',                                                                // 28\n      startButtonIcon: 'glyphicon glyphicon-upload',                                                                   // 29\n      doneButton: 'btn btn-default upload-control done',                                                               // 30\n      doneButtonIcon: 'glyphicon glyphicon-ok',                                                                        // 31\n      cancelButton: 'btn btn-danger upload-control cancel',                                                            // 32\n      cancelButtonIcon: 'glyphicon glyphicon-stop',                                                                    // 33\n      cancelledButton: 'btn btn-warning upload-control',                                                               // 34\n      cancelledButtonIcon: 'glyphicon glyphicon-cross'                                                                 // 35\n    },                                                                                                                 // 36\n    semanticUI: {                                                                                                      // 37\n      upload: 'ui icon button btn-file leftButton upload-control',                                                     // 38\n      progressOuter: 'progressOuter',                                                                                  // 39\n      progressInner: 'semantic progressInner',                                                                         // 40\n      progressBar: 'bar progress-bar',                                                                                 // 41\n      removeButton: 'ui red button upload-control remove rightButton',                                                 // 42\n      removeButtonIcon: 'trash icon',                                                                                  // 43\n      startButton: 'ui button primary upload-control start rightButton',                                               // 44\n      startButtonIcon: 'upload icon',                                                                                  // 45\n      doneButton: 'ui green button upload-control rightButton done',                                                   // 46\n      doneButtonIcon: 'icon thumbs up',                                                                                // 47\n      cancelButton: 'ui yellow button upload-control cancel rightButton',                                              // 48\n      cancelButtonIcon: 'icon stop',                                                                                   // 49\n      cancelledButton: 'ui yellow button upload-control rightButton'                                                   // 50\n    }                                                                                                                  // 51\n  },                                                                                                                   // 52\n  uploadUrl: '/upload',                                                                                                // 53\n  createName: function(templateContext) {                                                                              // 54\n    if (templateContext.queue.length == 1) {                                                                           // 55\n      var file = templateContext.queue[0];                                                                             // 56\n      templateContext.info.set(file);                                                                                  // 57\n    } else {                                                                                                           // 58\n      // calculate size                                                                                                // 59\n      var file = {                                                                                                     // 60\n        name: templateContext.queue.length + ' files',                                                                 // 61\n        size: templateContext.queue.size                                                                               // 62\n      }                                                                                                                // 63\n      templateContext.info.set(file);                                                                                  // 64\n    }                                                                                                                  // 65\n  },                                                                                                                   // 66\n  /**                                                                                                                  // 67\n   * Starts upload                                                                                                     // 68\n   * @param e                                                                                                          // 69\n   * @param {string} name Name of the file in the queue that we want to upload                                         // 70\n   */                                                                                                                  // 71\n  startUpload: function(e, name) {                                                                                     // 72\n    if (e) e.preventDefault();                                                                                         // 73\n                                                                                                                       // 74\n    if (this.queue.length == 0) return;                                                                                // 75\n                                                                                                                       // 76\n    var that = this;                                                                                                   // 77\n                                                                                                                       // 78\n    $.each(this.queue, function(index, queueItem) {                                                                    // 79\n                                                                                                                       // 80\n      var data = queueItem.data;                                                                                       // 81\n      if (name && data.files[0].name !== name) return true;                                                            // 82\n                                                                                                                       // 83\n      data.jqXHR = data.submit()                                                                                       // 84\n        .done(function(data, textStatus, jqXHR) {                                                                      // 85\n          // remove from queue                                                                                         // 86\n          that.queue.splice(that.queue.indexOf(queueItem), 1);                                                         // 87\n                                                                                                                       // 88\n          Uploader.log(Uploader.logLevels.debug, 'data.sumbit.done: textStatus= ' + textStatus);                       // 89\n                                                                                                                       // 90\n          if (Uploader.status) {                                                                                       // 91\n            Uploader.status(false, data, textStatus, jqXHR);                                                           // 92\n          }                                                                                                            // 93\n        })                                                                                                             // 94\n        .fail(function(jqXHR, textStatus, errorThrown) {                                                               // 95\n          // remove from queue                                                                                         // 96\n          that.queue.splice(that.queue.indexOf(queueItem), 1);                                                         // 97\n                                                                                                                       // 98\n          if (jqXHR.statusText === 'abort') {                                                                          // 99\n            that.info.set({                                                                                            // 100\n              name: 'Aborted',                                                                                         // 101\n              size: 0                                                                                                  // 102\n            })                                                                                                         // 103\n          } else {                                                                                                     // 104\n            that.info.set({                                                                                            // 105\n              name: 'Failed: ' + jqXHR.responseText + ' ' + jqXHR.status + ' ' + jqXHR.statusText,                     // 106\n              size: 0                                                                                                  // 107\n            })                                                                                                         // 108\n          }                                                                                                            // 109\n          if (Uploader.status) {                                                                                       // 110\n            Uploader.status(true, data, textStatus, jqXHR);                                                            // 111\n          }                                                                                                            // 112\n                                                                                                                       // 113\n          Uploader.log(Uploader.logLevels.debug, 'data.sumbit.fail: ' + jqXHR.responseText + ' ' + jqXHR.status + ' ' + jqXHR.statusText);\n        })                                                                                                             // 115\n        .always(function(data, textStatus, jqXHR) {                                                                    // 116\n          Uploader.log(Uploader.logLevels.debug, 'data.sumbit.always:  textStatus= ' + textStatus);                    // 117\n        });                                                                                                            // 118\n    });                                                                                                                // 119\n  },                                                                                                                   // 120\n  formatProgress: function(file, progress, bitrate) {                                                                  // 121\n    return progress + \"%&nbsp;of&nbsp;\" + file + \"&nbsp;<span style='font-size:smaller'>@&nbsp;\" + bytesToSize(bitrate) + \"&nbsp;/&nbsp;sec</span>\"\n  },                                                                                                                   // 123\n  removeFromQueue: function(e, name) {                                                                                 // 124\n    e.preventDefault();                                                                                                // 125\n                                                                                                                       // 126\n    // remove from data queue                                                                                          // 127\n    var that = this;                                                                                                   // 128\n    $.each(this.queue, function(index, item) {                                                                         // 129\n      // skip all with different name                                                                                  // 130\n      if (item.name === name) {                                                                                        // 131\n        that.queue.splice(index, 1);                                                                                   // 132\n        return false;                                                                                                  // 133\n      }                                                                                                                // 134\n    });                                                                                                                // 135\n                                                                                                                       // 136\n    // set the queueView                                                                                               // 137\n    this.queueView.set(this.queue);                                                                                    // 138\n                                                                                                                       // 139\n    // update name                                                                                                     // 140\n    Uploader.createName(this);                                                                                         // 141\n  },                                                                                                                   // 142\n  reset: function(e) {                                                                                                 // 143\n    e.preventDefault();                                                                                                // 144\n    this.globalInfo.set({                                                                                              // 145\n      running: false,                                                                                                  // 146\n      cancelled: false,                                                                                                // 147\n      progress: 0,                                                                                                     // 148\n      bitrate: 0                                                                                                       // 149\n    });                                                                                                                // 150\n    this.info.set(\"\");                                                                                                 // 151\n  },                                                                                                                   // 152\n  cancelUpload: function(e, name) {                                                                                    // 153\n    e.preventDefault();                                                                                                // 154\n                                                                                                                       // 155\n    var that = this;                                                                                                   // 156\n    $.each(this.queue, function(index, queueItem) {                                                                    // 157\n      // skip all with different name                                                                                  // 158\n      if (name && queueItem.name !== name) return true;                                                                // 159\n                                                                                                                       // 160\n      // cancel upload of non completed files                                                                          // 161\n      if (that.queue[queueItem.name].get().progress !== 100) {                                                         // 162\n        queueItem.data.jqXHR.abort();                                                                                  // 163\n                                                                                                                       // 164\n        // set status to redraw interface                                                                              // 165\n        that.queue[queueItem.name].set({                                                                               // 166\n          running: false,                                                                                              // 167\n          cancelled: true,                                                                                             // 168\n          progress: 0,                                                                                                 // 169\n          bitrate: 0                                                                                                   // 170\n        });                                                                                                            // 171\n      }                                                                                                                // 172\n    });                                                                                                                // 173\n                                                                                                                       // 174\n    // mark global as cancelled                                                                                        // 175\n    if (!name) {                                                                                                       // 176\n      this.globalInfo.set({                                                                                            // 177\n        running: false,                                                                                                // 178\n        cancelled: true,                                                                                               // 179\n        progress: 0,                                                                                                   // 180\n        bitrate: 0                                                                                                     // 181\n      })                                                                                                               // 182\n    }                                                                                                                  // 183\n  },                                                                                                                   // 184\n  init: function(data) {                                                                                               // 185\n    // this is used to view the queue in the interface                                                                 // 186\n    data.queueView = new ReactiveVar([]);                                                                              // 187\n    // this holds all the data about the queue                                                                         // 188\n    data.queue = [];                                                                                                   // 189\n    // info about the global item being processed                                                                      // 190\n    data.info = new ReactiveVar;                                                                                       // 191\n    // info about global progress                                                                                      // 192\n    data.globalInfo = new ReactiveVar({                                                                                // 193\n      running: false,                                                                                                  // 194\n      progress: 0,                                                                                                     // 195\n      bitrate: 0                                                                                                       // 196\n    });                                                                                                                // 197\n  },                                                                                                                   // 198\n  render: function() {                                                                                                 // 199\n    // template context is the template instance itself                                                                // 200\n    var templateContext = this;                                                                                        // 201\n    templateContext.progressBar = this.$('.progress-bar');                                                             // 202\n    templateContext.progressLabel = this.$('.progress-label');                                                         // 203\n    templateContext.uploadControl = this.$('.jqUploadclass');                                                          // 204\n    templateContext.dropZone = this.$('.jqDropZone');                                                                  // 205\n                                                                                                                       // 206\n    // this.data holds the template context (arguments supplied to the template in HTML)                               // 207\n    var dataContext = this.data;                                                                                       // 208\n                                                                                                                       // 209\n    // attach the context to the form object (so that we can access it in the callbacks such as add() etc.)            // 210\n    this.find('form').uploadContext = templateContext;                                                                 // 211\n                                                                                                                       // 212\n    // set the upload related callbacks for HTML node that has jqUploadclass specified for it                          // 213\n    // Example html node: <input type=\"file\" class=\"jqUploadclass\" />                                                  // 214\n    templateContext.uploadControl.fileupload({                                                                         // 215\n        url: Uploader.uploadUrl,                                                                                       // 216\n        dataType: 'json',                                                                                              // 217\n        dropZone: templateContext.dropZone,                                                                            // 218\n        add: function(e, data) {                                                                                       // 219\n          Uploader.log(Uploader.logLevels.debug, 'render.add ');                                                       // 220\n                                                                                                                       // 221\n          // get dynamic formData                                                                                      // 222\n          if (dataContext != null && dataContext.callbacks != null) {                                                  // 223\n                                                                                                                       // 224\n            // form data                                                                                               // 225\n                                                                                                                       // 226\n            if (dataContext.callbacks.formData != null) {                                                              // 227\n              data.formData = dataContext.callbacks.formData();                                                        // 228\n            }                                                                                                          // 229\n                                                                                                                       // 230\n            // validate                                                                                                // 231\n            if (dataContext.callbacks.validate != null &&                                                              // 232\n              !dataContext.callbacks.validate(data.files)) {                                                           // 233\n              return;                                                                                                  // 234\n            }                                                                                                          // 235\n          }                                                                                                            // 236\n                                                                                                                       // 237\n          // adding file will clear the queue                                                                          // 238\n          if (dataContext == null ||                                                                                   // 239\n            !dataContext.multiple) {                                                                                   // 240\n            templateContext.queue = [];                                                                                // 241\n            templateContext.queueView.set([]);                                                                         // 242\n          }                                                                                                            // 243\n                                                                                                                       // 244\n          // update the queue collection, so that the ui gets updated                                                  // 245\n          $.each(data.files, function(index, file) {                                                                   // 246\n            var item = file;                                                                                           // 247\n            item.data = data;                                                                                          // 248\n            templateContext.queue[file.name] = new ReactiveVar({                                                       // 249\n              running: false,                                                                                          // 250\n              progress: 0                                                                                              // 251\n            });                                                                                                        // 252\n            templateContext.queue.push(item);                                                                          // 253\n            templateContext.queue.size += parseInt(file.size);                                                         // 254\n          });                                                                                                          // 255\n                                                                                                                       // 256\n          // say name                                                                                                  // 257\n          Uploader.createName(templateContext);                                                                        // 258\n                                                                                                                       // 259\n          // set template context                                                                                      // 260\n          templateContext.queueView.set(templateContext.queue);                                                        // 261\n                                                                                                                       // 262\n          // we can automatically start the upload                                                                     // 263\n          if (templateContext.autoStart) {                                                                             // 264\n            Uploader.startUpload.call(templateContext);                                                                // 265\n          }                                                                                                            // 266\n                                                                                                                       // 267\n        }, // end of add callback handler                                                                              // 268\n        done: function(e, data) {                                                                                      // 269\n          Uploader.log(Uploader.logLevels.debug, 'render.done ');                                                      // 270\n                                                                                                                       // 271\n          templateContext.globalInfo.set({                                                                             // 272\n            running: false,                                                                                            // 273\n            progress: 100                                                                                              // 274\n          });                                                                                                          // 275\n                                                                                                                       // 276\n          $.each(data.result.files, function(index, file) {                                                            // 277\n            Uploader.finished(index, file, templateContext);                                                           // 278\n                                                                                                                       // 279\n            // notify user                                                                                             // 280\n            if (dataContext.callbacks != null &&                                                                       // 281\n              dataContext.callbacks.finished != null) {                                                                // 282\n              dataContext.callbacks.finished(index, file, templateContext);                                            // 283\n            }                                                                                                          // 284\n          });                                                                                                          // 285\n        },                                                                                                             // 286\n        fail: function(e, data) {                                                                                      // 287\n          Uploader.log(Uploader.logLevels.debug, 'render.fail ');                                                      // 288\n        },                                                                                                             // 289\n        progress: function(e, data) {                                                                                  // 290\n          // file progress is displayed only when single file is uploaded                                              // 291\n          var fi = templateContext.queue[data.files[0].name];                                                          // 292\n          if (fi) {                                                                                                    // 293\n            fi.set({                                                                                                   // 294\n              running: true,                                                                                           // 295\n              progress: parseInt(data.loaded / data.total * 100, 10),                                                  // 296\n              bitrate: data.bitrate                                                                                    // 297\n            });                                                                                                        // 298\n          }                                                                                                            // 299\n        },                                                                                                             // 300\n        progressall: function(e, data) {                                                                               // 301\n          templateContext.globalInfo.set({                                                                             // 302\n            running: true,                                                                                             // 303\n            progress: parseInt(data.loaded / data.total * 100, 10),                                                    // 304\n            bitrate: data.bitrate                                                                                      // 305\n          });                                                                                                          // 306\n        },                                                                                                             // 307\n        drop: function(e, data) { // called when files are dropped onto ui                                             // 308\n          $.each(data.files, function(index, file) {                                                                   // 309\n            Uploader.log(Uploader.logLevels.debug, \"render.drop file: \" + file.name);                                  // 310\n          });                                                                                                          // 311\n        },                                                                                                             // 312\n        change: function(e, data) { // called when input selection changes (file selected)                             // 313\n          // clear the queue, this is used to visualise all the data                                                   // 314\n          templateContext.queue = [];                                                                                  // 315\n          templateContext.queue.size = 0;                                                                              // 316\n          templateContext.progressBar.css('width', '0%');                                                              // 317\n          templateContext.globalInfo.set({                                                                             // 318\n            running: false,                                                                                            // 319\n            progress: 0                                                                                                // 320\n          });                                                                                                          // 321\n                                                                                                                       // 322\n          $.each(data.files, function(index, file) {                                                                   // 323\n            Uploader.log(Uploader.logLevels.debug, 'render.change file: ' + file.name);                                // 324\n          });                                                                                                          // 325\n        }                                                                                                              // 326\n      })                                                                                                               // 327\n      .prop('disabled', ($.support != null && $.support.fileInput != null) ? !$.support.fileInput : false)             // 328\n      .parent().addClass(($.support != null && $.support.fileInput != null && !$.support.fileInput) ? 'disabled' : undefined);\n  },                                                                                                                   // 330\n  finished: function() {}                                                                                              // 331\n}                                                                                                                      // 332\n                                                                                                                       // 333\nbytesToSize = function(bytes) {                                                                                        // 334\n  if (bytes == 0) return '0 Byte';                                                                                     // 335\n  var k = 1000;                                                                                                        // 336\n  var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];                                               // 337\n  var i = Math.floor(Math.log(bytes) / Math.log(k));                                                                   // 338\n  return (bytes / Math.pow(k, i)).toPrecision(3) + '&nbsp;' + sizes[i];                                                // 339\n}                                                                                                                      // 340\n                                                                                                                       // 341\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['tomi:upload-jquery'] = {\n  Uploader: Uploader\n};\n\n})();\n","servePath":"/packages/tomi_upload-jquery.js","sourceMap":{"version":3,"sources":["/packages/tomi_upload-jquery/lib/vendor/jquery.ui.widget.js","/packages/tomi_upload-jquery/lib/jquery.iframe-transport.js","/packages/tomi_upload-jquery/lib/jquery.fileupload.js","/packages/tomi_upload-jquery/templates/template.queueItem.js","/packages/tomi_upload-jquery/templates/queueItem.js","/packages/tomi_upload-jquery/templates/template.upload.js","/packages/tomi_upload-jquery/templates/upload.js","/packages/tomi_upload-jquery/templates/template.buttons.js","/packages/tomi_upload-jquery/templates/buttons.js","/packages/tomi_upload-jquery/templates/template.dropzone.js","/packages/tomi_upload-jquery/templates/dropzone.js","/packages/tomi_upload-jquery/uploader.js"],"names":[],"mappingsitp7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6H;;;;;;;;;;;;;;;;;;ACrHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC1EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H;;;;;;;;;;;;;;;;;;ACjfile":"/packages/tomi_upload-jquery.js","sourcesContent":["/*! jQuery UI - v1.11.1 - 2014-09-17\n* http://jqueryui.com\n* Includes: widget.js\n* Copyright 2014 jQuery Foundation and other contributors; Licensed MIT */\n\n(function( factory ) {\n\tif ( typeof define === \"function\" && define.amd ) {\n\n\t\t// AMD. Register as an anonymous module.\n\t\tdefine([ \"jquery\" ], factory );\n\t} else {\n\n\t\t// Browser globals\n\t\tfactory( jQuery );\n\t}\n}(function( $ ) {\n/*!\n * jQuery UI Widget 1.11.1\n * http://jqueryui.com\n *\n * Copyright 2014 jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n *\n * http://api.jqueryui.com/jQuery.widget/\n */\n\n\nvar widget_uuid = 0,\n\twidget_slice = Array.prototype.slice;\n\n$.cleanData = (function( orig ) {\n\treturn function( elems ) {\n\t\tvar events, elem, i;\n\t\tfor ( i = 0; (elem = elems[i]) != null; i++ ) {\n\t\t\ttry {\n\n\t\t\t\t// Only trigger remove when necessary to save time\n\t\t\t\tevents = $._data( elem, \"events\" );\n\t\t\t\tif ( events && events.remove ) {\n\t\t\t\t\t$( elem ).triggerHandler( \"remove\" );\n\t\t\t\t}\n\n\t\t\t// http://bugs.jquery.com/ticket/8235\n\t\t\t} catch( e ) {}\n\t\t}\n\t\torig( elems );\n\t};\n})( $.cleanData );\n\n$.widget = function( name, base, prototype ) {\n\tvar fullName, existingConstructor, constructor, basePrototype,\n\t\t// proxiedPrototype allows the provided prototype to remain unmodified\n\t\t// so that it can be used as a mixin for multiple widgets (#8876)\n\t\tproxiedPrototype = {},\n\t\tnamespace = name.split( \".\" )[ 0 ];\n\n\tname = name.split( \".\" )[ 1 ];\n\tfullName = namespace + \"-\" + name;\n\n\tif ( !prototype ) {\n\t\tprototype = base;\n\t\tbase = $.Widget;\n\t}\n\n\t// create selector for plugin\n\t$.expr[ \":\" ][ fullName.toLowerCase() ] = function( elem ) {\n\t\treturn !!$.data( elem, fullName );\n\t};\n\n\t$[ namespace ] = $[ namespace ] || {};\n\texistingConstructor = $[ namespace ][ name ];\n\tconstructor = $[ namespace ][ name ] = function( options, element ) {\n\t\t// allow instantiation without \"new\" keyword\n\t\tif ( !this._createWidget ) {\n\t\t\treturn new constructor( options, element );\n\t\t}\n\n\t\t// allow instantiation without initializing for simple inheritance\n\t\t// must use \"new\" keyword (the code above always passes args)\n\t\tif ( arguments.length ) {\n\t\t\tthis._createWidget( options, element );\n\t\t}\n\t};\n\t// extend with the existing constructor to carry over any static properties\n\t$.extend( constructor, existingConstructor, {\n\t\tversion: prototype.version,\n\t\t// copy the object used to create the prototype in case we need to\n\t\t// redefine the widget later\n\t\t_proto: $.extend( {}, prototype ),\n\t\t// track widgets that inherit from this widget in case this widget is\n\t\t// redefined after a widget inherits from it\n\t\t_childConstructors: []\n\t});\n\n\tbasePrototype = new base();\n\t// we need to make the options hash a property directly on the new instance\n\t// otherwise we'll modify the options hash on the prototype that we're\n\t// inheriting from\n\tbasePrototype.options = $.widget.extend( {}, basePrototype.options );\n\t$.each( prototype, function( prop, value ) {\n\t\tif ( !$.isFunction( value ) ) {\n\t\t\tproxiedPrototype[ prop ] = value;\n\t\t\treturn;\n\t\t}\n\t\tproxiedPrototype[ prop ] = (function() {\n\t\t\tvar _super = function() {\n\t\t\t\t\treturn base.prototype[ prop ].apply( this, arguments );\n\t\t\t\t},\n\t\t\t\t_superApply = function( args ) {\n\t\t\t\t\treturn base.prototype[ prop ].apply( this, args );\n\t\t\t\t};\n\t\t\treturn function() {\n\t\t\t\tvar __super = this._super,\n\t\t\t\t\t__superApply = this._superApply,\n\t\t\t\t\treturnValue;\n\n\t\t\t\tthis._super = _super;\n\t\t\t\tthis._superApply = _superApply;\n\n\t\t\t\treturnValue = value.apply( this, arguments );\n\n\t\t\t\tthis._super = __super;\n\t\t\t\tthis._superApply = __superApply;\n\n\t\t\t\treturn returnValue;\n\t\t\t};\n\t\t})();\n\t});\n\tconstructor.prototype = $.widget.extend( basePrototype, {\n\t\t// TODO: remove support for widgetEventPrefix\n\t\t// always use the name + a colon as the prefix, e.g., draggable:start\n\t\t// don't prefix for widgets that aren't DOM-based\n\t\twidgetEventPrefix: existingConstructor ? (basePrototype.widgetEventPrefix || name) : name\n\t}, proxiedPrototype, {\n\t\tconstructor: constructor,\n\t\tnamespace: namespace,\n\t\twidgetName: name,\n\t\twidgetFullName: fullName\n\t});\n\n\t// If this widget is being redefined then we need to find all widgets that\n\t// are inheriting from it and redefine all of them so that they inherit from\n\t// the new version of this widget. We're essentially trying to replace one\n\t// level in the prototype chain.\n\tif ( existingConstructor ) {\n\t\t$.each( existingConstructor._childConstructors, function( i, child ) {\n\t\t\tvar childPrototype = child.prototype;\n\n\t\t\t// redefine the child widget using the same prototype that was\n\t\t\t// originally used, but inherit from the new version of the base\n\t\t\t$.widget( childPrototype.namespace + \".\" + childPrototype.widgetName, constructor, child._proto );\n\t\t});\n\t\t// remove the list of existing child constructors from the old constructor\n\t\t// so the old child constructors can be garbage collected\n\t\tdelete existingConstructor._childConstructors;\n\t} else {\n\t\tbase._childConstructors.push( constructor );\n\t}\n\n\t$.widget.bridge( name, constructor );\n\n\treturn constructor;\n};\n\n$.widget.extend = function( target ) {\n\tvar input = widget_slice.call( arguments, 1 ),\n\t\tinputIndex = 0,\n\t\tinputLength = input.length,\n\t\tkey,\n\t\tvalue;\n\tfor ( ; inputIndex < inputLength; inputIndex++ ) {\n\t\tfor ( key in input[ inputIndex ] ) {\n\t\t\tvalue = input[ inputIndex ][ key ];\n\t\t\tif ( input[ inputIndex ].hasOwnProperty( key ) && value !== undefined ) {\n\t\t\t\t// Clone objects\n\t\t\t\tif ( $.isPlainObject( value ) ) {\n\t\t\t\t\ttarget[ key ] = $.isPlainObject( target[ key ] ) ?\n\t\t\t\t\t\t$.widget.extend( {}, target[ key ], value ) :\n\t\t\t\t\t\t// Don't extend strings, arrays, etc. with objects\n\t\t\t\t\t\t$.widget.extend( {}, value );\n\t\t\t\t// Copy everything else by reference\n\t\t\t\t} else {\n\t\t\t\t\ttarget[ key ] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn target;\n};\n\n$.widget.bridge = function( name, object ) {\n\tvar fullName = object.prototype.widgetFullName || name;\n\t$.fn[ name ] = function( options ) {\n\t\tvar isMethodCall = typeof options === \"string\",\n\t\t\targs = widget_slice.call( arguments, 1 ),\n\t\t\treturnValue = this;\n\n\t\t// allow multiple hashes to be passed on init\n\t\toptions = !isMethodCall && args.length ?\n\t\t\t$.widget.extend.apply( null, [ options ].concat(args) ) :\n\t\t\toptions;\n\n\t\tif ( isMethodCall ) {\n\t\t\tthis.each(function() {\n\t\t\t\tvar methodValue,\n\t\t\t\t\tinstance = $.data( this, fullName );\n\t\t\t\tif ( options === \"instance\" ) {\n\t\t\t\t\treturnValue = instance;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif ( !instance ) {\n\t\t\t\t\treturn $.error( \"cannot call methods on \" + name + \" prior to initialization; \" +\n\t\t\t\t\t\t\"attempted to call method '\" + options + \"'\" );\n\t\t\t\t}\n\t\t\t\tif ( !$.isFunction( instance[options] ) || options.charAt( 0 ) === \"_\" ) {\n\t\t\t\t\treturn $.error( \"no such method '\" + options + \"' for \" + name + \" widget instance\" );\n\t\t\t\t}\n\t\t\t\tmethodValue = instance[ options ].apply( instance, args );\n\t\t\t\tif ( methodValue !== instance && methodValue !== undefined ) {\n\t\t\t\t\treturnValue = methodValue && methodValue.jquery ?\n\t\t\t\t\t\treturnValue.pushStack( methodValue.get() ) :\n\t\t\t\t\t\tmethodValue;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tthis.each(function() {\n\t\t\t\tvar instance = $.data( this, fullName );\n\t\t\t\tif ( instance ) {\n\t\t\t\t\tinstance.option( options || {} );\n\t\t\t\t\tif ( instance._init ) {\n\t\t\t\t\t\tinstance._init();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$.data( this, fullName, new object( options, this ) );\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn returnValue;\n\t};\n};\n\n$.Widget = function( /* options, element */ ) {};\n$.Widget._childConstructors = [];\n\n$.Widget.prototype = {\n\twidgetName: \"widget\",\n\twidgetEventPrefix: \"\",\n\tdefaultElement: \"<div>\",\n\toptions: {\n\t\tdisabled: false,\n\n\t\t// callbacks\n\t\tcreate: null\n\t},\n\t_createWidget: function( options, element ) {\n\t\telement = $( element || this.defaultElement || this )[ 0 ];\n\t\tthis.element = $( element );\n\t\tthis.uuid = widget_uuid++;\n\t\tthis.eventNamespace = \".\" + this.widgetName + this.uuid;\n\t\tthis.options = $.widget.extend( {},\n\t\t\tthis.options,\n\t\t\tthis._getCreateOptions(),\n\t\t\toptions );\n\n\t\tthis.bindings = $();\n\t\tthis.hoverable = $();\n\t\tthis.focusable = $();\n\n\t\tif ( element !== this ) {\n\t\t\t$.data( element, this.widgetFullName, this );\n\t\t\tthis._on( true, this.element, {\n\t\t\t\tremove: function( event ) {\n\t\t\t\t\tif ( event.target === element ) {\n\t\t\t\t\t\tthis.destroy();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.document = $( element.style ?\n\t\t\t\t// element within the document\n\t\t\t\telement.ownerDocument :\n\t\t\t\t// element is window or document\n\t\t\t\telement.document || element );\n\t\t\tthis.window = $( this.document[0].defaultView || this.document[0].parentWindow );\n\t\t}\n\n\t\tthis._create();\n\t\tthis._trigger( \"create\", null, this._getCreateEventData() );\n\t\tthis._init();\n\t},\n\t_getCreateOptions: $.noop,\n\t_getCreateEventData: $.noop,\n\t_create: $.noop,\n\t_init: $.noop,\n\n\tdestroy: function() {\n\t\tthis._destroy();\n\t\t// we can probably remove the unbind calls in 2.0\n\t\t// all event bindings should go through this._on()\n\t\tthis.element\n\t\t\t.unbind( this.eventNamespace )\n\t\t\t.removeData( this.widgetFullName )\n\t\t\t// support: jquery <1.6.3\n\t\t\t// http://bugs.jquery.com/ticket/9413\n\t\t\t.removeData( $.camelCase( this.widgetFullName ) );\n\t\tthis.widget()\n\t\t\t.unbind( this.eventNamespace )\n\t\t\t.removeAttr( \"aria-disabled\" )\n\t\t\t.removeClass(\n\t\t\t\tthis.widgetFullName + \"-disabled \" +\n\t\t\t\t\"ui-state-disabled\" );\n\n\t\t// clean up events and states\n\t\tthis.bindings.unbind( this.eventNamespace );\n\t\tthis.hoverable.removeClass( \"ui-state-hover\" );\n\t\tthis.focusable.removeClass( \"ui-state-focus\" );\n\t},\n\t_destroy: $.noop,\n\n\twidget: function() {\n\t\treturn this.element;\n\t},\n\n\toption: function( key, value ) {\n\t\tvar options = key,\n\t\t\tparts,\n\t\t\tcurOption,\n\t\t\ti;\n\n\t\tif ( arguments.length === 0 ) {\n\t\t\t// don't return a reference to the internal hash\n\t\t\treturn $.widget.extend( {}, this.options );\n\t\t}\n\n\t\tif ( typeof key === \"string\" ) {\n\t\t\t// handle nested keys, e.g., \"foo.bar\" => { foo: { bar: ___ } }\n\t\t\toptions = {};\n\t\t\tparts = key.split( \".\" );\n\t\t\tkey = parts.shift();\n\t\t\tif ( parts.length ) {\n\t\t\t\tcurOption = options[ key ] = $.widget.extend( {}, this.options[ key ] );\n\t\t\t\tfor ( i = 0; i < parts.length - 1; i++ ) {\n\t\t\t\t\tcurOption[ parts[ i ] ] = curOption[ parts[ i ] ] || {};\n\t\t\t\t\tcurOption = curOption[ parts[ i ] ];\n\t\t\t\t}\n\t\t\t\tkey = parts.pop();\n\t\t\t\tif ( arguments.length === 1 ) {\n\t\t\t\t\treturn curOption[ key ] === undefined ? null : curOption[ key ];\n\t\t\t\t}\n\t\t\t\tcurOption[ key ] = value;\n\t\t\t} else {\n\t\t\t\tif ( arguments.length === 1 ) {\n\t\t\t\t\treturn this.options[ key ] === undefined ? null : this.options[ key ];\n\t\t\t\t}\n\t\t\t\toptions[ key ] = value;\n\t\t\t}\n\t\t}\n\n\t\tthis._setOptions( options );\n\n\t\treturn this;\n\t},\n\t_setOptions: function( options ) {\n\t\tvar key;\n\n\t\tfor ( key in options ) {\n\t\t\tthis._setOption( key, options[ key ] );\n\t\t}\n\n\t\treturn this;\n\t},\n\t_setOption: function( key, value ) {\n\t\tthis.options[ key ] = value;\n\n\t\tif ( key === \"disabled\" ) {\n\t\t\tthis.widget()\n\t\t\t\t.toggleClass( this.widgetFullName + \"-disabled\", !!value );\n\n\t\t\t// If the widget is becoming disabled, then nothing is interactive\n\t\t\tif ( value ) {\n\t\t\t\tthis.hoverable.removeClass( \"ui-state-hover\" );\n\t\t\t\tthis.focusable.removeClass( \"ui-state-focus\" );\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tenable: function() {\n\t\treturn this._setOptions({ disabled: false });\n\t},\n\tdisable: function() {\n\t\treturn this._setOptions({ disabled: true });\n\t},\n\n\t_on: function( suppressDisabledCheck, element, handlers ) {\n\t\tvar delegateElement,\n\t\t\tinstance = this;\n\n\t\t// no suppressDisabledCheck flag, shuffle arguments\n\t\tif ( typeof suppressDisabledCheck !== \"boolean\" ) {\n\t\t\thandlers = element;\n\t\t\telement = suppressDisabledCheck;\n\t\t\tsuppressDisabledCheck = false;\n\t\t}\n\n\t\t// no element argument, shuffle and use this.element\n\t\tif ( !handlers ) {\n\t\t\thandlers = element;\n\t\t\telement = this.element;\n\t\t\tdelegateElement = this.widget();\n\t\t} else {\n\t\t\telement = delegateElement = $( element );\n\t\t\tthis.bindings = this.bindings.add( element );\n\t\t}\n\n\t\t$.each( handlers, function( event, handler ) {\n\t\t\tfunction handlerProxy() {\n\t\t\t\t// allow widgets to customize the disabled handling\n\t\t\t\t// - disabled as an array instead of boolean\n\t\t\t\t// - disabled class as method for disabling individual parts\n\t\t\t\tif ( !suppressDisabledCheck &&\n\t\t\t\t\t\t( instance.options.disabled === true ||\n\t\t\t\t\t\t\t$( this ).hasClass( \"ui-state-disabled\" ) ) ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn ( typeof handler === \"string\" ? instance[ handler ] : handler )\n\t\t\t\t\t.apply( instance, arguments );\n\t\t\t}\n\n\t\t\t// copy the guid so direct unbinding works\n\t\t\tif ( typeof handler !== \"string\" ) {\n\t\t\t\thandlerProxy.guid = handler.guid =\n\t\t\t\t\thandler.guid || handlerProxy.guid || $.guid++;\n\t\t\t}\n\n\t\t\tvar match = event.match( /^([\\w:-]*)\\s*(.*)$/ ),\n\t\t\t\teventName = match[1] + instance.eventNamespace,\n\t\t\t\tselector = match[2];\n\t\t\tif ( selector ) {\n\t\t\t\tdelegateElement.delegate( selector, eventName, handlerProxy );\n\t\t\t} else {\n\t\t\t\telement.bind( eventName, handlerProxy );\n\t\t\t}\n\t\t});\n\t},\n\n\t_off: function( element, eventName ) {\n\t\teventName = (eventName || \"\").split( \" \" ).join( this.eventNamespace + \" \" ) + this.eventNamespace;\n\t\telement.unbind( eventName ).undelegate( eventName );\n\t},\n\n\t_delay: function( handler, delay ) {\n\t\tfunction handlerProxy() {\n\t\t\treturn ( typeof handler === \"string\" ? instance[ handler ] : handler )\n\t\t\t\t.apply( instance, arguments );\n\t\t}\n\t\tvar instance = this;\n\t\treturn setTimeout( handlerProxy, delay || 0 );\n\t},\n\n\t_hoverable: function( element ) {\n\t\tthis.hoverable = this.hoverable.add( element );\n\t\tthis._on( element, {\n\t\t\tmouseenter: function( event ) {\n\t\t\t\t$( event.currentTarget ).addClass( \"ui-state-hover\" );\n\t\t\t},\n\t\t\tmouseleave: function( event ) {\n\t\t\t\t$( event.currentTarget ).removeClass( \"ui-state-hover\" );\n\t\t\t}\n\t\t});\n\t},\n\n\t_focusable: function( element ) {\n\t\tthis.focusable = this.focusable.add( element );\n\t\tthis._on( element, {\n\t\t\tfocusin: function( event ) {\n\t\t\t\t$( event.currentTarget ).addClass( \"ui-state-focus\" );\n\t\t\t},\n\t\t\tfocusout: function( event ) {\n\t\t\t\t$( event.currentTarget ).removeClass( \"ui-state-focus\" );\n\t\t\t}\n\t\t});\n\t},\n\n\t_trigger: function( type, event, data ) {\n\t\tvar prop, orig,\n\t\t\tcallback = this.options[ type ];\n\n\t\tdata = data || {};\n\t\tevent = $.Event( event );\n\t\tevent.type = ( type === this.widgetEventPrefix ?\n\t\t\ttype :\n\t\t\tthis.widgetEventPrefix + type ).toLowerCase();\n\t\t// the original event may come from any element\n\t\t// so we need to reset the target on the new event\n\t\tevent.target = this.element[ 0 ];\n\n\t\t// copy original event properties over to the new event\n\t\torig = event.originalEvent;\n\t\tif ( orig ) {\n\t\t\tfor ( prop in orig ) {\n\t\t\t\tif ( !( prop in event ) ) {\n\t\t\t\t\tevent[ prop ] = orig[ prop ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.element.trigger( event, data );\n\t\treturn !( $.isFunction( callback ) &&\n\t\t\tcallback.apply( this.element[0], [ event ].concat( data ) ) === false ||\n\t\t\tevent.isDefaultPrevented() );\n\t}\n};\n\n$.each( { show: \"fadeIn\", hide: \"fadeOut\" }, function( method, defaultEffect ) {\n\t$.Widget.prototype[ \"_\" + method ] = function( element, options, callback ) {\n\t\tif ( typeof options === \"string\" ) {\n\t\t\toptions = { effect: options };\n\t\t}\n\t\tvar hasOptions,\n\t\t\teffectName = !options ?\n\t\t\t\tmethod :\n\t\t\t\toptions === true || typeof options === \"number\" ?\n\t\t\t\t\tdefaultEffect :\n\t\t\t\t\toptions.effect || defaultEffect;\n\t\toptions = options || {};\n\t\tif ( typeof options === \"number\" ) {\n\t\t\toptions = { duration: options };\n\t\t}\n\t\thasOptions = !$.isEmptyObject( options );\n\t\toptions.complete = callback;\n\t\tif ( options.delay ) {\n\t\t\telement.delay( options.delay );\n\t\t}\n\t\tif ( hasOptions && $.effects && $.effects.effect[ effectName ] ) {\n\t\t\telement[ method ]( options );\n\t\t} else if ( effectName !== method && element[ effectName ] ) {\n\t\t\telement[ effectName ]( options.duration, options.easing, callback );\n\t\t} else {\n\t\t\telement.queue(function( next ) {\n\t\t\t\t$( this )[ method ]();\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback.call( element[ 0 ] );\n\t\t\t\t}\n\t\t\t\tnext();\n\t\t\t});\n\t\t}\n\t};\n});\n\nvar widget = $.widget;\n\n\n\n}));\n","/*\n * jQuery Iframe Transport Plugin 1.8.2\n * https://github.com/blueimp/jQuery-File-Upload\n *\n * Copyright 2011, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * http://www.opensource.org/licenses/MIT\n */\n\n/* global define, window, document */\n\n(function (factory) {\n    'use strict';\n    if (typeof define === 'function' && define.amd) {\n        // Register as an anonymous AMD module:\n        define(['jquery'], factory);\n    } else {\n        // Browser globals:\n        factory(window.jQuery);\n    }\n}(function ($) {\n    'use strict';\n\n    // Helper variable to create unique names for the transport iframes:\n    var counter = 0;\n\n    // The iframe transport accepts four additional options:\n    // options.fileInput: a jQuery collection of file input fields\n    // options.paramName: the parameter name for the file form data,\n    //  overrides the name property of the file input field(s),\n    //  can be a string or an array of strings.\n    // options.formData: an array of objects with name and value properties,\n    //  equivalent to the return data of .serializeArray(), e.g.:\n    //  [{name: 'a', value: 1}, {name: 'b', value: 2}]\n    // options.initialIframeSrc: the URL of the initial iframe src,\n    //  by default set to \"javascript:false;\"\n    $.ajaxTransport('iframe', function (options) {\n        if (options.async) {\n            // javascript:false as initial iframe src\n            // prevents warning popups on HTTPS in IE6:\n            /*jshint scripturl: true */\n            var initialIframeSrc = options.initialIframeSrc || 'javascript:false;',\n            /*jshint scripturl: false */\n                form,\n                iframe,\n                addParamChar;\n            return {\n                send: function (_, completeCallback) {\n                    form = $('<form style=\"display:none;\"></form>');\n                    form.attr('accept-charset', options.formAcceptCharset);\n                    addParamChar = /\\?/.test(options.url) ? '&' : '?';\n                    // XDomainRequest only supports GET and POST:\n                    if (options.type === 'DELETE') {\n                        options.url = options.url + addParamChar + '_method=DELETE';\n                        options.type = 'POST';\n                    } else if (options.type === 'PUT') {\n                        options.url = options.url + addParamChar + '_method=PUT';\n                        options.type = 'POST';\n                    } else if (options.type === 'PATCH') {\n                        options.url = options.url + addParamChar + '_method=PATCH';\n                        options.type = 'POST';\n                    }\n                    // IE versions below IE8 cannot set the name property of\n                    // elements that have already been added to the DOM,\n                    // so we set the name along with the iframe HTML markup:\n                    counter += 1;\n                    iframe = $(\n                        '<iframe src=\"' + initialIframeSrc +\n                            '\" name=\"iframe-transport-' + counter + '\"></iframe>'\n                    ).bind('load', function () {\n                        var fileInputClones,\n                            paramNames = $.isArray(options.paramName) ?\n                                    options.paramName : [options.paramName];\n                        iframe\n                            .unbind('load')\n                            .bind('load', function () {\n                                var response;\n                                // Wrap in a try/catch block to catch exceptions thrown\n                                // when trying to access cross-domain iframe contents:\n                                try {\n                                    response = iframe.contents();\n                                    // Google Chrome and Firefox do not throw an\n                                    // exception when calling iframe.contents() on\n                                    // cross-domain requests, so we unify the response:\n                                    if (!response.length || !response[0].firstChild) {\n                                        throw new Error();\n                                    }\n                                } catch (e) {\n                                    response = undefined;\n                                }\n                                // The complete callback returns the\n                                // iframe content document as response object:\n                                completeCallback(\n                                    200,\n                                    'success',\n                                    {'iframe': response}\n                                );\n                                // Fix for IE endless progress bar activity bug\n                                // (happens on form submits to iframe targets):\n                                $('<iframe src=\"' + initialIframeSrc + '\"></iframe>')\n                                    .appendTo(form);\n                                window.setTimeout(function () {\n                                    // Removing the form in a setTimeout call\n                                    // allows Chrome's developer tools to display\n                                    // the response result\n                                    form.remove();\n                                }, 0);\n                            });\n                        form\n                            .prop('target', iframe.prop('name'))\n                            .prop('action', options.url)\n                            .prop('method', options.type);\n                        if (options.formData) {\n                            $.each(options.formData, function (index, field) {\n                                $('<input type=\"hidden\"/>')\n                                    .prop('name', field.name)\n                                    .val(field.value)\n                                    .appendTo(form);\n                            });\n                        }\n                        if (options.fileInput && options.fileInput.length &&\n                                options.type === 'POST') {\n                            fileInputClones = options.fileInput.clone();\n                            // Insert a clone for each file input field:\n                            options.fileInput.after(function (index) {\n                                return fileInputClones[index];\n                            });\n                            if (options.paramName) {\n                                options.fileInput.each(function (index) {\n                                    $(this).prop(\n                                        'name',\n                                        paramNames[index] || options.paramName\n                                    );\n                                });\n                            }\n                            // Appending the file input fields to the hidden form\n                            // removes them from their original location:\n                            form\n                                .append(options.fileInput)\n                                .prop('enctype', 'multipart/form-data')\n                                // enctype must be set as encoding for IE:\n                                .prop('encoding', 'multipart/form-data');\n                            // Remove the HTML5 form attribute from the input(s):\n                            options.fileInput.removeAttr('form');\n                        }\n                        form.submit();\n                        // Insert the file input fields at their original location\n                        // by replacing the clones with the originals:\n                        if (fileInputClones && fileInputClones.length) {\n                            options.fileInput.each(function (index, input) {\n                                var clone = $(fileInputClones[index]);\n                                // Restore the original name and form properties:\n                                $(input)\n                                    .prop('name', clone.prop('name'))\n                                    .attr('form', clone.attr('form'));\n                                clone.replaceWith(input);\n                            });\n                        }\n                    });\n                    form.append(iframe).appendTo(document.body);\n                },\n                abort: function () {\n                    if (iframe) {\n                        // javascript:false as iframe src aborts the request\n                        // and prevents warning popups on HTTPS in IE6.\n                        // concat is used to avoid the \"Script URL\" JSLint error:\n                        iframe\n                            .unbind('load')\n                            .prop('src', initialIframeSrc);\n                    }\n                    if (form) {\n                        form.remove();\n                    }\n                }\n            };\n        }\n    });\n\n    // The iframe transport returns the iframe content document as response.\n    // The following adds converters from iframe to text, json, html, xml\n    // and script.\n    // Please note that the Content-Type for JSON responses has to be text/plain\n    // or text/html, if the browser doesn't include application/json in the\n    // Accept header, else IE will show a download dialog.\n    // The Content-Type for XML responses on the other hand has to be always\n    // application/xml or text/xml, so IE properly parses the XML response.\n    // See also\n    // https://github.com/blueimp/jQuery-File-Upload/wiki/Setup#content-type-negotiation\n    $.ajaxSetup({\n        converters: {\n            'iframe text': function (iframe) {\n                return iframe && $(iframe[0].body).text();\n            },\n            'iframe json': function (iframe) {\n                return iframe && $.parseJSON($(iframe[0].body).text());\n            },\n            'iframe html': function (iframe) {\n                return iframe && $(iframe[0].body).html();\n            },\n            'iframe xml': function (iframe) {\n                var xmlDoc = iframe && iframe[0];\n                return xmlDoc && $.isXMLDoc(xmlDoc) ? xmlDoc :\n                        $.parseXML((xmlDoc.XMLDocument && xmlDoc.XMLDocument.xml) ||\n                            $(xmlDoc.body).html());\n            },\n            'iframe script': function (iframe) {\n                return iframe && $.globalEval($(iframe[0].body).text());\n            }\n        }\n    });\n\n}));\n","/*\n * jQuery File Upload Plugin 5.42.0\n * https://github.com/blueimp/jQuery-File-Upload\n *\n * Copyright 2010, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * http://www.opensource.org/licenses/MIT\n */\n\n/* jshint nomen:false */\n/* global define, window, document, location, Blob, FormData */\n\n(function (factory) {\n  'use strict';\n  // Added by me so that it compiles with velocity\n  if (!window) {\n    window = {};\n  }\n  if (typeof define === 'function' && define.amd) {\n    // Register as an anonymous AMD module:\n    define([\n      'jquery',\n      'jquery.ui.widget'\n    ], factory);\n  } else {\n    // Browser globals:\n    factory(window.jQuery);\n  }\n}(function ($) {\n  'use strict';\n\n  // Detect file input support, based on\n  // http://viljamis.com/blog/2012/file-upload-support-on-mobile/\n  $.support.fileInput = !(new RegExp(\n    // Handle devices which give false positives for the feature detection:\n    '(Android (1\\\\.[0156]|2\\\\.[01]))' +\n    '|(Windows Phone (OS 7|8\\\\.0))|(XBLWP)|(ZuneWP)|(WPDesktop)' +\n    '|(w(eb)?OSBrowser)|(webOS)' +\n    '|(Kindle/(1\\\\.0|2\\\\.[05]|3\\\\.0))'\n  ).test(window.navigator.userAgent) ||\n    // Feature detection for all other devices:\n  $('<input type=\"file\">').prop('disabled'));\n\n  // The FileReader API is not actually used, but works as feature detection,\n  // as some Safari versions (5?) support XHR file uploads via the FormData API,\n  // but not non-multipart XHR file uploads.\n  // window.XMLHttpRequestUpload is not available on IE10, so we check for\n  // window.ProgressEvent instead to detect XHR2 file upload capability:\n  $.support.xhrFileUpload = !!(window.ProgressEvent && window.FileReader);\n  $.support.xhrFormDataFileUpload = !!window.FormData;\n\n  // Detect support for Blob slicing (required for chunked uploads):\n  $.support.blobSlice = window.Blob && (Blob.prototype.slice ||\n  Blob.prototype.webkitSlice || Blob.prototype.mozSlice);\n\n  // Helper function to create drag handlers for dragover/dragenter/dragleave:\n  function getDragHandler(type) {\n    var isDragOver = type === 'dragover';\n    return function (e) {\n      e.dataTransfer = e.originalEvent && e.originalEvent.dataTransfer;\n      var dataTransfer = e.dataTransfer;\n      if (dataTransfer && $.inArray('Files', dataTransfer.types) !== -1 &&\n        this._trigger(\n          type,\n          $.Event(type, {delegatedEvent: e})\n        ) !== false) {\n        e.preventDefault();\n        if (isDragOver) {\n          dataTransfer.dropEffect = 'copy';\n        }\n      }\n    };\n  }\n\n  // The fileupload widget listens for change events on file input fields defined\n  // via fileInput setting and paste or drop events of the given dropZone.\n  // In addition to the default jQuery Widget methods, the fileupload widget\n  // exposes the \"add\" and \"send\" methods, to add or directly send files using\n  // the fileupload API.\n  // By default, files added via file input selection, paste, drag & drop or\n  // \"add\" method are uploaded immediately, but it is possible to override\n  // the \"add\" callback option to queue file uploads.\n  $.widget('blueimp.fileupload', {\n\n    options: {\n      // The drop target element(s), by the default the complete document.\n      // Set to null to disable drag & drop support:\n      dropZone: $(document),\n      // The paste target element(s), by the default undefined.\n      // Set to a DOM node or jQuery object to enable file pasting:\n      pasteZone: undefined,\n      // The file input field(s), that are listened to for change events.\n      // If undefined, it is set to the file input fields inside\n      // of the widget element on plugin initialization.\n      // Set to null to disable the change listener.\n      fileInput: undefined,\n      // By default, the file input field is replaced with a clone after\n      // each input field change event. This is required for iframe transport\n      // queues and allows change events to be fired for the same file\n      // selection, but can be disabled by setting the following option to false:\n      replaceFileInput: true,\n      // The parameter name for the file form data (the request argument name).\n      // If undefined or empty, the name property of the file input field is\n      // used, or \"files[]\" if the file input name property is also empty,\n      // can be a string or an array of strings:\n      paramName: undefined,\n      // By default, each file of a selection is uploaded using an individual\n      // request for XHR type uploads. Set to false to upload file\n      // selections in one request each:\n      singleFileUploads: true,\n      // To limit the number of files uploaded with one XHR request,\n      // set the following option to an integer greater than 0:\n      limitMultiFileUploads: undefined,\n      // The following option limits the number of files uploaded with one\n      // XHR request to keep the request size under or equal to the defined\n      // limit in bytes:\n      limitMultiFileUploadSize: undefined,\n      // Multipart file uploads add a number of bytes to each uploaded file,\n      // therefore the following option adds an overhead for each file used\n      // in the limitMultiFileUploadSize configuration:\n      limitMultiFileUploadSizeOverhead: 512,\n      // Set the following option to true to issue all file upload requests\n      // in a sequential order:\n      sequentialUploads: false,\n      // To limit the number of concurrent uploads,\n      // set the following option to an integer greater than 0:\n      limitConcurrentUploads: undefined,\n      // Set the following option to true to force iframe transport uploads:\n      forceIframeTransport: false,\n      // Set the following option to the location of a redirect url on the\n      // origin server, for cross-domain iframe transport uploads:\n      redirect: undefined,\n      // The parameter name for the redirect url, sent as part of the form\n      // data and set to 'redirect' if this option is empty:\n      redirectParamName: undefined,\n      // Set the following option to the location of a postMessage window,\n      // to enable postMessage transport uploads:\n      postMessage: undefined,\n      // By default, XHR file uploads are sent as multipart/form-data.\n      // The iframe transport is always using multipart/form-data.\n      // Set to false to enable non-multipart XHR uploads:\n      multipart: true,\n      // To upload large files in smaller chunks, set the following option\n      // to a preferred maximum chunk size. If set to 0, null or undefined,\n      // or the browser does not support the required Blob API, files will\n      // be uploaded as a whole.\n      maxChunkSize: undefined,\n      // When a non-multipart upload or a chunked multipart upload has been\n      // aborted, this option can be used to resume the upload by setting\n      // it to the size of the already uploaded bytes. This option is most\n      // useful when modifying the options object inside of the \"add\" or\n      // \"send\" callbacks, as the options are cloned for each file upload.\n      uploadedBytes: undefined,\n      // By default, failed (abort or error) file uploads are removed from the\n      // global progress calculation. Set the following option to false to\n      // prevent recalculating the global progress data:\n      recalculateProgress: true,\n      // Interval in milliseconds to calculate and trigger progress events:\n      progressInterval: 100,\n      // Interval in milliseconds to calculate progress bitrate:\n      bitrateInterval: 500,\n      // By default, uploads are started automatically when adding files:\n      autoUpload: true,\n\n      // Error and info messages:\n      messages: {\n        uploadedBytes: 'Uploaded bytes exceed file size'\n      },\n\n      // Translation function, gets the message key to be translated\n      // and an object with context specific data as arguments:\n      i18n: function (message, context) {\n        message = this.messages[message] || message.toString();\n        if (context) {\n          $.each(context, function (key, value) {\n            message = message.replace('{' + key + '}', value);\n          });\n        }\n        return message;\n      },\n\n      // Additional form data to be sent along with the file uploads can be set\n      // using this option, which accepts an array of objects with name and\n      // value properties, a function returning such an array, a FormData\n      // object (for XHR file uploads), or a simple object.\n      // The form of the first fileInput is given as parameter to the function:\n      formData: function (form) {\n        return form.serializeArray();\n      },\n\n      // The add callback is invoked as soon as files are added to the fileupload\n      // widget (via file input selection, drag & drop, paste or add API call).\n      // If the singleFileUploads option is enabled, this callback will be\n      // called once for each file in the selection for XHR file uploads, else\n      // once for each file selection.\n      //\n      // The upload starts when the submit method is invoked on the data parameter.\n      // The data object contains a files property holding the added files\n      // and allows you to override plugin options as well as define ajax settings.\n      //\n      // Listeners for this callback can also be bound the following way:\n      // .bind('fileuploadadd', func);\n      //\n      // data.submit() returns a Promise object and allows to attach additional\n      // handlers using jQuery's Deferred callbacks:\n      // data.submit().done(func).fail(func).always(func);\n      add: function (e, data) {\n        if (e.isDefaultPrevented()) {\n          return false;\n        }\n        if (data.autoUpload || (data.autoUpload !== false &&\n          $(this).fileupload('option', 'autoUpload'))) {\n          data.process().done(function () {\n            data.submit();\n          });\n        }\n      },\n\n      // Other callbacks:\n\n      // Callback for the submit event of each file upload:\n      // submit: function (e, data) {}, // .bind('fileuploadsubmit', func);\n\n      // Callback for the start of each file upload request:\n      // send: function (e, data) {}, // .bind('fileuploadsend', func);\n\n      // Callback for successful uploads:\n      // done: function (e, data) {}, // .bind('fileuploaddone', func);\n\n      // Callback for failed (abort or error) uploads:\n      // fail: function (e, data) {}, // .bind('fileuploadfail', func);\n\n      // Callback for completed (success, abort or error) requests:\n      // always: function (e, data) {}, // .bind('fileuploadalways', func);\n\n      // Callback for upload progress events:\n      // progress: function (e, data) {}, // .bind('fileuploadprogress', func);\n\n      // Callback for global upload progress events:\n      // progressall: function (e, data) {}, // .bind('fileuploadprogressall', func);\n\n      // Callback for uploads start, equivalent to the global ajaxStart event:\n      // start: function (e) {}, // .bind('fileuploadstart', func);\n\n      // Callback for uploads stop, equivalent to the global ajaxStop event:\n      // stop: function (e) {}, // .bind('fileuploadstop', func);\n\n      // Callback for change events of the fileInput(s):\n      // change: function (e, data) {}, // .bind('fileuploadchange', func);\n\n      // Callback for paste events to the pasteZone(s):\n      // paste: function (e, data) {}, // .bind('fileuploadpaste', func);\n\n      // Callback for drop events of the dropZone(s):\n      // drop: function (e, data) {}, // .bind('fileuploaddrop', func);\n\n      // Callback for dragover events of the dropZone(s):\n      // dragover: function (e) {}, // .bind('fileuploaddragover', func);\n\n      // Callback for the start of each chunk upload request:\n      // chunksend: function (e, data) {}, // .bind('fileuploadchunksend', func);\n\n      // Callback for successful chunk uploads:\n      // chunkdone: function (e, data) {}, // .bind('fileuploadchunkdone', func);\n\n      // Callback for failed (abort or error) chunk uploads:\n      // chunkfail: function (e, data) {}, // .bind('fileuploadchunkfail', func);\n\n      // Callback for completed (success, abort or error) chunk upload requests:\n      // chunkalways: function (e, data) {}, // .bind('fileuploadchunkalways', func);\n\n      // The plugin options are used as settings object for the ajax calls.\n      // The following are jQuery ajax settings required for the file uploads:\n      processData: false,\n      contentType: false,\n      cache: false\n    },\n\n    // A list of options that require reinitializing event listeners and/or\n    // special initialization code:\n    _specialOptions: [\n      'fileInput',\n      'dropZone',\n      'pasteZone',\n      'multipart',\n      'forceIframeTransport'\n    ],\n\n    _blobSlice: $.support.blobSlice && function () {\n      var slice = this.slice || this.webkitSlice || this.mozSlice;\n      return slice.apply(this, arguments);\n    },\n\n    _BitrateTimer: function () {\n      this.timestamp = ((Date.now) ? Date.now() : (new Date()).getTime());\n      this.loaded = 0;\n      this.bitrate = 0;\n      this.getBitrate = function (now, loaded, interval) {\n        var timeDiff = now - this.timestamp;\n        if (!this.bitrate || !interval || timeDiff > interval) {\n          this.bitrate = (loaded - this.loaded) * (1000 / timeDiff) * 8;\n          this.loaded = loaded;\n          this.timestamp = now;\n        }\n        return this.bitrate;\n      };\n    },\n\n    _isXHRUpload: function (options) {\n      return !options.forceIframeTransport &&\n        ((!options.multipart && $.support.xhrFileUpload) ||\n        $.support.xhrFormDataFileUpload);\n    },\n\n    _getFormData: function (options) {\n      var formData;\n      if ($.type(options.formData) === 'function') {\n        return options.formData(options.form);\n      }\n      if ($.isArray(options.formData)) {\n        return options.formData;\n      }\n      if ($.type(options.formData) === 'object') {\n        formData = [];\n        $.each(options.formData, function (name, value) {\n          formData.push({name: name, value: value});\n        });\n        return formData;\n      }\n      return [];\n    },\n\n    _getTotal: function (files) {\n      var total = 0;\n      $.each(files, function (index, file) {\n        total += file.size || 1;\n      });\n      return total;\n    },\n\n    _initProgressObject: function (obj) {\n      var progress = {\n        loaded: 0,\n        total: 0,\n        bitrate: 0\n      };\n      if (obj._progress) {\n        $.extend(obj._progress, progress);\n      } else {\n        obj._progress = progress;\n      }\n    },\n\n    _initResponseObject: function (obj) {\n      var prop;\n      if (obj._response) {\n        for (prop in obj._response) {\n          if (obj._response.hasOwnProperty(prop)) {\n            delete obj._response[prop];\n          }\n        }\n      } else {\n        obj._response = {};\n      }\n    },\n\n    _onProgress: function (e, data) {\n      if (e.lengthComputable) {\n        var now = ((Date.now) ? Date.now() : (new Date()).getTime()),\n          loaded;\n        if (data._time && data.progressInterval &&\n          (now - data._time < data.progressInterval) &&\n          e.loaded !== e.total) {\n          return;\n        }\n        data._time = now;\n        loaded = Math.floor(\n          e.loaded / e.total * (data.chunkSize || data._progress.total)\n        ) + (data.uploadedBytes || 0);\n        // Add the difference from the previously loaded state\n        // to the global loaded counter:\n        this._progress.loaded += (loaded - data._progress.loaded);\n        this._progress.bitrate = this._bitrateTimer.getBitrate(\n          now,\n          this._progress.loaded,\n          data.bitrateInterval\n        );\n        data._progress.loaded = data.loaded = loaded;\n        data._progress.bitrate = data.bitrate = data._bitrateTimer.getBitrate(\n          now,\n          loaded,\n          data.bitrateInterval\n        );\n        // Trigger a custom progress event with a total data property set\n        // to the file size(s) of the current upload and a loaded data\n        // property calculated accordingly:\n        this._trigger(\n          'progress',\n          $.Event('progress', {delegatedEvent: e}),\n          data\n        );\n        // Trigger a global progress event for all current file uploads,\n        // including ajax calls queued for sequential file uploads:\n        this._trigger(\n          'progressall',\n          $.Event('progressall', {delegatedEvent: e}),\n          this._progress\n        );\n      }\n    },\n\n    _initProgressListener: function (options) {\n      var that = this,\n        xhr = options.xhr ? options.xhr() : $.ajaxSettings.xhr();\n      // Accesss to the native XHR object is required to add event listeners\n      // for the upload progress event:\n      if (xhr.upload) {\n        $(xhr.upload).bind('progress', function (e) {\n          var oe = e.originalEvent;\n          // Make sure the progress event properties get copied over:\n          e.lengthComputable = oe.lengthComputable;\n          e.loaded = oe.loaded;\n          e.total = oe.total;\n          that._onProgress(e, options);\n        });\n        options.xhr = function () {\n          return xhr;\n        };\n      }\n    },\n\n    _isInstanceOf: function (type, obj) {\n      // Cross-frame instanceof check\n      return Object.prototype.toString.call(obj) === '[object ' + type + ']';\n    },\n\n    _initXHRData: function (options) {\n      var that = this,\n        formData,\n        file = options.files[0],\n      // Ignore non-multipart setting if not supported:\n        multipart = options.multipart || !$.support.xhrFileUpload,\n        paramName = $.type(options.paramName) === 'array' ?\n          options.paramName[0] : options.paramName;\n      options.headers = $.extend({}, options.headers);\n      if (options.contentRange) {\n        options.headers['Content-Range'] = options.contentRange;\n      }\n      if (!multipart || options.blob || !this._isInstanceOf('File', file)) {\n        options.headers['Content-Disposition'] = 'attachment; filename=\"' +\n        encodeURI(file.name) + '\"';\n      }\n      if (!multipart) {\n        options.contentType = file.type || 'application/octet-stream';\n        options.data = options.blob || file;\n      } else if ($.support.xhrFormDataFileUpload) {\n        if (options.postMessage) {\n          // window.postMessage does not allow sending FormData\n          // objects, so we just add the File/Blob objects to\n          // the formData array and let the postMessage window\n          // create the FormData object out of this array:\n          formData = this._getFormData(options);\n          if (options.blob) {\n            formData.push({\n              name: paramName,\n              value: options.blob\n            });\n          } else {\n            $.each(options.files, function (index, file) {\n              formData.push({\n                name: ($.type(options.paramName) === 'array' &&\n                options.paramName[index]) || paramName,\n                value: file\n              });\n            });\n          }\n        } else {\n          if (that._isInstanceOf('FormData', options.formData)) {\n            formData = options.formData;\n          } else {\n            formData = new FormData();\n            $.each(this._getFormData(options), function (index, field) {\n              formData.append(field.name, field.value);\n            });\n          }\n          if (options.blob) {\n            formData.append(paramName, options.blob, file.name);\n          } else {\n            $.each(options.files, function (index, file) {\n              // This check allows the tests to run with\n              // dummy objects:\n              if (that._isInstanceOf('File', file) ||\n                that._isInstanceOf('Blob', file)) {\n                formData.append(\n                  ($.type(options.paramName) === 'array' &&\n                  options.paramName[index]) || paramName,\n                  file,\n                  file.uploadName || file.name\n                );\n              }\n            });\n          }\n        }\n        options.data = formData;\n      }\n      // Blob reference is not needed anymore, free memory:\n      options.blob = null;\n    },\n\n    _initIframeSettings: function (options) {\n      var targetHost = $('<a></a>').prop('href', options.url).prop('host');\n      // Setting the dataType to iframe enables the iframe transport:\n      options.dataType = 'iframe ' + (options.dataType || '');\n      // The iframe transport accepts a serialized array as form data:\n      options.formData = this._getFormData(options);\n      // Add redirect url to form data on cross-domain uploads:\n      if (options.redirect && targetHost && targetHost !== location.host) {\n        options.formData.push({\n          name: options.redirectParamName || 'redirect',\n          value: options.redirect\n        });\n      }\n    },\n\n    _initDataSettings: function (options) {\n      if (this._isXHRUpload(options)) {\n        if (!this._chunkedUpload(options, true)) {\n          if (!options.data) {\n            this._initXHRData(options);\n          }\n          this._initProgressListener(options);\n        }\n        if (options.postMessage) {\n          // Setting the dataType to postmessage enables the\n          // postMessage transport:\n          options.dataType = 'postmessage ' + (options.dataType || '');\n        }\n      } else {\n        this._initIframeSettings(options);\n      }\n    },\n\n    _getParamName: function (options) {\n      var fileInput = $(options.fileInput),\n        paramName = options.paramName;\n      if (!paramName) {\n        paramName = [];\n        fileInput.each(function () {\n          var input = $(this),\n            name = input.prop('name') || 'files[]',\n            i = (input.prop('files') || [1]).length;\n          while (i) {\n            paramName.push(name);\n            i -= 1;\n          }\n        });\n        if (!paramName.length) {\n          paramName = [fileInput.prop('name') || 'files[]'];\n        }\n      } else if (!$.isArray(paramName)) {\n        paramName = [paramName];\n      }\n      return paramName;\n    },\n\n    _initFormSettings: function (options) {\n      // Retrieve missing options from the input field and the\n      // associated form, if available:\n      if (!options.form || !options.form.length) {\n        options.form = $(options.fileInput.prop('form'));\n        // If the given file input doesn't have an associated form,\n        // use the default widget file input's form:\n        if (!options.form.length) {\n          options.form = $(this.options.fileInput.prop('form'));\n        }\n      }\n      options.paramName = this._getParamName(options);\n      if (!options.url) {\n        options.url = options.form.prop('action') || location.href;\n      }\n      // The HTTP request method must be \"POST\" or \"PUT\":\n      options.type = (options.type ||\n      ($.type(options.form.prop('method')) === 'string' &&\n      options.form.prop('method')) || ''\n      ).toUpperCase();\n      if (options.type !== 'POST' && options.type !== 'PUT' &&\n        options.type !== 'PATCH') {\n        options.type = 'POST';\n      }\n      if (!options.formAcceptCharset) {\n        options.formAcceptCharset = options.form.attr('accept-charset');\n      }\n    },\n\n    _getAJAXSettings: function (data) {\n      var options = $.extend({}, this.options, data);\n      this._initFormSettings(options);\n      this._initDataSettings(options);\n      return options;\n    },\n\n    // jQuery 1.6 doesn't provide .state(),\n    // while jQuery 1.8+ removed .isRejected() and .isResolved():\n    _getDeferredState: function (deferred) {\n      if (deferred.state) {\n        return deferred.state();\n      }\n      if (deferred.isResolved()) {\n        return 'resolved';\n      }\n      if (deferred.isRejected()) {\n        return 'rejected';\n      }\n      return 'pending';\n    },\n\n    // Maps jqXHR callbacks to the equivalent\n    // methods of the given Promise object:\n    _enhancePromise: function (promise) {\n      promise.success = promise.done;\n      promise.error = promise.fail;\n      promise.complete = promise.always;\n      return promise;\n    },\n\n    // Creates and returns a Promise object enhanced with\n    // the jqXHR methods abort, success, error and complete:\n    _getXHRPromise: function (resolveOrReject, context, args) {\n      var dfd = $.Deferred(),\n        promise = dfd.promise();\n      context = context || this.options.context || promise;\n      if (resolveOrReject === true) {\n        dfd.resolveWith(context, args);\n      } else if (resolveOrReject === false) {\n        dfd.rejectWith(context, args);\n      }\n      promise.abort = dfd.promise;\n      return this._enhancePromise(promise);\n    },\n\n    // Adds convenience methods to the data callback argument:\n    _addConvenienceMethods: function (e, data) {\n      var that = this,\n        getPromise = function (args) {\n          return $.Deferred().resolveWith(that, args).promise();\n        };\n      data.process = function (resolveFunc, rejectFunc) {\n        if (resolveFunc || rejectFunc) {\n          data._processQueue = this._processQueue =\n            (this._processQueue || getPromise([this])).pipe(\n              function () {\n                if (data.errorThrown) {\n                  return $.Deferred()\n                    .rejectWith(that, [data]).promise();\n                }\n                return getPromise(arguments);\n              }\n            ).pipe(resolveFunc, rejectFunc);\n        }\n        return this._processQueue || getPromise([this]);\n      };\n      data.submit = function () {\n        if (this.state() !== 'pending') {\n          data.jqXHR = this.jqXHR =\n            (that._trigger(\n              'submit',\n              $.Event('submit', {delegatedEvent: e}),\n              this\n            ) !== false) && that._onSend(e, this);\n        }\n        return this.jqXHR || that._getXHRPromise();\n      };\n      data.abort = function () {\n        if (this.jqXHR) {\n          return this.jqXHR.abort();\n        }\n        this.errorThrown = 'abort';\n        that._trigger('fail', null, this);\n        return that._getXHRPromise(false);\n      };\n      data.state = function () {\n        if (this.jqXHR) {\n          return that._getDeferredState(this.jqXHR);\n        }\n        if (this._processQueue) {\n          return that._getDeferredState(this._processQueue);\n        }\n      };\n      data.processing = function () {\n        return !this.jqXHR && this._processQueue && that\n            ._getDeferredState(this._processQueue) === 'pending';\n      };\n      data.progress = function () {\n        return this._progress;\n      };\n      data.response = function () {\n        return this._response;\n      };\n    },\n\n    // Parses the Range header from the server response\n    // and returns the uploaded bytes:\n    _getUploadedBytes: function (jqXHR) {\n      var range = jqXHR.getResponseHeader('Range'),\n        parts = range && range.split('-'),\n        upperBytesPos = parts && parts.length > 1 &&\n          parseInt(parts[1], 10);\n      return upperBytesPos && upperBytesPos + 1;\n    },\n\n    // Uploads a file in multiple, sequential requests\n    // by splitting the file up in multiple blob chunks.\n    // If the second parameter is true, only tests if the file\n    // should be uploaded in chunks, but does not invoke any\n    // upload requests:\n    _chunkedUpload: function (options, testOnly) {\n      options.uploadedBytes = options.uploadedBytes || 0;\n      var that = this,\n        file = options.files[0],\n        fs = file.size,\n        ub = options.uploadedBytes,\n        mcs = options.maxChunkSize || fs,\n        slice = this._blobSlice,\n        dfd = $.Deferred(),\n        promise = dfd.promise(),\n        jqXHR,\n        upload;\n      if (!(this._isXHRUpload(options) && slice && (ub || mcs < fs)) ||\n        options.data) {\n        return false;\n      }\n      if (testOnly) {\n        return true;\n      }\n      if (ub >= fs) {\n        file.error = options.i18n('uploadedBytes');\n        return this._getXHRPromise(\n          false,\n          options.context,\n          [null, 'error', file.error]\n        );\n      }\n      // The chunk upload method:\n      upload = function () {\n        // Clone the options object for each chunk upload:\n        var o = $.extend({}, options),\n          currentLoaded = o._progress.loaded;\n        o.blob = slice.call(\n          file,\n          ub,\n          ub + mcs,\n          file.type\n        );\n        // Store the current chunk size, as the blob itself\n        // will be dereferenced after data processing:\n        o.chunkSize = o.blob.size;\n        // Expose the chunk bytes position range:\n        o.contentRange = 'bytes ' + ub + '-' +\n        (ub + o.chunkSize - 1) + '/' + fs;\n        // Process the upload data (the blob and potential form data):\n        that._initXHRData(o);\n        // Add progress listeners for this chunk upload:\n        that._initProgressListener(o);\n        jqXHR = ((that._trigger('chunksend', null, o) !== false && $.ajax(o)) ||\n        that._getXHRPromise(false, o.context))\n          .done(function (result, textStatus, jqXHR) {\n            ub = that._getUploadedBytes(jqXHR) ||\n            (ub + o.chunkSize);\n            // Create a progress event if no final progress event\n            // with loaded equaling total has been triggered\n            // for this chunk:\n            if (currentLoaded + o.chunkSize - o._progress.loaded) {\n              that._onProgress($.Event('progress', {\n                lengthComputable: true,\n                loaded: ub - o.uploadedBytes,\n                total: ub - o.uploadedBytes\n              }), o);\n            }\n            options.uploadedBytes = o.uploadedBytes = ub;\n            o.result = result;\n            o.textStatus = textStatus;\n            o.jqXHR = jqXHR;\n            that._trigger('chunkdone', null, o);\n            that._trigger('chunkalways', null, o);\n            if (ub < fs) {\n              // File upload not yet complete,\n              // continue with the next chunk:\n              upload();\n            } else {\n              dfd.resolveWith(\n                o.context,\n                [result, textStatus, jqXHR]\n              );\n            }\n          })\n          .fail(function (jqXHR, textStatus, errorThrown) {\n            o.jqXHR = jqXHR;\n            o.textStatus = textStatus;\n            o.errorThrown = errorThrown;\n            that._trigger('chunkfail', null, o);\n            that._trigger('chunkalways', null, o);\n            dfd.rejectWith(\n              o.context,\n              [jqXHR, textStatus, errorThrown]\n            );\n          });\n      };\n      this._enhancePromise(promise);\n      promise.abort = function () {\n        return jqXHR.abort();\n      };\n      upload();\n      return promise;\n    },\n\n    _beforeSend: function (e, data) {\n      if (this._active === 0) {\n        // the start callback is triggered when an upload starts\n        // and no other uploads are currently running,\n        // equivalent to the global ajaxStart event:\n        this._trigger('start');\n        // Set timer for global bitrate progress calculation:\n        this._bitrateTimer = new this._BitrateTimer();\n        // Reset the global progress values:\n        this._progress.loaded = this._progress.total = 0;\n        this._progress.bitrate = 0;\n      }\n      // Make sure the container objects for the .response() and\n      // .progress() methods on the data object are available\n      // and reset to their initial state:\n      this._initResponseObject(data);\n      this._initProgressObject(data);\n      data._progress.loaded = data.loaded = data.uploadedBytes || 0;\n      data._progress.total = data.total = this._getTotal(data.files) || 1;\n      data._progress.bitrate = data.bitrate = 0;\n      this._active += 1;\n      // Initialize the global progress values:\n      this._progress.loaded += data.loaded;\n      this._progress.total += data.total;\n    },\n\n    _onDone: function (result, textStatus, jqXHR, options) {\n      var total = options._progress.total,\n        response = options._response;\n      if (options._progress.loaded < total) {\n        // Create a progress event if no final progress event\n        // with loaded equaling total has been triggered:\n        this._onProgress($.Event('progress', {\n          lengthComputable: true,\n          loaded: total,\n          total: total\n        }), options);\n      }\n      response.result = options.result = result;\n      response.textStatus = options.textStatus = textStatus;\n      response.jqXHR = options.jqXHR = jqXHR;\n      this._trigger('done', null, options);\n    },\n\n    _onFail: function (jqXHR, textStatus, errorThrown, options) {\n      var response = options._response;\n      if (options.recalculateProgress) {\n        // Remove the failed (error or abort) file upload from\n        // the global progress calculation:\n        this._progress.loaded -= options._progress.loaded;\n        this._progress.total -= options._progress.total;\n      }\n      response.jqXHR = options.jqXHR = jqXHR;\n      response.textStatus = options.textStatus = textStatus;\n      response.errorThrown = options.errorThrown = errorThrown;\n      this._trigger('fail', null, options);\n    },\n\n    _onAlways: function (jqXHRorResult, textStatus, jqXHRorError, options) {\n      // jqXHRorResult, textStatus and jqXHRorError are added to the\n      // options object via done and fail callbacks\n      this._trigger('always', null, options);\n    },\n\n    _onSend: function (e, data) {\n      if (!data.submit) {\n        this._addConvenienceMethods(e, data);\n      }\n      var that = this,\n        jqXHR,\n        aborted,\n        slot,\n        pipe,\n        options = that._getAJAXSettings(data),\n        send = function () {\n          that._sending += 1;\n          // Set timer for bitrate progress calculation:\n          options._bitrateTimer = new that._BitrateTimer();\n          jqXHR = jqXHR || (\n          ((aborted || that._trigger(\n            'send',\n            $.Event('send', {delegatedEvent: e}),\n            options\n          ) === false) &&\n          that._getXHRPromise(false, options.context, aborted)) ||\n          that._chunkedUpload(options) || $.ajax(options)\n          ).done(function (result, textStatus, jqXHR) {\n              that._onDone(result, textStatus, jqXHR, options);\n            }).fail(function (jqXHR, textStatus, errorThrown) {\n              that._onFail(jqXHR, textStatus, errorThrown, options);\n            }).always(function (jqXHRorResult, textStatus, jqXHRorError) {\n              that._onAlways(\n                jqXHRorResult,\n                textStatus,\n                jqXHRorError,\n                options\n              );\n              that._sending -= 1;\n              that._active -= 1;\n              if (options.limitConcurrentUploads &&\n                options.limitConcurrentUploads > that._sending) {\n                // Start the next queued upload,\n                // that has not been aborted:\n                var nextSlot = that._slots.shift();\n                while (nextSlot) {\n                  if (that._getDeferredState(nextSlot) === 'pending') {\n                    nextSlot.resolve();\n                    break;\n                  }\n                  nextSlot = that._slots.shift();\n                }\n              }\n              if (that._active === 0) {\n                // The stop callback is triggered when all uploads have\n                // been completed, equivalent to the global ajaxStop event:\n                that._trigger('stop');\n              }\n            });\n          return jqXHR;\n        };\n      this._beforeSend(e, options);\n      if (this.options.sequentialUploads ||\n        (this.options.limitConcurrentUploads &&\n        this.options.limitConcurrentUploads <= this._sending)) {\n        if (this.options.limitConcurrentUploads > 1) {\n          slot = $.Deferred();\n          this._slots.push(slot);\n          pipe = slot.pipe(send);\n        } else {\n          this._sequence = this._sequence.pipe(send, send);\n          pipe = this._sequence;\n        }\n        // Return the piped Promise object, enhanced with an abort method,\n        // which is delegated to the jqXHR object of the current upload,\n        // and jqXHR callbacks mapped to the equivalent Promise methods:\n        pipe.abort = function () {\n          aborted = [undefined, 'abort', 'abort'];\n          if (!jqXHR) {\n            if (slot) {\n              slot.rejectWith(options.context, aborted);\n            }\n            return send();\n          }\n          return jqXHR.abort();\n        };\n        return this._enhancePromise(pipe);\n      }\n      return send();\n    },\n\n    _onAdd: function (e, data) {\n      var that = this,\n        result = true,\n        options = $.extend({}, this.options, data),\n        files = data.files,\n        filesLength = files.length,\n        limit = options.limitMultiFileUploads,\n        limitSize = options.limitMultiFileUploadSize,\n        overhead = options.limitMultiFileUploadSizeOverhead,\n        batchSize = 0,\n        paramName = this._getParamName(options),\n        paramNameSet,\n        paramNameSlice,\n        fileSet,\n        i,\n        j = 0;\n      if (limitSize && (!filesLength || files[0].size === undefined)) {\n        limitSize = undefined;\n      }\n      if (!(options.singleFileUploads || limit || limitSize) || !this._isXHRUpload(options)) {\n        fileSet = [files];\n        paramNameSet = [paramName];\n      } else if (!(options.singleFileUploads || limitSize) && limit) {\n        fileSet = [];\n        paramNameSet = [];\n        for (i = 0; i < filesLength; i += limit) {\n          fileSet.push(files.slice(i, i + limit));\n          paramNameSlice = paramName.slice(i, i + limit);\n          if (!paramNameSlice.length) {\n            paramNameSlice = paramName;\n          }\n          paramNameSet.push(paramNameSlice);\n        }\n      } else if (!options.singleFileUploads && limitSize) {\n        fileSet = [];\n        paramNameSet = [];\n        for (i = 0; i < filesLength; i = i + 1) {\n          batchSize += files[i].size + overhead;\n          if (i + 1 === filesLength ||\n            ((batchSize + files[i + 1].size + overhead) > limitSize) ||\n            (limit && i + 1 - j >= limit)) {\n            fileSet.push(files.slice(j, i + 1));\n            paramNameSlice = paramName.slice(j, i + 1);\n            if (!paramNameSlice.length) {\n              paramNameSlice = paramName;\n            }\n            paramNameSet.push(paramNameSlice);\n            j = i + 1;\n            batchSize = 0;\n          }\n        }\n      } else {\n        paramNameSet = paramName;\n      }\n      data.originalFiles = files;\n      $.each(fileSet || files, function (index, element) {\n        var newData = $.extend({}, data);\n        newData.files = fileSet ? element : [element];\n        newData.paramName = paramNameSet[index];\n        that._initResponseObject(newData);\n        that._initProgressObject(newData);\n        that._addConvenienceMethods(e, newData);\n        result = that._trigger(\n          'add',\n          $.Event('add', {delegatedEvent: e}),\n          newData\n        );\n        return result;\n      });\n      return result;\n    },\n\n    _replaceFileInput: function (data) {\n      var input = data.fileInput,\n        inputClone = input.clone(true);\n      // Add a reference for the new cloned file input to the data argument:\n      data.fileInputClone = inputClone;\n      $('<form></form>').append(inputClone)[0].reset();\n      // Detaching allows to insert the fileInput on another form\n      // without loosing the file input value:\n      input.after(inputClone).detach();\n      // Avoid memory leaks with the detached file input:\n      $.cleanData(input.unbind('remove'));\n      // Replace the original file input element in the fileInput\n      // elements set with the clone, which has been copied including\n      // event handlers:\n      this.options.fileInput = this.options.fileInput.map(function (i, el) {\n        if (el === input[0]) {\n          return inputClone[0];\n        }\n        return el;\n      });\n      // If the widget has been initialized on the file input itself,\n      // override this.element with the file input clone:\n      if (input[0] === this.element[0]) {\n        this.element = inputClone;\n      }\n    },\n\n    _handleFileTreeEntry: function (entry, path) {\n      var that = this,\n        dfd = $.Deferred(),\n        errorHandler = function (e) {\n          if (e && !e.entry) {\n            e.entry = entry;\n          }\n          // Since $.when returns immediately if one\n          // Deferred is rejected, we use resolve instead.\n          // This allows valid files and invalid items\n          // to be returned together in one set:\n          dfd.resolve([e]);\n        },\n        successHandler = function (entries) {\n          that._handleFileTreeEntries(\n            entries,\n            path + entry.name + '/'\n          ).done(function (files) {\n              dfd.resolve(files);\n            }).fail(errorHandler);\n        },\n        readEntries = function () {\n          dirReader.readEntries(function (results) {\n            if (!results.length) {\n              successHandler(entries);\n            } else {\n              entries = entries.concat(results);\n              readEntries();\n            }\n          }, errorHandler);\n        },\n        dirReader, entries = [];\n      path = path || '';\n      if (entry.isFile) {\n        if (entry._file) {\n          // Workaround for Chrome bug #149735\n          entry._file.relativePath = path;\n          dfd.resolve(entry._file);\n        } else {\n          entry.file(function (file) {\n            file.relativePath = path;\n            dfd.resolve(file);\n          }, errorHandler);\n        }\n      } else if (entry.isDirectory) {\n        dirReader = entry.createReader();\n        readEntries();\n      } else {\n        // Return an empy list for file system items\n        // other than files or directories:\n        dfd.resolve([]);\n      }\n      return dfd.promise();\n    },\n\n    _handleFileTreeEntries: function (entries, path) {\n      var that = this;\n      return $.when.apply(\n        $,\n        $.map(entries, function (entry) {\n          return that._handleFileTreeEntry(entry, path);\n        })\n      ).pipe(function () {\n          return Array.prototype.concat.apply(\n            [],\n            arguments\n          );\n        });\n    },\n\n    _getDroppedFiles: function (dataTransfer) {\n      dataTransfer = dataTransfer || {};\n      var items = dataTransfer.items;\n      if (items && items.length && (items[0].webkitGetAsEntry ||\n        items[0].getAsEntry)) {\n        return this._handleFileTreeEntries(\n          $.map(items, function (item) {\n            var entry;\n            if (item.webkitGetAsEntry) {\n              entry = item.webkitGetAsEntry();\n              if (entry) {\n                // Workaround for Chrome bug #149735:\n                entry._file = item.getAsFile();\n              }\n              return entry;\n            }\n            return item.getAsEntry();\n          })\n        );\n      }\n      return $.Deferred().resolve(\n        $.makeArray(dataTransfer.files)\n      ).promise();\n    },\n\n    _getSingleFileInputFiles: function (fileInput) {\n      fileInput = $(fileInput);\n      var entries = fileInput.prop('webkitEntries') ||\n          fileInput.prop('entries'),\n        files,\n        value;\n      if (entries && entries.length) {\n        return this._handleFileTreeEntries(entries);\n      }\n      files = $.makeArray(fileInput.prop('files'));\n      if (!files.length) {\n        value = fileInput.prop('value');\n        if (!value) {\n          return $.Deferred().resolve([]).promise();\n        }\n        // If the files property is not available, the browser does not\n        // support the File API and we add a pseudo File object with\n        // the input value as name with path information removed:\n        files = [{name: value.replace(/^.*\\\\/, '')}];\n      } else if (files[0].name === undefined && files[0].fileName) {\n        // File normalization for Safari 4 and Firefox 3:\n        $.each(files, function (index, file) {\n          file.name = file.fileName;\n          file.size = file.fileSize;\n        });\n      }\n      return $.Deferred().resolve(files).promise();\n    },\n\n    _getFileInputFiles: function (fileInput) {\n      if (!(fileInput instanceof $) || fileInput.length === 1) {\n        return this._getSingleFileInputFiles(fileInput);\n      }\n      return $.when.apply(\n        $,\n        $.map(fileInput, this._getSingleFileInputFiles)\n      ).pipe(function () {\n          return Array.prototype.concat.apply(\n            [],\n            arguments\n          );\n        });\n    },\n\n    _onChange: function (e) {\n      var that = this,\n        data = {\n          fileInput: $(e.target),\n          form: $(e.target.form)\n        };\n      this._getFileInputFiles(data.fileInput).always(function (files) {\n        data.files = files;\n        if (that.options.replaceFileInput) {\n          that._replaceFileInput(data);\n        }\n        if (that._trigger(\n            'change',\n            $.Event('change', {delegatedEvent: e}),\n            data\n          ) !== false) {\n          that._onAdd(e, data);\n        }\n      });\n    },\n\n    _onPaste: function (e) {\n      var items = e.originalEvent && e.originalEvent.clipboardData &&\n          e.originalEvent.clipboardData.items,\n        data = {files: []};\n      if (items && items.length) {\n        $.each(items, function (index, item) {\n          var file = item.getAsFile && item.getAsFile();\n          if (file) {\n            data.files.push(file);\n          }\n        });\n        if (this._trigger(\n            'paste',\n            $.Event('paste', {delegatedEvent: e}),\n            data\n          ) !== false) {\n          this._onAdd(e, data);\n        }\n      }\n    },\n\n    _onDrop: function (e) {\n      e.dataTransfer = e.originalEvent && e.originalEvent.dataTransfer;\n      var that = this,\n        dataTransfer = e.dataTransfer,\n        data = {};\n      if (dataTransfer && dataTransfer.files && dataTransfer.files.length) {\n        e.preventDefault();\n        this._getDroppedFiles(dataTransfer).always(function (files) {\n          data.files = files;\n          if (that._trigger(\n              'drop',\n              $.Event('drop', {delegatedEvent: e}),\n              data\n            ) !== false) {\n            that._onAdd(e, data);\n          }\n        });\n      }\n    },\n\n    _onDragOver: getDragHandler('dragover'),\n\n    _onDragEnter: getDragHandler('dragenter'),\n\n    _onDragLeave: getDragHandler('dragleave'),\n\n    _initEventHandlers: function () {\n      if (this._isXHRUpload(this.options)) {\n        this._on(this.options.dropZone, {\n          dragover: this._onDragOver,\n          drop: this._onDrop,\n          // event.preventDefault() on dragenter is required for IE10+:\n          dragenter: this._onDragEnter,\n          // dragleave is not required, but added for completeness:\n          dragleave: this._onDragLeave\n        });\n        this._on(this.options.pasteZone, {\n          paste: this._onPaste\n        });\n      }\n      if ($.support.fileInput) {\n        this._on(this.options.fileInput, {\n          change: this._onChange\n        });\n      }\n    },\n\n    _destroyEventHandlers: function () {\n      this._off(this.options.dropZone, 'dragenter dragleave dragover drop');\n      this._off(this.options.pasteZone, 'paste');\n      this._off(this.options.fileInput, 'change');\n    },\n\n    _setOption: function (key, value) {\n      var reinit = $.inArray(key, this._specialOptions) !== -1;\n      if (reinit) {\n        this._destroyEventHandlers();\n      }\n      this._super(key, value);\n      if (reinit) {\n        this._initSpecialOptions();\n        this._initEventHandlers();\n      }\n    },\n\n    _initSpecialOptions: function () {\n      var options = this.options;\n      if (options.fileInput === undefined) {\n        options.fileInput = this.element.is('input[type=\"file\"]') ?\n          this.element : this.element.find('input[type=\"file\"]');\n      } else if (!(options.fileInput instanceof $)) {\n        options.fileInput = $(options.fileInput);\n      }\n      if (!(options.dropZone instanceof $)) {\n        options.dropZone = $(options.dropZone);\n      }\n      if (!(options.pasteZone instanceof $)) {\n        options.pasteZone = $(options.pasteZone);\n      }\n    },\n\n    _getRegExp: function (str) {\n      var parts = str.split('/'),\n        modifiers = parts.pop();\n      parts.shift();\n      return new RegExp(parts.join('/'), modifiers);\n    },\n\n    _isRegExpOption: function (key, value) {\n      return key !== 'url' && $.type(value) === 'string' &&\n        /^\\/.*\\/[igm]{0,3}$/.test(value);\n    },\n\n    _initDataAttributes: function () {\n      var that = this,\n        options = this.options,\n        clone = $(this.element[0].cloneNode(false));\n      // Initialize options set via HTML5 data-attributes:\n      $.each(\n        clone.data(),\n        function (key, value) {\n          var dataAttributeName = 'data-' +\n              // Convert camelCase to hyphen-ated key:\n            key.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n          if (clone.attr(dataAttributeName)) {\n            if (that._isRegExpOption(key, value)) {\n              value = that._getRegExp(value);\n            }\n            options[key] = value;\n          }\n        }\n      );\n    },\n\n    _create: function () {\n      this._initDataAttributes();\n      this._initSpecialOptions();\n      this._slots = [];\n      this._sequence = this._getXHRPromise(true);\n      this._sending = this._active = 0;\n      this._initProgressObject(this);\n      this._initEventHandlers();\n    },\n\n    // This method is exposed to the widget API and allows to query\n    // the number of active uploads:\n    active: function () {\n      return this._active;\n    },\n\n    // This method is exposed to the widget API and allows to query\n    // the widget upload progress.\n    // It returns an object with loaded, total and bitrate properties\n    // for the running uploads:\n    progress: function () {\n      return this._progress;\n    },\n\n    // This method is exposed to the widget API and allows adding files\n    // using the fileupload API. The data parameter accepts an object which\n    // must have a files property and can contain additional options:\n    // .fileupload('add', {files: filesList});\n    add: function (data) {\n      var that = this;\n      if (!data || this.options.disabled) {\n        return;\n      }\n      if (data.fileInput && !data.files) {\n        this._getFileInputFiles(data.fileInput).always(function (files) {\n          data.files = files;\n          that._onAdd(null, data);\n        });\n      } else {\n        data.files = $.makeArray(data.files);\n        this._onAdd(null, data);\n      }\n    },\n\n    // This method is exposed to the widget API and allows sending files\n    // using the fileupload API. The data parameter accepts an object which\n    // must have a files or fileInput property and can contain additional options:\n    // .fileupload('send', {files: filesList});\n    // The method returns a Promise object for the file upload call.\n    send: function (data) {\n      if (data && !this.options.disabled) {\n        if (data.fileInput && !data.files) {\n          var that = this,\n            dfd = $.Deferred(),\n            promise = dfd.promise(),\n            jqXHR,\n            aborted;\n          promise.abort = function () {\n            aborted = true;\n            if (jqXHR) {\n              return jqXHR.abort();\n            }\n            dfd.reject(null, 'abort', 'abort');\n            return promise;\n          };\n          this._getFileInputFiles(data.fileInput).always(\n            function (files) {\n              if (aborted) {\n                return;\n              }\n              if (!files.length) {\n                dfd.reject();\n                return;\n              }\n              data.files = files;\n              jqXHR = that._onSend(null, data);\n              jqXHR.then(\n                function (result, textStatus, jqXHR) {\n                  dfd.resolve(result, textStatus, jqXHR);\n                },\n                function (jqXHR, textStatus, errorThrown) {\n                  dfd.reject(jqXHR, textStatus, errorThrown);\n                }\n              );\n            }\n          );\n          return this._enhancePromise(promise);\n        }\n        data.files = $.makeArray(data.files);\n        if (data.files.length) {\n          return this._onSend(null, data);\n        }\n      }\n      return this._getXHRPromise(false, data && data.context);\n    }\n\n  });\n\n}));\n","\nTemplate.__checkName(\"queueItem\");\nTemplate[\"queueItem\"] = new Template(\"Template.queueItem\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": \"uploadPanel\",\n    style: \"margin-top: 6px\"\n  }, \"\\n        \", HTML.DIV({\n    \"class\": function() {\n      return Spacebars.mustache(view.lookup(\"class\"), \"progressOuter\");\n    }\n  }, \"\\n            \", HTML.DIV({\n    \"class\": function() {\n      return Spacebars.mustache(view.lookup(\"class\"), \"progressInner\");\n    }\n  }, \"\\n                \", HTML.DIV({\n    \"class\": function() {\n      return Spacebars.mustache(view.lookup(\"class\"), \"progressBar\");\n    },\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    style: function() {\n      return Spacebars.mustache(view.lookup(\"progress\"));\n    }\n  }, \"\\n                    \", HTML.Raw(\"&nbsp;\"), \"\\n                \"), \"\\n                \", HTML.DIV({\n    \"class\": \"progress-label\"\n  }, \"\\n                    \", Blaze.View(\"lookup:infoLabel\", function() {\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"infoLabel\")));\n  }), \"\\n                \"), \"\\n            \"), \"\\n        \"), \"\\n\\n        \", Blaze._TemplateWith(function() {\n    return {\n      state: Spacebars.call(view.lookup(\"buttonState\")),\n      type: Spacebars.call(view.lookup(\"type\")),\n      uploadContext: Spacebars.call(view.lookup(\"uploadContext\")),\n      name: Spacebars.call(Spacebars.dot(view.lookup(\".\"), \"item\", \"name\"))\n    };\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"buttons\"));\n  }), \"\\n    \");\n}));\n","Template['queueItem'].helpers({\n  'class': function(what) {\n    return Uploader.UI[this.type][what] ;\n  },\n  'infoLabel': function() {\n    var progress = this.uploadContext.queue[this.item.name].get();\n    return progress.running ?\n      Uploader.formatProgress(this.item.name, progress.progress, progress.bitrate) :\n      (this.item.name + '&nbsp;<span style=\"font-size: smaller; color: grey\">' + bytesToSize(this.item.size) + '</span>');\n  },\n  buttonState: function() {\n    var that = this;\n    return {\n      'idle': function () {\n        return !that.uploadContext.queue[that.item.name].get().running ||\n          that.uploadContext.queue[that.item.name].get().progress === 100;\n      },\n      'cancelled': function () {\n        return that.uploadContext.queue[that.item.name].get().cancelled;\n      },\n      'waiting': function () {\n        return that.uploadContext.queue[that.item.name].get().progress !== 100;\n      },\n      'removeFromQueue': function() {\n        return true;\n      }\n    }\n  },\n  'progress': function() {\n    return 'width:' + this.uploadContext.queue[this.item.name].get().progress + '%';\n  }\n});","\nTemplate.__checkName(\"upload_bootstrap\");\nTemplate[\"upload_bootstrap\"] = new Template(\"Template.upload_bootstrap\", (function() {\n  var view = this;\n  return Blaze._TemplateWith(function() {\n    return {\n      type: Spacebars.call(\"bootstrap\"),\n      formData: Spacebars.call(view.lookup(\"formData\")),\n      fileTypes: Spacebars.call(view.lookup(\"fileTypes\")),\n      multiple: Spacebars.call(view.lookup(\"multiple\")),\n      callbacks: Spacebars.call(view.lookup(\"callbacks\")),\n      autoStart: Spacebars.call(view.lookup(\"autoStart\")),\n      contentType: Spacebars.call(view.lookup(\"contentType\"))\n    };\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"upload\"));\n  });\n}));\n\nTemplate.__checkName(\"upload_semanticUI\");\nTemplate[\"upload_semanticUI\"] = new Template(\"Template.upload_semanticUI\", (function() {\n  var view = this;\n  return Blaze._TemplateWith(function() {\n    return {\n      type: Spacebars.call(\"semanticUI\"),\n      formData: Spacebars.call(view.lookup(\"formData\")),\n      fileTypes: Spacebars.call(view.lookup(\"fileTypes\")),\n      multiple: Spacebars.call(view.lookup(\"multiple\")),\n      callbacks: Spacebars.call(view.lookup(\"callbacks\")),\n      autoStart: Spacebars.call(view.lookup(\"autoStart\")),\n      contentType: Spacebars.call(view.lookup(\"contentType\"))\n    };\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"upload\"));\n  });\n}));\n\nTemplate.__checkName(\"upload\");\nTemplate[\"upload\"] = new Template(\"Template.upload\", (function() {\n  var view = this;\n  return HTML.FORM({\n    method: \"POST\",\n    enctype: \"multipart/form-data\"\n  }, \"\\n\\n        \", HTML.DIV({\n    \"class\": \"uploadPanel\"\n  }, \"\\n            \", HTML.Raw(\"<!-- The fileinput-button span is used to style the file input field as button -->\"), \"\\n\\n            \", HTML.DIV({\n    \"class\": function() {\n      return Spacebars.mustache(view.lookup(\"class\"), \"upload\");\n    }\n  }, \"\\n                \", Blaze.View(\"lookup:ut9n\", function() {\n    return Spacebars.mustache(view.lookup(\"ut9n\"), \"browse\");\n  }), HTML.Raw(\"&hellip;\"), \" \", HTML.INPUT({\n    type: \"file\",\n    \"class\": \"jqUploadclass\",\n    multiple: function() {\n      return Spacebars.mustache(view.lookup(\"multiple\"));\n    },\n    \"data-form-data\": function() {\n      return Spacebars.mustache(view.lookup(\"submitData\"));\n    },\n    accept: function() {\n      return Spacebars.mustache(view.lookup(\"fileTypes\"));\n    }\n  }), \"\\n            \"), \"\\n\\n            \", HTML.DIV({\n    \"class\": function() {\n      return Spacebars.mustache(view.lookup(\"class\"), \"progressOuter\");\n    }\n  }, \"\\n                \", HTML.DIV({\n    \"class\": function() {\n      return Spacebars.mustache(view.lookup(\"class\"), \"progressInner\");\n    }\n  }, \"\\n                    \", HTML.DIV({\n    \"class\": function() {\n      return Spacebars.mustache(view.lookup(\"class\"), \"progressBar\");\n    },\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    style: function() {\n      return Spacebars.mustache(view.lookup(\"progress\"));\n    }\n  }, \"\\n                        \", HTML.Raw(\"&nbsp;\"), \"\\n                    \"), \"\\n                    \", HTML.DIV({\n    \"class\": \"progress-label\"\n  }, \"\\n                        \", Blaze.View(\"lookup:infoLabel\", function() {\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"infoLabel\")));\n  }), \"\\n                    \"), \"\\n                \"), \"\\n            \"), \"\\n\\n            \", Blaze._TemplateWith(function() {\n    return {\n      type: Spacebars.call(view.lookup(\"type\")),\n      state: Spacebars.call(view.lookup(\"buttonState\")),\n      uploadContext: Spacebars.call(view.lookup(\"uploadContext\")),\n      autoStart: Spacebars.call(view.lookup(\"autoStart\"))\n    };\n  }, function() {\n    return Spacebars.include(view.lookupTemplate(\"buttons\"));\n  }), \"\\n        \"), \"\\n        \", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"showQueue\"));\n  }, function() {\n    return [ \"\\n            \", HTML.DIV({\n      \"class\": \"panel panel-default\",\n      style: \"margin-top: 1px; background: #efefef\"\n    }, \"\\n                \", HTML.DIV({\n      \"class\": \"panel-body\"\n    }, \"\\n                    \", Blaze.Each(function() {\n      return Spacebars.call(view.lookup(\"queueItems\"));\n    }, function() {\n      return [ \"\\n                        \", Blaze._TemplateWith(function() {\n        return {\n          type: Spacebars.call(Spacebars.dot(view.lookup(\"..\"), \"type\")),\n          uploadContext: Spacebars.call(view.lookup(\"uploadContext\")),\n          item: Spacebars.call(view.lookup(\".\"))\n        };\n      }, function() {\n        return Spacebars.include(view.lookupTemplate(\"queueItem\"));\n      }), \"\\n                    \" ];\n    }), \"\\n                \"), \"\\n            \"), \"\\n        \" ];\n  }), \"\\n    \");\n}));\n","Template.registerHelper('ut9n', function (key){\n    return Uploader.localisation[key];\n});\n\n// each upload_multiple template instance holds its own local collection of files list\nTemplate['upload'].created = function () {\n  Uploader.init(this);\n\n  // copy values to context\n  if (this.data) {\n    this.autoStart = this.data.autoStart;\n  }\n};\n\nTemplate['upload'].helpers({\n  'class': function(where) {\n    return Uploader.UI[this.type][where];\n  },\n  'uploadContext': function() {\n    return Template.instance();\n  },\n  'submitData': function() {\n    if (this.formData) {\n      this.formData['contentType'] = this.contentType;\n    } else {\n      this.formData = {contentType: this.contentType};\n    }\n    return typeof this.formData == 'string' ? this.formData : JSON.stringify(this.formData);\n  },\n  'infoLabel': function() {\n    var instance = Template.instance();\n\n    var progress = instance.globalInfo.get();\n    var info = instance.info.get()\n    // we may have not yet selected a file\n    if (!instance.info.get()) {\n      return \"\";\n    }\n\n    return progress.running ?\n      Uploader.formatProgress(info.name, progress.progress, progress.bitrate) :\n      (info.name + '&nbsp;<span style=\"font-size: smaller; color: #333\">' + bytesToSize(info.size) + '</span>');\n  },\n  'progress': function() {\n    return 'width:' + Template.instance().globalInfo.get().progress + '%';\n  },\n  buttonState: function() {\n    var that = Template.instance();\n    return {\n      'idle': function () {\n        return !that.globalInfo.get().running;\n      },\n      'cancelled': function () {\n        return that.globalInfo.get().cancelled;\n      },\n      'waiting': function () {\n        return that.globalInfo.get().progress !== 100;\n      },\n      'removeFromQueue': function() {\n        return false;\n      }\n    }\n  },\n  'queueItems': function() {\n    return Template.instance().queueView.get();\n  },\n  'showQueue': function() {\n    return Template.instance().queueView.get().length > 1;\n  }\n});\n\nTemplate['upload'].rendered = function () {\n  Uploader.render.call(this);\n};\n","\nTemplate.__checkName(\"buttons\");\nTemplate[\"buttons\"] = new Template(\"Template.buttons\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"idle\"));\n  }, function() {\n    return [ \"\\n        \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"cancelled\"));\n    }, function() {\n      return [ \"\\n            \", HTML.DIV({\n        \"class\": function() {\n          return Spacebars.mustache(view.lookup(\"class\"), \"cancelledButton\");\n        }\n      }, \"\\n                \", HTML.I({\n        \"class\": function() {\n          return Spacebars.mustache(view.lookup(\"class\"), \"cancelledButtonIcon\");\n        }\n      }), \"\\n                \", HTML.SPAN(Blaze.View(\"lookup:ut9n\", function() {\n        return Spacebars.mustache(view.lookup(\"ut9n\"), \"cancelled\");\n      })), \"\\n            \"), \"\\n        \" ];\n    }, function() {\n      return [ \"\\n            \", Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"waiting\"));\n      }, function() {\n        return [ \"\\n                \", Blaze.If(function() {\n          return Spacebars.call(view.lookup(\"removeFromQueue\"));\n        }, function() {\n          return [ \"\\n                    \", HTML.DIV({\n            type: \"submit\",\n            \"class\": function() {\n              return Spacebars.mustache(view.lookup(\"class\"), \"removeButton\");\n            }\n          }, \"\\n                        \", HTML.I({\n            \"class\": function() {\n              return Spacebars.mustache(view.lookup(\"class\"), \"removeButtonIcon\");\n            }\n          }), \"\\n                        \", HTML.SPAN(Blaze.View(\"lookup:ut9n\", function() {\n            return Spacebars.mustache(view.lookup(\"ut9n\"), \"remove\");\n          })), \"\\n                    \"), \"\\n                \" ];\n        }, function() {\n          return [ \"\\n                    \", Blaze.Unless(function() {\n            return Spacebars.call(view.lookup(\"autoStart\"));\n          }, function() {\n            return [ \"\\n                        \", HTML.DIV({\n              type: \"submit\",\n              \"class\": function() {\n                return Spacebars.mustache(view.lookup(\"class\"), \"startButton\");\n              }\n            }, \"\\n                            \", HTML.I({\n              \"class\": function() {\n                return Spacebars.mustache(view.lookup(\"class\"), \"startButtonIcon\");\n              }\n            }), \"\\n                            \", HTML.SPAN(Blaze.View(\"lookup:ut9n\", function() {\n              return Spacebars.mustache(view.lookup(\"ut9n\"), \"upload\");\n            })), \"\\n                        \"), \"\\n                    \" ];\n          }), \"\\n                \" ];\n        }), \"\\n            \" ];\n      }, function() {\n        return [ \"\\n                \", HTML.DIV({\n          \"class\": function() {\n            return Spacebars.mustache(view.lookup(\"class\"), \"doneButton\");\n          }\n        }, \"\\n                    \", HTML.I({\n          \"class\": function() {\n            return Spacebars.mustache(view.lookup(\"class\"), \"doneButtonIcon\");\n          }\n        }), \"\\n                    \", Blaze.View(\"lookup:ut9n\", function() {\n          return Spacebars.mustache(view.lookup(\"ut9n\"), \"done\");\n        }), \"\\n                \"), \"\\n            \" ];\n      }), \"\\n        \" ];\n    }), \"\\n    \" ];\n  }, function() {\n    return [ \"\\n        \", HTML.DIV({\n      \"class\": function() {\n        return Spacebars.mustache(view.lookup(\"class\"), \"cancelButton\");\n      }\n    }, \"\\n            \", HTML.I({\n      \"class\": function() {\n        return Spacebars.mustache(view.lookup(\"class\"), \"cancelButtonIcon\");\n      }\n    }), \"\\n            \", HTML.SPAN(Blaze.View(\"lookup:ut9n\", function() {\n      return Spacebars.mustache(view.lookup(\"ut9n\"), \"cancel\");\n    })), \"\\n        \"), \"\\n    \" ];\n  });\n}));\n","Template['buttons'].helpers({\n  'class': function(what) {\n    return Uploader.UI[this.type][what] ;\n  },\n  'idle': function() {\n    return this.state.idle();\n  },\n  'cancelled': function() {\n    return this.state.cancelled();\n  },\n  'waiting': function() {\n    return this.state.waiting();\n  },\n  'removeFromQueue': function() {\n    return this.state.removeFromQueue();\n  }\n});\n\nTemplate['buttons'].events({\n  'click .cancel': function (e) {\n    Uploader.cancelUpload.call(this.uploadContext, e, this.name);\n  },\n  'click .start': function (e) {\n    Uploader.startUpload.call(this.uploadContext, e, this.name);\n  },\n  'click .remove': function (e) {\n    Uploader.removeFromQueue.call(this.uploadContext, e, this.name);\n  },\n  'click .done': function(e) {\n    Uploader.reset.call(this.uploadContext, e);\n  }\n});","\nTemplate.__checkName(\"dropzone\");\nTemplate[\"dropzone\"] = new Template(\"Template.dropzone\", (function() {\n  var view = this;\n  return HTML.FORM({\n    method: \"POST\",\n    enctype: \"multipart/form-data\"\n  }, \"\\n        \", HTML.INPUT({\n    type: \"file\",\n    \"class\": \"jqUploadclass\",\n    multiple: \"true\",\n    \"data-content-category\": function() {\n      return Spacebars.mustache(view.lookup(\"contentType\"));\n    },\n    \"data-form-data\": function() {\n      return Spacebars.mustache(view.lookup(\"submitData\"));\n    },\n    accept: function() {\n      return Spacebars.mustache(view.lookup(\"fileTypes\"));\n    },\n    style: \"display: none\"\n  }), \"\\n        \", HTML.DIV({\n    \"class\": \"jqDropZone fade\"\n  }, Blaze.View(\"lookup:infoLabel\", function() {\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"infoLabel\")));\n  })), \"\\n    \");\n}));\n","// each upload_multiple template instance holds its own local collection of files list\nTemplate['dropzone'].created = function () {\n  // start automatically on drop\n  Template.instance().autoStart = true;\n\n  // init the control\n  Uploader.init(this);\n};\n\n// each upload_multiple template instance holds its own local collection of files list\nTemplate['dropzone'].helpers({\n  'infoLabel': function() {\n    var progress = Template.instance().globalInfo.get();\n\n    // we may have not yet selected a file\n    if (progress.progress == 0 || progress.progress == 100) {\n      return \"Drop files here\";\n    }\n    return progress.progress + \"%\";\n  },\n  'submitData': function() {\n    if (this.formData) {\n      this.formData['contentType'] = this.contentType;\n    } else {\n      this.formData = {contentType: this.contentType};\n    }\n    return typeof this.formData == 'string' ? this.formData : JSON.stringify(this.formData);\n  }\n});\n\nTemplate['dropzone'].rendered = function () {\n  // initialise the uploader area\n  Uploader.render.call(this);\n\n  // allow visual clues for drag and drop area\n  $(document).bind('dragover', function (e) {\n    var dropZone = $('.jqDropZone'),\n      foundDropzone,\n      timeout = window.dropZoneTimeout;\n    if (!timeout) {\n      dropZone.addClass('in');\n    }\n    else {\n      clearTimeout(timeout);\n    }\n    var found = false,\n      node = e.target;\n    do {\n      if ($(node).hasClass('jqDropZone')) {\n        found = true;\n        foundDropzone = $(node);\n        break;\n      }\n      node = node.parentNode;\n    } while (node != null);\n\n    dropZone.removeClass('in hover');\n    if (found) {\n      foundDropzone.addClass('hover');\n    }\n    window.dropZoneTimeout = setTimeout(function () {\n      window.dropZoneTimeout = null;\n      dropZone.removeClass('in hover');\n    }, 100);\n  });\n};","Uploader = {\n  logLevels: {\n    \"debug\": 0,\n    \"error\": 1\n  },\n  logLevel: 1,\n  log: function(level, text) {\n    if (level >= Uploader.logLevel) {\n      console.log(text);\n    }\n  },\n  localisation: {\n    browse: \"Browse\",\n    cancelled: \"Cancelled\",\n    remove: \"Remove\",\n    upload: \"Upload\",\n    done: \"Done\",\n    cancel: \"Cancel\"\n  },\n  UI: {\n    bootstrap: {\n      upload: 'btn btn-primary btn-file upload-control',\n      progressOuter: 'form-control upload-control',\n      progressInner: 'progressInner',\n      progressBar: 'progress-bar progress-bar-success progress-bar-striped',\n      removeButton: 'btn btn-default upload-control remove',\n      removeButtonIcon: 'glyphicon glyphicon-remove',\n      startButton: 'btn btn-info upload-control start',\n      startButtonIcon: 'glyphicon glyphicon-upload',\n      doneButton: 'btn btn-default upload-control done',\n      doneButtonIcon: 'glyphicon glyphicon-ok',\n      cancelButton: 'btn btn-danger upload-control cancel',\n      cancelButtonIcon: 'glyphicon glyphicon-stop',\n      cancelledButton: 'btn btn-warning upload-control',\n      cancelledButtonIcon: 'glyphicon glyphicon-cross'\n    },\n    semanticUI: {\n      upload: 'ui icon button btn-file leftButton upload-control',\n      progressOuter: 'progressOuter',\n      progressInner: 'semantic progressInner',\n      progressBar: 'bar progress-bar',\n      removeButton: 'ui red button upload-control remove rightButton',\n      removeButtonIcon: 'trash icon',\n      startButton: 'ui button primary upload-control start rightButton',\n      startButtonIcon: 'upload icon',\n      doneButton: 'ui green button upload-control rightButton done',\n      doneButtonIcon: 'icon thumbs up',\n      cancelButton: 'ui yellow button upload-control cancel rightButton',\n      cancelButtonIcon: 'icon stop',\n      cancelledButton: 'ui yellow button upload-control rightButton'\n    }\n  },\n  uploadUrl: '/upload',\n  createName: function(templateContext) {\n    if (templateContext.queue.length == 1) {\n      var file = templateContext.queue[0];\n      templateContext.info.set(file);\n    } else {\n      // calculate size\n      var file = {\n        name: templateContext.queue.length + ' files',\n        size: templateContext.queue.size\n      }\n      templateContext.info.set(file);\n    }\n  },\n  /**\n   * Starts upload\n   * @param e\n   * @param {string} name Name of the file in the queue that we want to upload\n   */\n  startUpload: function(e, name) {\n    if (e) e.preventDefault();\n\n    if (this.queue.length == 0) return;\n\n    var that = this;\n\n    $.each(this.queue, function(index, queueItem) {\n\n      var data = queueItem.data;\n      if (name && data.files[0].name !== name) return true;\n\n      data.jqXHR = data.submit()\n        .done(function(data, textStatus, jqXHR) {\n          // remove from queue\n          that.queue.splice(that.queue.indexOf(queueItem), 1);\n\n          Uploader.log(Uploader.logLevels.debug, 'data.sumbit.done: textStatus= ' + textStatus);\n\n          if (Uploader.status) {\n            Uploader.status(false, data, textStatus, jqXHR);\n          }\n        })\n        .fail(function(jqXHR, textStatus, errorThrown) {\n          // remove from queue\n          that.queue.splice(that.queue.indexOf(queueItem), 1);\n\n          if (jqXHR.statusText === 'abort') {\n            that.info.set({\n              name: 'Aborted',\n              size: 0\n            })\n          } else {\n            that.info.set({\n              name: 'Failed: ' + jqXHR.responseText + ' ' + jqXHR.status + ' ' + jqXHR.statusText,\n              size: 0\n            })\n          }\n          if (Uploader.status) {\n            Uploader.status(true, data, textStatus, jqXHR);\n          }\n\n          Uploader.log(Uploader.logLevels.debug, 'data.sumbit.fail: ' + jqXHR.responseText + ' ' + jqXHR.status + ' ' + jqXHR.statusText);\n        })\n        .always(function(data, textStatus, jqXHR) {\n          Uploader.log(Uploader.logLevels.debug, 'data.sumbit.always:  textStatus= ' + textStatus);\n        });\n    });\n  },\n  formatProgress: function(file, progress, bitrate) {\n    return progress + \"%&nbsp;of&nbsp;\" + file + \"&nbsp;<span style='font-size:smaller'>@&nbsp;\" + bytesToSize(bitrate) + \"&nbsp;/&nbsp;sec</span>\"\n  },\n  removeFromQueue: function(e, name) {\n    e.preventDefault();\n\n    // remove from data queue\n    var that = this;\n    $.each(this.queue, function(index, item) {\n      // skip all with different name\n      if (item.name === name) {\n        that.queue.splice(index, 1);\n        return false;\n      }\n    });\n\n    // set the queueView\n    this.queueView.set(this.queue);\n\n    // update name\n    Uploader.createName(this);\n  },\n  reset: function(e) {\n    e.preventDefault();\n    this.globalInfo.set({\n      running: false,\n      cancelled: false,\n      progress: 0,\n      bitrate: 0\n    });\n    this.info.set(\"\");\n  },\n  cancelUpload: function(e, name) {\n    e.preventDefault();\n\n    var that = this;\n    $.each(this.queue, function(index, queueItem) {\n      // skip all with different name\n      if (name && queueItem.name !== name) return true;\n\n      // cancel upload of non completed files\n      if (that.queue[queueItem.name].get().progress !== 100) {\n        queueItem.data.jqXHR.abort();\n\n        // set status to redraw interface\n        that.queue[queueItem.name].set({\n          running: false,\n          cancelled: true,\n          progress: 0,\n          bitrate: 0\n        });\n      }\n    });\n\n    // mark global as cancelled\n    if (!name) {\n      this.globalInfo.set({\n        running: false,\n        cancelled: true,\n        progress: 0,\n        bitrate: 0\n      })\n    }\n  },\n  init: function(data) {\n    // this is used to view the queue in the interface\n    data.queueView = new ReactiveVar([]);\n    // this holds all the data about the queue\n    data.queue = [];\n    // info about the global item being processed\n    data.info = new ReactiveVar;\n    // info about global progress\n    data.globalInfo = new ReactiveVar({\n      running: false,\n      progress: 0,\n      bitrate: 0\n    });\n  },\n  render: function() {\n    // template context is the template instance itself\n    var templateContext = this;\n    templateContext.progressBar = this.$('.progress-bar');\n    templateContext.progressLabel = this.$('.progress-label');\n    templateContext.uploadControl = this.$('.jqUploadclass');\n    templateContext.dropZone = this.$('.jqDropZone');\n\n    // this.data holds the template context (arguments supplied to the template in HTML)\n    var dataContext = this.data;\n\n    // attach the context to the form object (so that we can access it in the callbacks such as add() etc.)\n    this.find('form').uploadContext = templateContext;\n\n    // set the upload related callbacks for HTML node that has jqUploadclass specified for it\n    // Example html node: <input type=\"file\" class=\"jqUploadclass\" />\n    templateContext.uploadControl.fileupload({\n        url: Uploader.uploadUrl,\n        dataType: 'json',\n        dropZone: templateContext.dropZone,\n        add: function(e, data) {\n          Uploader.log(Uploader.logLevels.debug, 'render.add ');\n\n          // get dynamic formData\n          if (dataContext != null && dataContext.callbacks != null) {\n\n            // form data\n\n            if (dataContext.callbacks.formData != null) {\n              data.formData = dataContext.callbacks.formData();\n            }\n\n            // validate\n            if (dataContext.callbacks.validate != null &&\n              !dataContext.callbacks.validate(data.files)) {\n              return;\n            }\n          }\n\n          // adding file will clear the queue\n          if (dataContext == null ||\n            !dataContext.multiple) {\n            templateContext.queue = [];\n            templateContext.queueView.set([]);\n          }\n\n          // update the queue collection, so that the ui gets updated\n          $.each(data.files, function(index, file) {\n            var item = file;\n            item.data = data;\n            templateContext.queue[file.name] = new ReactiveVar({\n              running: false,\n              progress: 0\n            });\n            templateContext.queue.push(item);\n            templateContext.queue.size += parseInt(file.size);\n          });\n\n          // say name\n          Uploader.createName(templateContext);\n\n          // set template context\n          templateContext.queueView.set(templateContext.queue);\n\n          // we can automatically start the upload\n          if (templateContext.autoStart) {\n            Uploader.startUpload.call(templateContext);\n          }\n\n        }, // end of add callback handler\n        done: function(e, data) {\n          Uploader.log(Uploader.logLevels.debug, 'render.done ');\n\n          templateContext.globalInfo.set({\n            running: false,\n            progress: 100\n          });\n\n          $.each(data.result.files, function(index, file) {\n            Uploader.finished(index, file, templateContext);\n\n            // notify user\n            if (dataContext.callbacks != null &&\n              dataContext.callbacks.finished != null) {\n              dataContext.callbacks.finished(index, file, templateContext);\n            }\n          });\n        },\n        fail: function(e, data) {\n          Uploader.log(Uploader.logLevels.debug, 'render.fail ');\n        },\n        progress: function(e, data) {\n          // file progress is displayed only when single file is uploaded\n          var fi = templateContext.queue[data.files[0].name];\n          if (fi) {\n            fi.set({\n              running: true,\n              progress: parseInt(data.loaded / data.total * 100, 10),\n              bitrate: data.bitrate\n            });\n          }\n        },\n        progressall: function(e, data) {\n          templateContext.globalInfo.set({\n            running: true,\n            progress: parseInt(data.loaded / data.total * 100, 10),\n            bitrate: data.bitrate\n          });\n        },\n        drop: function(e, data) { // called when files are dropped onto ui\n          $.each(data.files, function(index, file) {\n            Uploader.log(Uploader.logLevels.debug, \"render.drop file: \" + file.name);\n          });\n        },\n        change: function(e, data) { // called when input selection changes (file selected)\n          // clear the queue, this is used to visualise all the data\n          templateContext.queue = [];\n          templateContext.queue.size = 0;\n          templateContext.progressBar.css('width', '0%');\n          templateContext.globalInfo.set({\n            running: false,\n            progress: 0\n          });\n\n          $.each(data.files, function(index, file) {\n            Uploader.log(Uploader.logLevels.debug, 'render.change file: ' + file.name);\n          });\n        }\n      })\n      .prop('disabled', ($.support != null && $.support.fileInput != null) ? !$.support.fileInput : false)\n      .parent().addClass(($.support != null && $.support.fileInput != null && !$.support.fileInput) ? 'disabled' : undefined);\n  },\n  finished: function() {}\n}\n\nbytesToSize = function(bytes) {\n  if (bytes == 0) return '0 Byte';\n  var k = 1000;\n  var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  var i = Math.floor(Math.log(bytes) / Math.log(k));\n  return (bytes / Math.pow(k, i)).toPrecision(3) + '&nbsp;' + sizes[i];\n}\n"]}}]