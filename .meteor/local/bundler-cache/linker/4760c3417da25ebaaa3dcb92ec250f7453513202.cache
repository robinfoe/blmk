[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/cwaring_modernizr/packages/cwaring_modernizr.js          //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n(function () {                                                       // 1\n                                                                     // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cwaring:modernizr/modernizr-dev.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*!                                                                                                                    // 1\n * modernizr v3.0.0pre                                                                                                 // 2\n * Build http://v3.modernizr.com/download/#-applicationcache-audio-backgroundsize-borderimage-borderradius-boxshadow-canvas-canvastext-cssanimations-csscolumns-cssgradients-cssreflections-csstransforms-csstransforms3d-csstransitions-draganddrop-flexbox-flexboxlegacy-fontface-generatedcontent-geolocation-hashchange-history-hsla-indexeddb-inlinesvg-input-inputtypes-localstorage-multiplebgs-opacity-postmessage-rgba-sessionstorage-smil-svg-svgclippaths-textshadow-video-webgl-websockets-websqldatabase-webworkers-addtest-cssclasses-domprefixes-hasevent-prefixed-prefixes-shiv-testallprops-testprop-teststyles\n *                                                                                                                     // 4\n * Copyright (c)                                                                                                       // 5\n *  Faruk Ates                                                                                                         // 6\n *  Paul Irish                                                                                                         // 7\n *  Alex Sexton                                                                                                        // 8\n *  Ryan Seddon                                                                                                        // 9\n *  Alexander Farkas                                                                                                   // 10\n *  Patrick Kettner                                                                                                    // 11\n *  Stu Cox                                                                                                            // 12\n *  Richard Herrera                                                                                                    // 13\n                                                                                                                       // 14\n * MIT License                                                                                                         // 15\n */                                                                                                                    // 16\n                                                                                                                       // 17\n/*                                                                                                                     // 18\n * Modernizr tests which native CSS3 and HTML5 features are available in the                                           // 19\n * current UA and makes the results available to you in two ways: as properties on                                     // 20\n * a global `Modernizr` object, and as classes on the `<html>` element. This                                           // 21\n * information allows you to progressively enhance your pages with a granular level                                    // 22\n * of control over the experience.                                                                                     // 23\n*/                                                                                                                     // 24\n                                                                                                                       // 25\n;(function(window, document, undefined){                                                                               // 26\n                                                                                                                       // 27\n  var classes = [];                                                                                                    // 28\n                                                                                                                       // 29\n                                                                                                                       // 30\n  // Take the html5 variable out of the                                                                                // 31\n  // html5shiv scope so we can return it.                                                                              // 32\n  var html5;                                                                                                           // 33\n  /**                                                                                                                  // 34\n  * @preserve HTML5 Shiv 3.7.2 | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed                                  // 35\n  */                                                                                                                   // 36\n  ;(function(window, document) {                                                                                       // 37\n  /*jshint evil:true */                                                                                                // 38\n    /** version */                                                                                                     // 39\n    var version = '3.7.2';                                                                                             // 40\n                                                                                                                       // 41\n    /** Preset options */                                                                                              // 42\n    var options = window.html5 || {};                                                                                  // 43\n                                                                                                                       // 44\n    /** Used to skip problem elements */                                                                               // 45\n    var reSkip = /^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i;                                 // 46\n                                                                                                                       // 47\n    /** Not all elements can be cloned in IE **/                                                                       // 48\n    var saveClones = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i;\n                                                                                                                       // 50\n    /** Detect whether the browser supports default html5 styles */                                                    // 51\n    var supportsHtml5Styles;                                                                                           // 52\n                                                                                                                       // 53\n    /** Name of the expando, to work with multiple documents or to re-shiv one document */                             // 54\n    var expando = '_html5shiv';                                                                                        // 55\n                                                                                                                       // 56\n    /** The id for the the documents expando */                                                                        // 57\n    var expanID = 0;                                                                                                   // 58\n                                                                                                                       // 59\n    /** Cached data for each document */                                                                               // 60\n    var expandoData = {};                                                                                              // 61\n                                                                                                                       // 62\n    /** Detect whether the browser supports unknown elements */                                                        // 63\n    var supportsUnknownElements;                                                                                       // 64\n                                                                                                                       // 65\n    (function() {                                                                                                      // 66\n      try {                                                                                                            // 67\n          var a = document.createElement('a');                                                                         // 68\n          a.innerHTML = '<xyz></xyz>';                                                                                 // 69\n          //if the hidden property is implemented we can assume, that the browser supports basic HTML5 Styles          // 70\n          supportsHtml5Styles = ('hidden' in a);                                                                       // 71\n                                                                                                                       // 72\n          supportsUnknownElements = a.childNodes.length == 1 || (function() {                                          // 73\n            // assign a false positive if unable to shiv                                                               // 74\n            (document.createElement)('a');                                                                             // 75\n            var frag = document.createDocumentFragment();                                                              // 76\n            return (                                                                                                   // 77\n              typeof frag.cloneNode == 'undefined' ||                                                                  // 78\n              typeof frag.createDocumentFragment == 'undefined' ||                                                     // 79\n              typeof frag.createElement == 'undefined'                                                                 // 80\n            );                                                                                                         // 81\n          }());                                                                                                        // 82\n      } catch(e) {                                                                                                     // 83\n        // assign a false positive if detection fails => unable to shiv                                                // 84\n        supportsHtml5Styles = true;                                                                                    // 85\n        supportsUnknownElements = true;                                                                                // 86\n      }                                                                                                                // 87\n                                                                                                                       // 88\n    }());                                                                                                              // 89\n                                                                                                                       // 90\n    /*--------------------------------------------------------------------------*/                                     // 91\n                                                                                                                       // 92\n    /**                                                                                                                // 93\n     * Creates a style sheet with the given CSS text and adds it to the document.                                      // 94\n     * @private                                                                                                        // 95\n     * @param {Document} ownerDocument The document.                                                                   // 96\n     * @param {String} cssText The CSS text.                                                                           // 97\n     * @returns {StyleSheet} The style element.                                                                        // 98\n     */                                                                                                                // 99\n    function addStyleSheet(ownerDocument, cssText) {                                                                   // 100\n      var p = ownerDocument.createElement('p'),                                                                        // 101\n          parent = ownerDocument.getElementsByTagName('head')[0] || ownerDocument.documentElement;                     // 102\n                                                                                                                       // 103\n      p.innerHTML = 'x<style>' + cssText + '</style>';                                                                 // 104\n      return parent.insertBefore(p.lastChild, parent.firstChild);                                                      // 105\n    }                                                                                                                  // 106\n                                                                                                                       // 107\n    /**                                                                                                                // 108\n     * Returns the value of `html5.elements` as an array.                                                              // 109\n     * @private                                                                                                        // 110\n     * @returns {Array} An array of shived element node names.                                                         // 111\n     */                                                                                                                // 112\n    function getElements() {                                                                                           // 113\n      var elements = html5.elements;                                                                                   // 114\n      return typeof elements == 'string' ? elements.split(' ') : elements;                                             // 115\n    }                                                                                                                  // 116\n                                                                                                                       // 117\n    /**                                                                                                                // 118\n     * Extends the built-in list of html5 elements                                                                     // 119\n     * @memberOf html5                                                                                                 // 120\n     * @param {String|Array} newElements whitespace separated list or array of new element names to shiv               // 121\n     * @param {Document} ownerDocument The context document.                                                           // 122\n     */                                                                                                                // 123\n    function addElements(newElements, ownerDocument) {                                                                 // 124\n      var elements = html5.elements;                                                                                   // 125\n      if(typeof elements != 'string'){                                                                                 // 126\n        elements = elements.join(' ');                                                                                 // 127\n      }                                                                                                                // 128\n      if(typeof newElements != 'string'){                                                                              // 129\n        newElements = newElements.join(' ');                                                                           // 130\n      }                                                                                                                // 131\n      html5.elements = elements +' '+ newElements;                                                                     // 132\n      shivDocument(ownerDocument);                                                                                     // 133\n    }                                                                                                                  // 134\n                                                                                                                       // 135\n     /**                                                                                                               // 136\n     * Returns the data associated to the given document                                                               // 137\n     * @private                                                                                                        // 138\n     * @param {Document} ownerDocument The document.                                                                   // 139\n     * @returns {Object} An object of data.                                                                            // 140\n     */                                                                                                                // 141\n    function getExpandoData(ownerDocument) {                                                                           // 142\n      var data = expandoData[ownerDocument[expando]];                                                                  // 143\n      if (!data) {                                                                                                     // 144\n          data = {};                                                                                                   // 145\n          expanID++;                                                                                                   // 146\n          ownerDocument[expando] = expanID;                                                                            // 147\n          expandoData[expanID] = data;                                                                                 // 148\n      }                                                                                                                // 149\n      return data;                                                                                                     // 150\n    }                                                                                                                  // 151\n                                                                                                                       // 152\n    /**                                                                                                                // 153\n     * returns a shived element for the given nodeName and document                                                    // 154\n     * @memberOf html5                                                                                                 // 155\n     * @param {String} nodeName name of the element                                                                    // 156\n     * @param {Document} ownerDocument The context document.                                                           // 157\n     * @returns {Object} The shived element.                                                                           // 158\n     */                                                                                                                // 159\n    function createElement(nodeName, ownerDocument, data){                                                             // 160\n      if (!ownerDocument) {                                                                                            // 161\n          ownerDocument = document;                                                                                    // 162\n      }                                                                                                                // 163\n      if(supportsUnknownElements){                                                                                     // 164\n          return ownerDocument.createElement(nodeName);                                                                // 165\n      }                                                                                                                // 166\n      if (!data) {                                                                                                     // 167\n          data = getExpandoData(ownerDocument);                                                                        // 168\n      }                                                                                                                // 169\n      var node;                                                                                                        // 170\n                                                                                                                       // 171\n      if (data.cache[nodeName]) {                                                                                      // 172\n          node = data.cache[nodeName].cloneNode();                                                                     // 173\n      } else if (saveClones.test(nodeName)) {                                                                          // 174\n          node = (data.cache[nodeName] = data.createElem(nodeName)).cloneNode();                                       // 175\n      } else {                                                                                                         // 176\n          node = data.createElem(nodeName);                                                                            // 177\n      }                                                                                                                // 178\n                                                                                                                       // 179\n      // Avoid adding some elements to fragments in IE < 9 because                                                     // 180\n      // * Attributes like `name` or `type` cannot be set/changed once an element                                      // 181\n      //   is inserted into a document/fragment                                                                        // 182\n      // * Link elements with `src` attributes that are inaccessible, as with                                          // 183\n      //   a 403 response, will cause the tab/window to crash                                                          // 184\n      // * Script elements appended to fragments will execute when their `src`                                         // 185\n      //   or `text` property is set                                                                                   // 186\n      return node.canHaveChildren && !reSkip.test(nodeName) && !node.tagUrn ? data.frag.appendChild(node) : node;      // 187\n    }                                                                                                                  // 188\n                                                                                                                       // 189\n    /**                                                                                                                // 190\n     * returns a shived DocumentFragment for the given document                                                        // 191\n     * @memberOf html5                                                                                                 // 192\n     * @param {Document} ownerDocument The context document.                                                           // 193\n     * @returns {Object} The shived DocumentFragment.                                                                  // 194\n     */                                                                                                                // 195\n    function createDocumentFragment(ownerDocument, data){                                                              // 196\n      if (!ownerDocument) {                                                                                            // 197\n          ownerDocument = document;                                                                                    // 198\n      }                                                                                                                // 199\n      if(supportsUnknownElements){                                                                                     // 200\n          return ownerDocument.createDocumentFragment();                                                               // 201\n      }                                                                                                                // 202\n      data = data || getExpandoData(ownerDocument);                                                                    // 203\n      var clone = data.frag.cloneNode(),                                                                               // 204\n          i = 0,                                                                                                       // 205\n          elems = getElements(),                                                                                       // 206\n          l = elems.length;                                                                                            // 207\n      for(;i<l;i++){                                                                                                   // 208\n          clone.createElement(elems[i]);                                                                               // 209\n      }                                                                                                                // 210\n      return clone;                                                                                                    // 211\n    }                                                                                                                  // 212\n                                                                                                                       // 213\n    /**                                                                                                                // 214\n     * Shivs the `createElement` and `createDocumentFragment` methods of the document.                                 // 215\n     * @private                                                                                                        // 216\n     * @param {Document|DocumentFragment} ownerDocument The document.                                                  // 217\n     * @param {Object} data of the document.                                                                           // 218\n     */                                                                                                                // 219\n    function shivMethods(ownerDocument, data) {                                                                        // 220\n      if (!data.cache) {                                                                                               // 221\n          data.cache = {};                                                                                             // 222\n          data.createElem = ownerDocument.createElement;                                                               // 223\n          data.createFrag = ownerDocument.createDocumentFragment;                                                      // 224\n          data.frag = data.createFrag();                                                                               // 225\n      }                                                                                                                // 226\n                                                                                                                       // 227\n                                                                                                                       // 228\n      ownerDocument.createElement = function(nodeName) {                                                               // 229\n        //abort shiv                                                                                                   // 230\n        if (!html5.shivMethods) {                                                                                      // 231\n            return data.createElem(nodeName);                                                                          // 232\n        }                                                                                                              // 233\n        return createElement(nodeName, ownerDocument, data);                                                           // 234\n      };                                                                                                               // 235\n                                                                                                                       // 236\n      ownerDocument.createDocumentFragment = Function('h,f', 'return function(){' +                                    // 237\n        'var n=f.cloneNode(),c=n.createElement;' +                                                                     // 238\n        'h.shivMethods&&(' +                                                                                           // 239\n          // unroll the `createElement` calls                                                                          // 240\n          getElements().join().replace(/[\\w\\-:]+/g, function(nodeName) {                                               // 241\n            data.createElem(nodeName);                                                                                 // 242\n            data.frag.createElement(nodeName);                                                                         // 243\n            return 'c(\"' + nodeName + '\")';                                                                            // 244\n          }) +                                                                                                         // 245\n        ');return n}'                                                                                                  // 246\n      )(html5, data.frag);                                                                                             // 247\n    }                                                                                                                  // 248\n                                                                                                                       // 249\n    /*--------------------------------------------------------------------------*/                                     // 250\n                                                                                                                       // 251\n    /**                                                                                                                // 252\n     * Shivs the given document.                                                                                       // 253\n     * @memberOf html5                                                                                                 // 254\n     * @param {Document} ownerDocument The document to shiv.                                                           // 255\n     * @returns {Document} The shived document.                                                                        // 256\n     */                                                                                                                // 257\n    function shivDocument(ownerDocument) {                                                                             // 258\n      if (!ownerDocument) {                                                                                            // 259\n          ownerDocument = document;                                                                                    // 260\n      }                                                                                                                // 261\n      var data = getExpandoData(ownerDocument);                                                                        // 262\n                                                                                                                       // 263\n      if (html5.shivCSS && !supportsHtml5Styles && !data.hasCSS) {                                                     // 264\n        data.hasCSS = !!addStyleSheet(ownerDocument,                                                                   // 265\n          // corrects block display not defined in IE6/7/8/9                                                           // 266\n          'article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}' +              // 267\n          // adds styling not present in IE6/7/8/9                                                                     // 268\n          'mark{background:#FF0;color:#000}' +                                                                         // 269\n          // hides non-rendered elements                                                                               // 270\n          'template{display:none}'                                                                                     // 271\n        );                                                                                                             // 272\n      }                                                                                                                // 273\n      if (!supportsUnknownElements) {                                                                                  // 274\n        shivMethods(ownerDocument, data);                                                                              // 275\n      }                                                                                                                // 276\n      return ownerDocument;                                                                                            // 277\n    }                                                                                                                  // 278\n                                                                                                                       // 279\n    /*--------------------------------------------------------------------------*/                                     // 280\n                                                                                                                       // 281\n    /**                                                                                                                // 282\n     * The `html5` object is exposed so that more elements can be shived and                                           // 283\n     * existing shiving can be detected on iframes.                                                                    // 284\n     * @type Object                                                                                                    // 285\n     * @example                                                                                                        // 286\n     *                                                                                                                 // 287\n     * // options can be changed before the script is included                                                         // 288\n     * html5 = { 'elements': 'mark section', 'shivCSS': false, 'shivMethods': false };                                 // 289\n     */                                                                                                                // 290\n    var html5 = {                                                                                                      // 291\n                                                                                                                       // 292\n      /**                                                                                                              // 293\n       * An array or space separated string of node names of the elements to shiv.                                     // 294\n       * @memberOf html5                                                                                               // 295\n       * @type Array|String                                                                                            // 296\n       */                                                                                                              // 297\n      'elements': options.elements || 'abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output picture progress section summary template time video',\n                                                                                                                       // 299\n      /**                                                                                                              // 300\n       * current version of html5shiv                                                                                  // 301\n       */                                                                                                              // 302\n      'version': version,                                                                                              // 303\n                                                                                                                       // 304\n      /**                                                                                                              // 305\n       * A flag to indicate that the HTML5 style sheet should be inserted.                                             // 306\n       * @memberOf html5                                                                                               // 307\n       * @type Boolean                                                                                                 // 308\n       */                                                                                                              // 309\n      'shivCSS': (options.shivCSS !== false),                                                                          // 310\n                                                                                                                       // 311\n      /**                                                                                                              // 312\n       * Is equal to true if a browser supports creating unknown/HTML5 elements                                        // 313\n       * @memberOf html5                                                                                               // 314\n       * @type boolean                                                                                                 // 315\n       */                                                                                                              // 316\n      'supportsUnknownElements': supportsUnknownElements,                                                              // 317\n                                                                                                                       // 318\n      /**                                                                                                              // 319\n       * A flag to indicate that the document's `createElement` and `createDocumentFragment`                           // 320\n       * methods should be overwritten.                                                                                // 321\n       * @memberOf html5                                                                                               // 322\n       * @type Boolean                                                                                                 // 323\n       */                                                                                                              // 324\n      'shivMethods': (options.shivMethods !== false),                                                                  // 325\n                                                                                                                       // 326\n      /**                                                                                                              // 327\n       * A string to describe the type of `html5` object (\"default\" or \"default print\").                               // 328\n       * @memberOf html5                                                                                               // 329\n       * @type String                                                                                                  // 330\n       */                                                                                                              // 331\n      'type': 'default',                                                                                               // 332\n                                                                                                                       // 333\n      // shivs the document according to the specified `html5` object options                                          // 334\n      'shivDocument': shivDocument,                                                                                    // 335\n                                                                                                                       // 336\n      //creates a shived element                                                                                       // 337\n      createElement: createElement,                                                                                    // 338\n                                                                                                                       // 339\n      //creates a shived documentFragment                                                                              // 340\n      createDocumentFragment: createDocumentFragment,                                                                  // 341\n                                                                                                                       // 342\n      //extends list of elements                                                                                       // 343\n      addElements: addElements                                                                                         // 344\n    };                                                                                                                 // 345\n                                                                                                                       // 346\n    /*--------------------------------------------------------------------------*/                                     // 347\n                                                                                                                       // 348\n    // expose html5                                                                                                    // 349\n    window.html5 = html5;                                                                                              // 350\n                                                                                                                       // 351\n    // shiv the document                                                                                               // 352\n    shivDocument(document);                                                                                            // 353\n                                                                                                                       // 354\n  }(this, document));                                                                                                  // 355\n                                                                                                                       // 356\n                                                                                                                       // 357\n  var tests = [];                                                                                                      // 358\n                                                                                                                       // 359\n                                                                                                                       // 360\n  var ModernizrProto = {                                                                                               // 361\n    // The current version, dummy                                                                                      // 362\n    _version: 'v3.0.0pre',                                                                                             // 363\n                                                                                                                       // 364\n    // Any settings that don't work as separate modules                                                                // 365\n    // can go in here as configuration.                                                                                // 366\n    _config: {                                                                                                         // 367\n      classPrefix : '',                                                                                                // 368\n      enableClasses : true,                                                                                            // 369\n      enableJSClass : true,                                                                                            // 370\n      usePrefixes : true                                                                                               // 371\n    },                                                                                                                 // 372\n                                                                                                                       // 373\n    // Queue of tests                                                                                                  // 374\n    _q: [],                                                                                                            // 375\n                                                                                                                       // 376\n    // Stub these for people who are listening                                                                         // 377\n    on: function( test, cb ) {                                                                                         // 378\n      // I don't really think people should do this, but we can                                                        // 379\n      // safe guard it a bit.                                                                                          // 380\n      // -- NOTE:: this gets WAY overridden in src/addTest for                                                         // 381\n      // actual async tests. This is in case people listen to                                                          // 382\n      // synchronous tests. I would leave it out, but the code                                                         // 383\n      // to *disallow* sync tests in the real version of this                                                          // 384\n      // function is actually larger than this.                                                                        // 385\n      var self = this;                                                                                                 // 386\n      setTimeout(function() {                                                                                          // 387\n        cb(self[test]);                                                                                                // 388\n      }, 0);                                                                                                           // 389\n    },                                                                                                                 // 390\n                                                                                                                       // 391\n    addTest: function( name, fn, options ) {                                                                           // 392\n      tests.push({name : name, fn : fn, options : options });                                                          // 393\n    },                                                                                                                 // 394\n                                                                                                                       // 395\n    addAsyncTest: function (fn) {                                                                                      // 396\n      tests.push({name : null, fn : fn});                                                                              // 397\n    }                                                                                                                  // 398\n  };                                                                                                                   // 399\n                                                                                                                       // 400\n                                                                                                                       // 401\n                                                                                                                       // 402\n  // Fake some of Object.create                                                                                        // 403\n  // so we can force non test results                                                                                  // 404\n  // to be non \"own\" properties.                                                                                       // 405\n  var Modernizr = function(){};                                                                                        // 406\n  Modernizr.prototype = ModernizrProto;                                                                                // 407\n                                                                                                                       // 408\n  // Leak modernizr globally when you `require` it                                                                     // 409\n  // rather than force it here.                                                                                        // 410\n  // Overwrite name so constructor name is nicer :D                                                                    // 411\n  Modernizr = new Modernizr();                                                                                         // 412\n                                                                                                                       // 413\n                                                                                                                       // 414\n/*!                                                                                                                    // 415\n{                                                                                                                      // 416\n  \"name\": \"Application Cache\",                                                                                         // 417\n  \"property\": \"applicationcache\",                                                                                      // 418\n  \"caniuse\": \"offline-apps\",                                                                                           // 419\n  \"tags\": [\"storage\", \"offline\"],                                                                                      // 420\n  \"notes\": [{                                                                                                          // 421\n    \"name\": \"MDN documentation\",                                                                                       // 422\n    \"href\": \"https://developer.mozilla.org/en/docs/HTML/Using_the_application_cache\"                                   // 423\n  }],                                                                                                                  // 424\n  \"polyfills\": [\"html5gears\"]                                                                                          // 425\n}                                                                                                                      // 426\n!*/                                                                                                                    // 427\n/* DOC                                                                                                                 // 428\nDetects support for the Application Cache, for storing data to enable web-based applications run offline.              // 429\n                                                                                                                       // 430\nThe API has been [heavily criticized](http://alistapart.com/article/application-cache-is-a-douchebag) and discussions are underway to address this.\n*/                                                                                                                     // 432\n                                                                                                                       // 433\n  Modernizr.addTest('applicationcache', 'applicationCache' in window);                                                 // 434\n                                                                                                                       // 435\n/*!                                                                                                                    // 436\n{                                                                                                                      // 437\n  \"name\": \"Geolocation API\",                                                                                           // 438\n  \"property\": \"geolocation\",                                                                                           // 439\n  \"caniuse\": \"geolocation\",                                                                                            // 440\n  \"tags\": [\"media\"],                                                                                                   // 441\n  \"notes\": [{                                                                                                          // 442\n    \"name\": \"MDN documentation\",                                                                                       // 443\n    \"href\": \"https://developer.mozilla.org/en-US/docs/WebAPI/Using_geolocation\"                                        // 444\n  }],                                                                                                                  // 445\n  \"polyfills\": [                                                                                                       // 446\n    \"joshuabell-polyfill\",                                                                                             // 447\n    \"webshims\",                                                                                                        // 448\n    \"geolocationshim\",                                                                                                 // 449\n    \"geo-location-javascript\",                                                                                         // 450\n    \"geolocation-api-polyfill\"                                                                                         // 451\n  ]                                                                                                                    // 452\n}                                                                                                                      // 453\n!*/                                                                                                                    // 454\n/* DOC                                                                                                                 // 455\nDetects support for the Geolocation API for users to provide their location to web applications.                       // 456\n*/                                                                                                                     // 457\n                                                                                                                       // 458\n  // geolocation is often considered a trivial feature detect...                                                       // 459\n  // Turns out, it's quite tricky to get right:                                                                        // 460\n  //                                                                                                                   // 461\n  // Using !!navigator.geolocation does two things we don't want. It:                                                  // 462\n  //   1. Leaks memory in IE9: github.com/Modernizr/Modernizr/issues/513                                               // 463\n  //   2. Disables page caching in WebKit: webk.it/43956                                                               // 464\n  //                                                                                                                   // 465\n  // Meanwhile, in Firefox < 8, an about:config setting could expose                                                   // 466\n  // a false positive that would throw an exception: bugzil.la/688158                                                  // 467\n                                                                                                                       // 468\n  Modernizr.addTest('geolocation', 'geolocation' in navigator);                                                        // 469\n                                                                                                                       // 470\n/*!                                                                                                                    // 471\n{                                                                                                                      // 472\n  \"name\": \"History API\",                                                                                               // 473\n  \"property\": \"history\",                                                                                               // 474\n  \"caniuse\": \"history\",                                                                                                // 475\n  \"tags\": [\"history\"],                                                                                                 // 476\n  \"authors\": [\"Hay Kranen\", \"Alexander Farkas\"],                                                                       // 477\n  \"notes\": [{                                                                                                          // 478\n    \"name\": \"W3C Spec\",                                                                                                // 479\n    \"href\": \"http://www.w3.org/TR/html51/browsers.html#the-history-interface\"                                          // 480\n  }, {                                                                                                                 // 481\n    \"name\": \"MDN documentation\",                                                                                       // 482\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/window.history\"                                          // 483\n  }],                                                                                                                  // 484\n  \"polyfills\": [\"historyjs\", \"html5historyapi\"]                                                                        // 485\n}                                                                                                                      // 486\n!*/                                                                                                                    // 487\n/* DOC                                                                                                                 // 488\nDetects support for the History API for manipulating the browser session history.                                      // 489\n*/                                                                                                                     // 490\n                                                                                                                       // 491\n  Modernizr.addTest('history', function() {                                                                            // 492\n    // Issue #733                                                                                                      // 493\n    // The stock browser on Android 2.2 & 2.3, and 4.0.x returns positive on history support                           // 494\n    // Unfortunately support is really buggy and there is no clean way to detect                                       // 495\n    // these bugs, so we fall back to a user agent sniff :(                                                            // 496\n    var ua = navigator.userAgent;                                                                                      // 497\n                                                                                                                       // 498\n    // We only want Android 2 and 4.0, stock browser, and not Chrome which identifies                                  // 499\n    // itself as 'Mobile Safari' as well, nor Windows Phone (issue #1471).                                             // 500\n    if ((ua.indexOf('Android 2.') !== -1 ||                                                                            // 501\n        (ua.indexOf('Android 4.0') !== -1)) &&                                                                         // 502\n        ua.indexOf('Mobile Safari') !== -1 &&                                                                          // 503\n        ua.indexOf('Chrome') === -1 &&                                                                                 // 504\n        ua.indexOf('Windows Phone') === -1) {                                                                          // 505\n      return false;                                                                                                    // 506\n    }                                                                                                                  // 507\n                                                                                                                       // 508\n    // Return the regular check                                                                                        // 509\n    return (window.history && 'pushState' in window.history);                                                          // 510\n  });                                                                                                                  // 511\n                                                                                                                       // 512\n/*!                                                                                                                    // 513\n{                                                                                                                      // 514\n  \"name\": \"Local Storage\",                                                                                             // 515\n  \"property\": \"localstorage\",                                                                                          // 516\n  \"caniuse\": \"namevalue-storage\",                                                                                      // 517\n  \"tags\": [\"storage\"],                                                                                                 // 518\n  \"knownBugs\": [],                                                                                                     // 519\n  \"notes\": [],                                                                                                         // 520\n  \"warnings\": [],                                                                                                      // 521\n  \"polyfills\": [                                                                                                       // 522\n    \"joshuabell-polyfill\",                                                                                             // 523\n    \"cupcake\",                                                                                                         // 524\n    \"storagepolyfill\",                                                                                                 // 525\n    \"amplifyjs\",                                                                                                       // 526\n    \"yui-cacheoffline\",                                                                                                // 527\n    \"textstorage\"                                                                                                      // 528\n  ]                                                                                                                    // 529\n}                                                                                                                      // 530\n!*/                                                                                                                    // 531\n                                                                                                                       // 532\n  // In FF4, if disabled, window.localStorage should === null.                                                         // 533\n                                                                                                                       // 534\n  // Normally, we could not test that directly and need to do a                                                        // 535\n  //   `('localStorage' in window) && ` test first because otherwise Firefox will                                      // 536\n  //   throw bugzil.la/365772 if cookies are disabled                                                                  // 537\n                                                                                                                       // 538\n  // Also in iOS5 Private Browsing mode, attempting to use localStorage.setItem                                        // 539\n  // will throw the exception:                                                                                         // 540\n  //   QUOTA_EXCEEDED_ERRROR DOM Exception 22.                                                                         // 541\n  // Peculiarly, getItem and removeItem calls do not throw.                                                            // 542\n                                                                                                                       // 543\n  // Because we are forced to try/catch this, we'll go aggressive.                                                     // 544\n                                                                                                                       // 545\n  // Just FWIW: IE8 Compat mode supports these features completely:                                                    // 546\n  //   www.quirksmode.org/dom/html5.html                                                                               // 547\n  // But IE8 doesn't support either with local files                                                                   // 548\n                                                                                                                       // 549\n  Modernizr.addTest('localstorage', function() {                                                                       // 550\n    var mod = 'modernizr';                                                                                             // 551\n    try {                                                                                                              // 552\n      localStorage.setItem(mod, mod);                                                                                  // 553\n      localStorage.removeItem(mod);                                                                                    // 554\n      return true;                                                                                                     // 555\n    } catch(e) {                                                                                                       // 556\n      return false;                                                                                                    // 557\n    }                                                                                                                  // 558\n  });                                                                                                                  // 559\n                                                                                                                       // 560\n/*!                                                                                                                    // 561\n{                                                                                                                      // 562\n  \"name\": \"postMessage\",                                                                                               // 563\n  \"property\": \"postmessage\",                                                                                           // 564\n  \"caniuse\": \"x-doc-messaging\",                                                                                        // 565\n  \"notes\": [{                                                                                                          // 566\n    \"name\": \"W3C Spec\",                                                                                                // 567\n    \"href\": \"http://www.w3.org/TR/html5/comms.html#posting-messages\"                                                   // 568\n  }],                                                                                                                  // 569\n  \"polyfills\": [\"easyxdm\", \"postmessage-jquery\"]                                                                       // 570\n}                                                                                                                      // 571\n!*/                                                                                                                    // 572\n/* DOC                                                                                                                 // 573\nDetects support for the `window.postMessage` protocol for cross-document messaging.                                    // 574\n*/                                                                                                                     // 575\n                                                                                                                       // 576\n  Modernizr.addTest('postmessage', 'postMessage' in window);                                                           // 577\n                                                                                                                       // 578\n/*!                                                                                                                    // 579\n{                                                                                                                      // 580\n  \"name\": \"Session Storage\",                                                                                           // 581\n  \"property\": \"sessionstorage\",                                                                                        // 582\n  \"tags\": [\"storage\"],                                                                                                 // 583\n  \"polyfills\": [\"joshuabell-polyfill\", \"cupcake\", \"sessionstorage\"]                                                    // 584\n}                                                                                                                      // 585\n!*/                                                                                                                    // 586\n                                                                                                                       // 587\n  // Because we are forced to try/catch this, we'll go aggressive.                                                     // 588\n                                                                                                                       // 589\n  // Just FWIW: IE8 Compat mode supports these features completely:                                                    // 590\n  //   www.quirksmode.org/dom/html5.html                                                                               // 591\n  // But IE8 doesn't support either with local files                                                                   // 592\n  Modernizr.addTest('sessionstorage', function() {                                                                     // 593\n    var mod = 'modernizr';                                                                                             // 594\n    try {                                                                                                              // 595\n      sessionStorage.setItem(mod, mod);                                                                                // 596\n      sessionStorage.removeItem(mod);                                                                                  // 597\n      return true;                                                                                                     // 598\n    } catch(e) {                                                                                                       // 599\n      return false;                                                                                                    // 600\n    }                                                                                                                  // 601\n  });                                                                                                                  // 602\n                                                                                                                       // 603\n/*!                                                                                                                    // 604\n{                                                                                                                      // 605\n  \"name\": \"SVG\",                                                                                                       // 606\n  \"property\": \"svg\",                                                                                                   // 607\n  \"caniuse\": \"svg\",                                                                                                    // 608\n  \"tags\": [\"svg\"],                                                                                                     // 609\n  \"authors\": [\"Erik Dahlstrom\"],                                                                                       // 610\n  \"polyfills\": [                                                                                                       // 611\n    \"svgweb\",                                                                                                          // 612\n    \"raphael\",                                                                                                         // 613\n    \"amplesdk\",                                                                                                        // 614\n    \"canvg\",                                                                                                           // 615\n    \"svg-boilerplate\",                                                                                                 // 616\n    \"sie\",                                                                                                             // 617\n    \"dojogfx\",                                                                                                         // 618\n    \"fabricjs\"                                                                                                         // 619\n  ]                                                                                                                    // 620\n}                                                                                                                      // 621\n!*/                                                                                                                    // 622\n/* DOC                                                                                                                 // 623\nDetects support for SVG in `<embed>` or `<object>` elements.                                                           // 624\n*/                                                                                                                     // 625\n                                                                                                                       // 626\n  Modernizr.addTest('svg', !!document.createElementNS && !!document.createElementNS('http://www.w3.org/2000/svg', 'svg').createSVGRect);\n                                                                                                                       // 628\n/*!                                                                                                                    // 629\n{                                                                                                                      // 630\n  \"name\": \"Web SQL Database\",                                                                                          // 631\n  \"property\": \"websqldatabase\",                                                                                        // 632\n  \"caniuse\": \"sql-storage\",                                                                                            // 633\n  \"tags\": [\"storage\"]                                                                                                  // 634\n}                                                                                                                      // 635\n!*/                                                                                                                    // 636\n                                                                                                                       // 637\n  // Chrome incognito mode used to throw an exception when using openDatabase                                          // 638\n  // It doesn't anymore.                                                                                               // 639\n  Modernizr.addTest('websqldatabase', 'openDatabase' in window);                                                       // 640\n                                                                                                                       // 641\n/*!                                                                                                                    // 642\n{                                                                                                                      // 643\n  \"name\": \"Web Workers\",                                                                                               // 644\n  \"property\": \"webworkers\",                                                                                            // 645\n  \"caniuse\" : \"webworkers\",                                                                                            // 646\n  \"tags\": [\"performance\", \"workers\"],                                                                                  // 647\n  \"notes\": [{                                                                                                          // 648\n    \"name\": \"W3C Reference\",                                                                                           // 649\n    \"href\": \"http://www.w3.org/TR/workers/\"                                                                            // 650\n  }, {                                                                                                                 // 651\n    \"name\": \"HTML5 Rocks article\",                                                                                     // 652\n    \"href\": \"http://www.html5rocks.com/en/tutorials/workers/basics/\"                                                   // 653\n  }, {                                                                                                                 // 654\n    \"name\": \"MDN documentation\",                                                                                       // 655\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/Guide/Performance/Using_web_workers\"                         // 656\n  }],                                                                                                                  // 657\n  \"polyfills\": [\"fakeworker\", \"html5shims\"]                                                                            // 658\n}                                                                                                                      // 659\n!*/                                                                                                                    // 660\n/* DOC                                                                                                                 // 661\nDetects support for the basic `Worker` API from the Web Workers spec. Web Workers provide a simple means for web content to run scripts in background threads.\n*/                                                                                                                     // 663\n                                                                                                                       // 664\n  Modernizr.addTest('webworkers', 'Worker' in window);                                                                 // 665\n                                                                                                                       // 666\n/*!                                                                                                                    // 667\n{                                                                                                                      // 668\n  \"name\": \"WebSockets Support\",                                                                                        // 669\n  \"property\": \"websockets\",                                                                                            // 670\n  \"authors\": [\"Phread [fearphage]\", \"Mike Sherov [mikesherov]\", \"Burak Yigit Kaya [BYK]\"],                             // 671\n  \"caniuse\": \"websockets\",                                                                                             // 672\n  \"tags\": [\"html5\"],                                                                                                   // 673\n  \"warnings\": [                                                                                                        // 674\n    \"This test will reject any old version of WebSockets even if it is not prefixed such as in Safari 5.1\"             // 675\n  ],                                                                                                                   // 676\n  \"notes\": [{                                                                                                          // 677\n    \"name\": \"CLOSING State and Spec\",                                                                                  // 678\n    \"href\": \"http://www.w3.org/TR/websockets/#the-websocket-interface\"                                                 // 679\n  }],                                                                                                                  // 680\n  \"polyfills\": [                                                                                                       // 681\n    \"sockjs\",                                                                                                          // 682\n    \"socketio\",                                                                                                        // 683\n    \"kaazing-websocket-gateway\",                                                                                       // 684\n    \"websocketjs\",                                                                                                     // 685\n    \"atmosphere\",                                                                                                      // 686\n    \"graceful-websocket\",                                                                                              // 687\n    \"portal\",                                                                                                          // 688\n    \"datachannel\"                                                                                                      // 689\n  ]                                                                                                                    // 690\n}                                                                                                                      // 691\n!*/                                                                                                                    // 692\n                                                                                                                       // 693\n  Modernizr.addTest('websockets', 'WebSocket' in window && window.WebSocket.CLOSING === 2);                            // 694\n                                                                                                                       // 695\n                                                                                                                       // 696\n  // List of property values to set for css tests. See ticket #21                                                      // 697\n  var prefixes = (ModernizrProto._config.usePrefixes ? ' -webkit- -moz- -o- -ms- '.split(' ') : []);                   // 698\n                                                                                                                       // 699\n  // expose these for the plugin API. Look in the source for how to join() them against your input                     // 700\n  ModernizrProto._prefixes = prefixes;                                                                                 // 701\n                                                                                                                       // 702\n                                                                                                                       // 703\n                                                                                                                       // 704\n  /**                                                                                                                  // 705\n   * is returns a boolean for if typeof obj is exactly type.                                                           // 706\n   */                                                                                                                  // 707\n  function is( obj, type ) {                                                                                           // 708\n    return typeof obj === type;                                                                                        // 709\n  }                                                                                                                    // 710\n  ;                                                                                                                    // 711\n                                                                                                                       // 712\n  // Run through all tests and detect their support in the current UA.                                                 // 713\n  function testRunner() {                                                                                              // 714\n    var featureNames;                                                                                                  // 715\n    var feature;                                                                                                       // 716\n    var aliasIdx;                                                                                                      // 717\n    var result;                                                                                                        // 718\n    var nameIdx;                                                                                                       // 719\n    var featureName;                                                                                                   // 720\n    var featureNameSplit;                                                                                              // 721\n                                                                                                                       // 722\n    for ( var featureIdx in tests ) {                                                                                  // 723\n      featureNames = [];                                                                                               // 724\n      feature = tests[featureIdx];                                                                                     // 725\n      // run the test, throw the return value into the Modernizr,                                                      // 726\n      //   then based on that boolean, define an appropriate className                                                 // 727\n      //   and push it into an array of classes we'll join later.                                                      // 728\n      //                                                                                                               // 729\n      //   If there is no name, it's an 'async' test that is run,                                                      // 730\n      //   but not directly added to the object. That should                                                           // 731\n      //   be done with a post-run addTest call.                                                                       // 732\n      if ( feature.name ) {                                                                                            // 733\n        featureNames.push(feature.name.toLowerCase());                                                                 // 734\n                                                                                                                       // 735\n        if (feature.options && feature.options.aliases && feature.options.aliases.length) {                            // 736\n          // Add all the aliases into the names list                                                                   // 737\n          for (aliasIdx = 0; aliasIdx < feature.options.aliases.length; aliasIdx++) {                                  // 738\n            featureNames.push(feature.options.aliases[aliasIdx].toLowerCase());                                        // 739\n          }                                                                                                            // 740\n        }                                                                                                              // 741\n      }                                                                                                                // 742\n                                                                                                                       // 743\n      // Run the test, or use the raw value if it's not a function                                                     // 744\n      result = is(feature.fn, 'function') ? feature.fn() : feature.fn;                                                 // 745\n                                                                                                                       // 746\n                                                                                                                       // 747\n      // Set each of the names on the Modernizr object                                                                 // 748\n      for (nameIdx = 0; nameIdx < featureNames.length; nameIdx++) {                                                    // 749\n        featureName = featureNames[nameIdx];                                                                           // 750\n        // Support dot properties as sub tests. We don't do checking to make sure                                      // 751\n        // that the implied parent tests have been added. You must call them in                                        // 752\n        // order (either in the test, or make the parent test a dependency).                                           // 753\n        //                                                                                                             // 754\n        // Cap it to TWO to make the logic simple and because who needs that kind of subtesting                        // 755\n        // hashtag famous last words                                                                                   // 756\n        featureNameSplit = featureName.split('.');                                                                     // 757\n                                                                                                                       // 758\n        if (featureNameSplit.length === 1) {                                                                           // 759\n          Modernizr[featureNameSplit[0]] = result;                                                                     // 760\n        }                                                                                                              // 761\n        else if (featureNameSplit.length === 2) {                                                                      // 762\n          // cast to a Boolean, if not one already                                                                     // 763\n          /* jshint -W053 */                                                                                           // 764\n          if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {                // 765\n            Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);                              // 766\n          }                                                                                                            // 767\n                                                                                                                       // 768\n          Modernizr[featureNameSplit[0]][featureNameSplit[1]] = result;                                                // 769\n        }                                                                                                              // 770\n                                                                                                                       // 771\n        classes.push((result ? '' : 'no-') + featureNameSplit.join('-'));                                              // 772\n      }                                                                                                                // 773\n    }                                                                                                                  // 774\n  }                                                                                                                    // 775\n                                                                                                                       // 776\n  ;                                                                                                                    // 777\n                                                                                                                       // 778\n  var docElement = document.documentElement;                                                                           // 779\n                                                                                                                       // 780\n                                                                                                                       // 781\n  // Pass in an and array of class names, e.g.:                                                                        // 782\n  //  ['no-webp', 'borderradius', ...]                                                                                 // 783\n  function setClasses( classes ) {                                                                                     // 784\n    var className = docElement.className;                                                                              // 785\n    var classPrefix = Modernizr._config.classPrefix || '';                                                             // 786\n                                                                                                                       // 787\n    // Change `no-js` to `js` (we do this independently of the `enableClasses`                                         // 788\n    // option)                                                                                                         // 789\n    // Handle classPrefix on this too                                                                                  // 790\n    if(Modernizr._config.enableJSClass) {                                                                              // 791\n      var reJS = new RegExp('(^|\\\\s)'+classPrefix+'no-js(\\\\s|$)');                                                     // 792\n      className = className.replace(reJS, '$1'+classPrefix+'js$2');                                                    // 793\n    }                                                                                                                  // 794\n                                                                                                                       // 795\n    if(Modernizr._config.enableClasses) {                                                                              // 796\n      // Add the new classes                                                                                           // 797\n      className += ' ' + classPrefix + classes.join(' ' + classPrefix);                                                // 798\n      docElement.className = className;                                                                                // 799\n    }                                                                                                                  // 800\n                                                                                                                       // 801\n  }                                                                                                                    // 802\n                                                                                                                       // 803\n  ;                                                                                                                    // 804\n                                                                                                                       // 805\n  // hasOwnProperty shim by kangax needed for Safari 2.0 support                                                       // 806\n  var hasOwnProp;                                                                                                      // 807\n                                                                                                                       // 808\n  (function() {                                                                                                        // 809\n    var _hasOwnProperty = ({}).hasOwnProperty;                                                                         // 810\n    if ( !is(_hasOwnProperty, 'undefined') && !is(_hasOwnProperty.call, 'undefined') ) {                               // 811\n      hasOwnProp = function (object, property) {                                                                       // 812\n        return _hasOwnProperty.call(object, property);                                                                 // 813\n      };                                                                                                               // 814\n    }                                                                                                                  // 815\n    else {                                                                                                             // 816\n      hasOwnProp = function (object, property) { /* yes, this can give false positives/negatives, but most of the time we don't care about those */\n        return ((property in object) && is(object.constructor.prototype[property], 'undefined'));                      // 818\n      };                                                                                                               // 819\n    }                                                                                                                  // 820\n  })();                                                                                                                // 821\n                                                                                                                       // 822\n                                                                                                                       // 823\n                                                                                                                       // 824\n  // As far as I can think of, we shouldn't need or                                                                    // 825\n  // allow 'on' for non-async tests, and you can't do                                                                  // 826\n  // async tests without this 'addTest' module.                                                                        // 827\n                                                                                                                       // 828\n  // Listeners for async or post-run tests                                                                             // 829\n  ModernizrProto._l = {};                                                                                              // 830\n                                                                                                                       // 831\n  // 'addTest' implies a test after the core runloop,                                                                  // 832\n  // So we'll add in the events                                                                                        // 833\n  ModernizrProto.on = function( test, cb ) {                                                                           // 834\n    // Create the list of listeners if it doesn't exist                                                                // 835\n    if (!this._l[test]) {                                                                                              // 836\n      this._l[test] = [];                                                                                              // 837\n    }                                                                                                                  // 838\n                                                                                                                       // 839\n    // Push this test on to the listener list                                                                          // 840\n    this._l[test].push(cb);                                                                                            // 841\n                                                                                                                       // 842\n    // If it's already been resolved, trigger it on next tick                                                          // 843\n    if (Modernizr.hasOwnProperty(test)) {                                                                              // 844\n      // Next Tick                                                                                                     // 845\n      setTimeout(function() {                                                                                          // 846\n        Modernizr._trigger(test, Modernizr[test]);                                                                     // 847\n      }, 0);                                                                                                           // 848\n    }                                                                                                                  // 849\n  };                                                                                                                   // 850\n                                                                                                                       // 851\n  ModernizrProto._trigger = function( test, res ) {                                                                    // 852\n    if (!this._l[test]) {                                                                                              // 853\n      return;                                                                                                          // 854\n    }                                                                                                                  // 855\n                                                                                                                       // 856\n    var cbs = this._l[test];                                                                                           // 857\n                                                                                                                       // 858\n    // Force async                                                                                                     // 859\n    setTimeout(function() {                                                                                            // 860\n      var i, cb;                                                                                                       // 861\n      for (i = 0; i < cbs.length; i++) {                                                                               // 862\n        cb = cbs[i];                                                                                                   // 863\n        cb(res);                                                                                                       // 864\n      }                                                                                                                // 865\n    },0);                                                                                                              // 866\n                                                                                                                       // 867\n    // Don't trigger these again                                                                                       // 868\n    delete this._l[test];                                                                                              // 869\n  };                                                                                                                   // 870\n                                                                                                                       // 871\n  /**                                                                                                                  // 872\n   * addTest allows the user to define their own feature tests                                                         // 873\n   * the result will be added onto the Modernizr object,                                                               // 874\n   * as well as an appropriate className set on the html element                                                       // 875\n   *                                                                                                                   // 876\n   * @param feature - String naming the feature                                                                        // 877\n   * @param test - Function returning true if feature is supported, false if not                                       // 878\n   */                                                                                                                  // 879\n  function addTest( feature, test ) {                                                                                  // 880\n    if ( typeof feature == 'object' ) {                                                                                // 881\n      for ( var key in feature ) {                                                                                     // 882\n        if ( hasOwnProp( feature, key ) ) {                                                                            // 883\n          addTest( key, feature[ key ] );                                                                              // 884\n        }                                                                                                              // 885\n      }                                                                                                                // 886\n    } else {                                                                                                           // 887\n                                                                                                                       // 888\n      feature = feature.toLowerCase();                                                                                 // 889\n      var featureNameSplit = feature.split('.');                                                                       // 890\n      var last = Modernizr[featureNameSplit[0]];                                                                       // 891\n                                                                                                                       // 892\n      // Again, we don't check for parent test existence. Get that right, though.                                      // 893\n      if (featureNameSplit.length == 2) {                                                                              // 894\n        last = last[featureNameSplit[1]];                                                                              // 895\n      }                                                                                                                // 896\n                                                                                                                       // 897\n      if ( typeof last != 'undefined' ) {                                                                              // 898\n        // we're going to quit if you're trying to overwrite an existing test                                          // 899\n        // if we were to allow it, we'd do this:                                                                       // 900\n        //   var re = new RegExp(\"\\\\b(no-)?\" + feature + \"\\\\b\");                                                       // 901\n        //   docElement.className = docElement.className.replace( re, '' );                                            // 902\n        // but, no rly, stuff 'em.                                                                                     // 903\n        return Modernizr;                                                                                              // 904\n      }                                                                                                                // 905\n                                                                                                                       // 906\n      test = typeof test == 'function' ? test() : test;                                                                // 907\n                                                                                                                       // 908\n      // Set the value (this is the magic, right here).                                                                // 909\n      if (featureNameSplit.length == 1) {                                                                              // 910\n        Modernizr[featureNameSplit[0]] = test;                                                                         // 911\n      }                                                                                                                // 912\n      else if (featureNameSplit.length == 2) {                                                                         // 913\n        // cast to a Boolean, if not one already                                                                       // 914\n        /* jshint -W053 */                                                                                             // 915\n        if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {                  // 916\n          Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);                                // 917\n        }                                                                                                              // 918\n                                                                                                                       // 919\n        Modernizr[featureNameSplit[0]][featureNameSplit[1]] = test;                                                    // 920\n      }                                                                                                                // 921\n                                                                                                                       // 922\n      // Set a single class (either `feature` or `no-feature`)                                                         // 923\n      /* jshint -W041 */                                                                                               // 924\n      setClasses([(!!test && test != false ? '' : 'no-') + featureNameSplit.join('-')]);                               // 925\n      /* jshint +W041 */                                                                                               // 926\n                                                                                                                       // 927\n      // Trigger the event                                                                                             // 928\n      Modernizr._trigger(feature, test);                                                                               // 929\n    }                                                                                                                  // 930\n                                                                                                                       // 931\n    return Modernizr; // allow chaining.                                                                               // 932\n  }                                                                                                                    // 933\n                                                                                                                       // 934\n  // After all the tests are run, add self                                                                             // 935\n  // to the Modernizr prototype                                                                                        // 936\n  Modernizr._q.push(function() {                                                                                       // 937\n    ModernizrProto.addTest = addTest;                                                                                  // 938\n  });                                                                                                                  // 939\n                                                                                                                       // 940\n                                                                                                                       // 941\n                                                                                                                       // 942\n  // Helper function for converting kebab-case to camelCase,                                                           // 943\n  // e.g. box-sizing -> boxSizing                                                                                      // 944\n  function cssToDOM( name ) {                                                                                          // 945\n    return name.replace(/([a-z])-([a-z])/g, function(str, m1, m2) {                                                    // 946\n      return m1 + m2.toUpperCase();                                                                                    // 947\n    }).replace(/^-/, '');                                                                                              // 948\n  }                                                                                                                    // 949\n  ;                                                                                                                    // 950\n                                                                                                                       // 951\n  /**                                                                                                                  // 952\n   * atRule returns a given CSS property at-rule (eg @keyframes), possibly in                                          // 953\n   * some prefixed form, or false, in the case of an unsupported rule                                                  // 954\n   *                                                                                                                   // 955\n   * @param prop - String naming the property to test                                                                  // 956\n   */                                                                                                                  // 957\n                                                                                                                       // 958\n  var atRule = function(prop) {                                                                                        // 959\n    var length = prefixes.length;                                                                                      // 960\n    var cssrule = window.CSSRule;                                                                                      // 961\n    var rule;                                                                                                          // 962\n                                                                                                                       // 963\n    if (typeof cssrule === 'undefined') {                                                                              // 964\n      return false;                                                                                                    // 965\n    }                                                                                                                  // 966\n                                                                                                                       // 967\n    // remove literal @ from beginning of provided property                                                            // 968\n    prop = prop.replace(/^@/,'');                                                                                      // 969\n                                                                                                                       // 970\n    // CSSRules use underscores instead of dashes                                                                      // 971\n    rule = prop.replace(/-/g,'_').toUpperCase() + '_RULE';                                                             // 972\n                                                                                                                       // 973\n    if (rule in cssrule) {                                                                                             // 974\n      return '@' + prop;                                                                                               // 975\n    }                                                                                                                  // 976\n                                                                                                                       // 977\n    for ( var i = 0; i < length; i++ ) {                                                                               // 978\n      // prefixes gives us something like -o-, and we want O_                                                          // 979\n      var prefix = prefixes[i];                                                                                        // 980\n      var thisRule = prefix.toUpperCase() + '_' + rule;                                                                // 981\n                                                                                                                       // 982\n      if (thisRule in cssrule) {                                                                                       // 983\n        return '@-' + prefix.toLowerCase() + '-' + prop;                                                               // 984\n      }                                                                                                                // 985\n    }                                                                                                                  // 986\n                                                                                                                       // 987\n    return false;                                                                                                      // 988\n  };                                                                                                                   // 989\n                                                                                                                       // 990\n                                                                                                                       // 991\n                                                                                                                       // 992\n  // Following spec is to expose vendor-specific style properties as:                                                  // 993\n  //   elem.style.WebkitBorderRadius                                                                                   // 994\n  // and the following would be incorrect:                                                                             // 995\n  //   elem.style.webkitBorderRadius                                                                                   // 996\n                                                                                                                       // 997\n  // Webkit ghosts their properties in lowercase but Opera & Moz do not.                                               // 998\n  // Microsoft uses a lowercase `ms` instead of the correct `Ms` in IE8+                                               // 999\n  //   erik.eae.net/archives/2008/03/10/21.48.10/                                                                      // 1000\n                                                                                                                       // 1001\n  // More here: github.com/Modernizr/Modernizr/issues/issue/21                                                         // 1002\n  var omPrefixes = 'Webkit Moz O ms';                                                                                  // 1003\n                                                                                                                       // 1004\n                                                                                                                       // 1005\n  var domPrefixes = (ModernizrProto._config.usePrefixes ? omPrefixes.toLowerCase().split(' ') : []);                   // 1006\n  ModernizrProto._domPrefixes = domPrefixes;                                                                           // 1007\n                                                                                                                       // 1008\n                                                                                                                       // 1009\n  var createElement = function() {                                                                                     // 1010\n    if (typeof document.createElement !== 'function') {                                                                // 1011\n      // This is the case in IE7, where the type of createElement is \"object\".                                         // 1012\n      // For this reason, we cannot call apply() as Object is not a Function.                                          // 1013\n      return document.createElement(arguments[0]);                                                                     // 1014\n    } else {                                                                                                           // 1015\n      return document.createElement.apply(document, arguments);                                                        // 1016\n    }                                                                                                                  // 1017\n  };                                                                                                                   // 1018\n                                                                                                                       // 1019\n/*!                                                                                                                    // 1020\n{                                                                                                                      // 1021\n  \"name\": \"Canvas\",                                                                                                    // 1022\n  \"property\": \"canvas\",                                                                                                // 1023\n  \"caniuse\": \"canvas\",                                                                                                 // 1024\n  \"tags\": [\"canvas\", \"graphics\"],                                                                                      // 1025\n  \"polyfills\": [\"flashcanvas\", \"excanvas\", \"slcanvas\", \"fxcanvas\"]                                                     // 1026\n}                                                                                                                      // 1027\n!*/                                                                                                                    // 1028\n/* DOC                                                                                                                 // 1029\nDetects support for the `<canvas>` element for 2D drawing.                                                             // 1030\n*/                                                                                                                     // 1031\n                                                                                                                       // 1032\n  // On the S60 and BB Storm, getContext exists, but always returns undefined                                          // 1033\n  // so we actually have to call getContext() to verify                                                                // 1034\n  // github.com/Modernizr/Modernizr/issues/issue/97/                                                                   // 1035\n  Modernizr.addTest('canvas', function() {                                                                             // 1036\n    var elem = createElement('canvas');                                                                                // 1037\n    return !!(elem.getContext && elem.getContext('2d'));                                                               // 1038\n  });                                                                                                                  // 1039\n                                                                                                                       // 1040\n/*!                                                                                                                    // 1041\n{                                                                                                                      // 1042\n  \"name\": \"Canvas text\",                                                                                               // 1043\n  \"property\": \"canvastext\",                                                                                            // 1044\n  \"caniuse\": \"canvas-text\",                                                                                            // 1045\n  \"tags\": [\"canvas\", \"graphics\"],                                                                                      // 1046\n  \"polyfills\": [\"canvastext\"]                                                                                          // 1047\n}                                                                                                                      // 1048\n!*/                                                                                                                    // 1049\n/* DOC                                                                                                                 // 1050\nDetects support for the text APIs for `<canvas>` elements.                                                             // 1051\n*/                                                                                                                     // 1052\n                                                                                                                       // 1053\n  Modernizr.addTest('canvastext',  function() {                                                                        // 1054\n    if (Modernizr.canvas  === false) return false;                                                                     // 1055\n    return typeof createElement('canvas').getContext('2d').fillText == 'function';                                     // 1056\n  });                                                                                                                  // 1057\n                                                                                                                       // 1058\n/*!                                                                                                                    // 1059\n{                                                                                                                      // 1060\n  \"name\": \"CSS Gradients\",                                                                                             // 1061\n  \"caniuse\": \"css-gradients\",                                                                                          // 1062\n  \"property\": \"cssgradients\",                                                                                          // 1063\n  \"tags\": [\"css\"],                                                                                                     // 1064\n  \"knownBugs\": [\"False-positives on webOS (https://github.com/Modernizr/Modernizr/issues/202)\"],                       // 1065\n  \"notes\": [{                                                                                                          // 1066\n    \"name\": \"Webkit Gradient Syntax\",                                                                                  // 1067\n    \"href\": \"http://webkit.org/blog/175/introducing-css-gradients/\"                                                    // 1068\n  },{                                                                                                                  // 1069\n    \"name\": \"Mozilla Linear Gradient Syntax\",                                                                          // 1070\n    \"href\": \"http://developer.mozilla.org/en/CSS/-moz-linear-gradient\"                                                 // 1071\n  },{                                                                                                                  // 1072\n    \"name\": \"Mozilla Radial Gradient Syntax\",                                                                          // 1073\n    \"href\": \"http://developer.mozilla.org/en/CSS/-moz-radial-gradient\"                                                 // 1074\n  },{                                                                                                                  // 1075\n    \"name\": \"W3C Gradient Spec\",                                                                                       // 1076\n    \"href\": \"dev.w3.org/csswg/css3-images/#gradients-\"                                                                 // 1077\n  }]                                                                                                                   // 1078\n}                                                                                                                      // 1079\n!*/                                                                                                                    // 1080\n                                                                                                                       // 1081\n                                                                                                                       // 1082\n  Modernizr.addTest('cssgradients', function() {                                                                       // 1083\n                                                                                                                       // 1084\n    var str1 = 'background-image:';                                                                                    // 1085\n    var str2 = 'gradient(linear,left top,right bottom,from(#9f9),to(white));';                                         // 1086\n    var str3 = 'linear-gradient(left top,#9f9, white);';                                                               // 1087\n                                                                                                                       // 1088\n    // standard syntax             // trailing 'background-image:'                                                     // 1089\n    var css = str1 + prefixes.join(str3 + str1).slice(0, -str1.length);                                                // 1090\n    if (Modernizr._config.usePrefixes) {                                                                               // 1091\n    // legacy webkit syntax (FIXME: remove when syntax not in use anymore)                                             // 1092\n      css += str1 + '-webkit-' + str2;                                                                                 // 1093\n    }                                                                                                                  // 1094\n                                                                                                                       // 1095\n    var elem = createElement('div');                                                                                   // 1096\n    var style = elem.style;                                                                                            // 1097\n    style.cssText = css;                                                                                               // 1098\n                                                                                                                       // 1099\n    // IE6 returns undefined so cast to string                                                                         // 1100\n    return ('' + style.backgroundImage).indexOf('gradient') > -1;                                                      // 1101\n  });                                                                                                                  // 1102\n                                                                                                                       // 1103\n/*!                                                                                                                    // 1104\n{                                                                                                                      // 1105\n  \"name\": \"CSS Multiple Backgrounds\",                                                                                  // 1106\n  \"caniuse\": \"multibackgrounds\",                                                                                       // 1107\n  \"property\": \"multiplebgs\",                                                                                           // 1108\n  \"tags\": [\"css\"]                                                                                                      // 1109\n}                                                                                                                      // 1110\n!*/                                                                                                                    // 1111\n                                                                                                                       // 1112\n  // Setting multiple images AND a color on the background shorthand property                                          // 1113\n  // and then querying the style.background property value for the number of                                           // 1114\n  // occurrences of \"url(\" is a reliable method for detecting ACTUAL support for this!                                 // 1115\n                                                                                                                       // 1116\n  Modernizr.addTest('multiplebgs', function() {                                                                        // 1117\n    var elem = createElement('div');                                                                                   // 1118\n    var style = elem.style;                                                                                            // 1119\n    style.cssText = 'background:url(https://),url(https://),red url(https://)';                                        // 1120\n                                                                                                                       // 1121\n    // If the UA supports multiple backgrounds, there should be three occurrences                                      // 1122\n    // of the string \"url(\" in the return value for elemStyle.background                                               // 1123\n    return (/(url\\s*\\(.*?){3}/).test(style.background);                                                                // 1124\n  });                                                                                                                  // 1125\n                                                                                                                       // 1126\n/*!                                                                                                                    // 1127\n{                                                                                                                      // 1128\n  \"name\": \"CSS Opacity\",                                                                                               // 1129\n  \"caniuse\": \"css-opacity\",                                                                                            // 1130\n  \"property\": \"opacity\",                                                                                               // 1131\n  \"tags\": [\"css\"],                                                                                                     // 1132\n  \"notes\": [\"Opacity must be be in the range of [0.0,1.0], according to the spec.\"]                                    // 1133\n}                                                                                                                      // 1134\n!*/                                                                                                                    // 1135\n                                                                                                                       // 1136\n  // Browsers that actually have CSS Opacity implemented have done so                                                  // 1137\n  // according to spec, which means their return values are within the                                                 // 1138\n  // range of [0.0,1.0] - including the leading zero.                                                                  // 1139\n                                                                                                                       // 1140\n  Modernizr.addTest('opacity', function() {                                                                            // 1141\n    var elem = createElement('div');                                                                                   // 1142\n    var style = elem.style;                                                                                            // 1143\n    style.cssText = prefixes.join('opacity:.55;');                                                                     // 1144\n                                                                                                                       // 1145\n    // The non-literal . in this regex is intentional:                                                                 // 1146\n    // German Chrome returns this value as 0,55                                                                        // 1147\n    // github.com/Modernizr/Modernizr/issues/#issue/59/comment/516632                                                  // 1148\n    return (/^0.55$/).test(style.opacity);                                                                             // 1149\n  });                                                                                                                  // 1150\n                                                                                                                       // 1151\n/*!                                                                                                                    // 1152\n{                                                                                                                      // 1153\n  \"name\": \"CSS rgba\",                                                                                                  // 1154\n  \"caniuse\": \"css3-colors\",                                                                                            // 1155\n  \"property\": \"rgba\",                                                                                                  // 1156\n  \"tags\": [\"css\"],                                                                                                     // 1157\n  \"notes\": [{                                                                                                          // 1158\n    \"name\": \"CSSTricks Tutorial\",                                                                                      // 1159\n    \"href\": \"http://css-tricks.com/rgba-browser-support/\"                                                              // 1160\n  }]                                                                                                                   // 1161\n}                                                                                                                      // 1162\n!*/                                                                                                                    // 1163\n                                                                                                                       // 1164\n  Modernizr.addTest('rgba', function() {                                                                               // 1165\n    var elem = createElement('div');                                                                                   // 1166\n    var style = elem.style;                                                                                            // 1167\n    style.cssText = 'background-color:rgba(150,255,150,.5)';                                                           // 1168\n                                                                                                                       // 1169\n    return ('' + style.backgroundColor).indexOf('rgba') > -1;                                                          // 1170\n  });                                                                                                                  // 1171\n                                                                                                                       // 1172\n/*!                                                                                                                    // 1173\n{                                                                                                                      // 1174\n  \"name\": \"Drag & Drop\",                                                                                               // 1175\n  \"property\": \"draganddrop\",                                                                                           // 1176\n  \"caniuse\": \"dragndrop\",                                                                                              // 1177\n  \"knownBugs\": [\"Mobile browsers like Android, iOS < 6, and Firefox OS technically support the APIs, but don't expose it to the end user, resulting in a false positive.\"],\n  \"notes\": [{                                                                                                          // 1179\n    \"name\": \"W3C spec\",                                                                                                // 1180\n    \"href\": \"http://www.w3.org/TR/2010/WD-html5-20101019/dnd.html\"                                                     // 1181\n  }],                                                                                                                  // 1182\n  \"polyfills\": [\"dropfile\", \"moxie\", \"fileapi\"]                                                                        // 1183\n}                                                                                                                      // 1184\n!*/                                                                                                                    // 1185\n/* DOC                                                                                                                 // 1186\nDetects support for native drag & drop of elements.                                                                    // 1187\n*/                                                                                                                     // 1188\n                                                                                                                       // 1189\n  Modernizr.addTest('draganddrop', function() {                                                                        // 1190\n    var div = createElement('div');                                                                                    // 1191\n    return ('draggable' in div) || ('ondragstart' in div && 'ondrop' in div);                                          // 1192\n  });                                                                                                                  // 1193\n                                                                                                                       // 1194\n/*!                                                                                                                    // 1195\n{                                                                                                                      // 1196\n  \"name\" : \"HTML5 Audio Element\",                                                                                      // 1197\n  \"property\": \"audio\",                                                                                                 // 1198\n  \"tags\" : [\"html5\", \"audio\", \"media\"]                                                                                 // 1199\n}                                                                                                                      // 1200\n!*/                                                                                                                    // 1201\n/* DOC                                                                                                                 // 1202\nDetects the audio element                                                                                              // 1203\n*/                                                                                                                     // 1204\n                                                                                                                       // 1205\n  // This tests evaluates support of the audio element, as well as                                                     // 1206\n  // testing what types of content it supports.                                                                        // 1207\n  //                                                                                                                   // 1208\n  // We're using the Boolean constructor here, so that we can extend the value                                         // 1209\n  // e.g.  Modernizr.audio     // true                                                                                 // 1210\n  //       Modernizr.audio.ogg // 'probably'                                                                           // 1211\n  //                                                                                                                   // 1212\n  // Codec values from : github.com/NielsLeenheer/html5test/blob/9106a8/index.html#L845                                // 1213\n  //                     thx to NielsLeenheer and zcorpan                                                              // 1214\n                                                                                                                       // 1215\n  // Note: in some older browsers, \"no\" was a return value instead of empty string.                                    // 1216\n  //   It was live in FF3.5.0 and 3.5.1, but fixed in 3.5.2                                                            // 1217\n  //   It was also live in Safari 4.0.0 - 4.0.4, but fixed in 4.0.5                                                    // 1218\n  Modernizr.addTest('audio', function() {                                                                              // 1219\n    /* jshint -W053 */                                                                                                 // 1220\n    var elem = createElement('audio');                                                                                 // 1221\n    var bool = false;                                                                                                  // 1222\n                                                                                                                       // 1223\n    try {                                                                                                              // 1224\n      if ( bool = !!elem.canPlayType ) {                                                                               // 1225\n        bool      = new Boolean(bool);                                                                                 // 1226\n        bool.ogg  = elem.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/,'');                                 // 1227\n        bool.mp3  = elem.canPlayType('audio/mpeg;')               .replace(/^no$/,'');                                 // 1228\n        bool.opus  = elem.canPlayType('audio/ogg; codecs=\"opus\"') .replace(/^no$/,'');                                 // 1229\n                                                                                                                       // 1230\n        // Mimetypes accepted:                                                                                         // 1231\n        //   developer.mozilla.org/En/Media_formats_supported_by_the_audio_and_video_elements                          // 1232\n        //   bit.ly/iphoneoscodecs                                                                                     // 1233\n        bool.wav  = elem.canPlayType('audio/wav; codecs=\"1\"')     .replace(/^no$/,'');                                 // 1234\n        bool.m4a  = ( elem.canPlayType('audio/x-m4a;')            ||                                                   // 1235\n                     elem.canPlayType('audio/aac;'))             .replace(/^no$/,'');                                  // 1236\n      }                                                                                                                // 1237\n    } catch(e) { }                                                                                                     // 1238\n                                                                                                                       // 1239\n    return bool;                                                                                                       // 1240\n  });                                                                                                                  // 1241\n                                                                                                                       // 1242\n/*!                                                                                                                    // 1243\n{                                                                                                                      // 1244\n  \"name\": \"HTML5 Video\",                                                                                               // 1245\n  \"property\": \"video\",                                                                                                 // 1246\n  \"caniuse\": \"video\",                                                                                                  // 1247\n  \"tags\": [\"html5\"],                                                                                                   // 1248\n  \"knownBugs\": [                                                                                                       // 1249\n    \"Without QuickTime, `Modernizr.video.h264` will be `undefined`; http://github.com/Modernizr/Modernizr/issues/546\"  // 1250\n  ],                                                                                                                   // 1251\n  \"polyfills\": [                                                                                                       // 1252\n    \"html5media\",                                                                                                      // 1253\n    \"mediaelementjs\",                                                                                                  // 1254\n    \"sublimevideo\",                                                                                                    // 1255\n    \"videojs\",                                                                                                         // 1256\n    \"leanbackplayer\",                                                                                                  // 1257\n    \"videoforeverybody\"                                                                                                // 1258\n  ]                                                                                                                    // 1259\n}                                                                                                                      // 1260\n!*/                                                                                                                    // 1261\n/* DOC                                                                                                                 // 1262\nDetects support for the video element, as well as testing what types of content it supports.                           // 1263\n                                                                                                                       // 1264\nSubproperties are provided to describe support for `ogg`, `h264` and `webm` formats, e.g.:                             // 1265\n                                                                                                                       // 1266\n```javascript                                                                                                          // 1267\nModernizr.video         // true                                                                                        // 1268\nModernizr.video.ogg     // 'probably'                                                                                  // 1269\n```                                                                                                                    // 1270\n*/                                                                                                                     // 1271\n                                                                                                                       // 1272\n  // Codec values from : github.com/NielsLeenheer/html5test/blob/9106a8/index.html#L845                                // 1273\n  //                     thx to NielsLeenheer and zcorpan                                                              // 1274\n                                                                                                                       // 1275\n  // Note: in some older browsers, \"no\" was a return value instead of empty string.                                    // 1276\n  //   It was live in FF3.5.0 and 3.5.1, but fixed in 3.5.2                                                            // 1277\n  //   It was also live in Safari 4.0.0 - 4.0.4, but fixed in 4.0.5                                                    // 1278\n                                                                                                                       // 1279\n  Modernizr.addTest('video', function() {                                                                              // 1280\n    /* jshint -W053 */                                                                                                 // 1281\n    var elem = createElement('video');                                                                                 // 1282\n    var bool = false;                                                                                                  // 1283\n                                                                                                                       // 1284\n    // IE9 Running on Windows Server SKU can cause an exception to be thrown, bug #224                                 // 1285\n    try {                                                                                                              // 1286\n      if ( bool = !!elem.canPlayType ) {                                                                               // 1287\n        bool = new Boolean(bool);                                                                                      // 1288\n        bool.ogg = elem.canPlayType('video/ogg; codecs=\"theora\"').replace(/^no$/,'');                                  // 1289\n                                                                                                                       // 1290\n        // Without QuickTime, this value will be `undefined`. github.com/Modernizr/Modernizr/issues/546                // 1291\n        bool.h264 = elem.canPlayType('video/mp4; codecs=\"avc1.42E01E\"').replace(/^no$/,'');                            // 1292\n                                                                                                                       // 1293\n        bool.webm = elem.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/^no$/,'');                           // 1294\n                                                                                                                       // 1295\n        bool.vp9 = elem.canPlayType('video/webm; codecs=\"vp9\"').replace(/^no$/,'');                                    // 1296\n                                                                                                                       // 1297\n        bool.hls = elem.canPlayType('application/x-mpegURL; codecs=\"avc1.42E01E\"').replace(/^no$/,'');                 // 1298\n      }                                                                                                                // 1299\n    } catch(e){}                                                                                                       // 1300\n                                                                                                                       // 1301\n    return bool;                                                                                                       // 1302\n  });                                                                                                                  // 1303\n                                                                                                                       // 1304\n/*!                                                                                                                    // 1305\n{                                                                                                                      // 1306\n  \"name\": \"Inline SVG\",                                                                                                // 1307\n  \"property\": \"inlinesvg\",                                                                                             // 1308\n  \"caniuse\": \"svg-html5\",                                                                                              // 1309\n  \"tags\": [\"svg\"],                                                                                                     // 1310\n  \"notes\": [{                                                                                                          // 1311\n    \"name\": \"Test page\",                                                                                               // 1312\n    \"href\": \"http://paulirish.com/demo/inline-svg\"                                                                     // 1313\n  }],                                                                                                                  // 1314\n  \"polyfills\": [\"inline-svg-polyfill\"]                                                                                 // 1315\n}                                                                                                                      // 1316\n!*/                                                                                                                    // 1317\n/* DOC                                                                                                                 // 1318\nDetects support for inline SVG in HTML (not within XHTML).                                                             // 1319\n*/                                                                                                                     // 1320\n                                                                                                                       // 1321\n  Modernizr.addTest('inlinesvg', function() {                                                                          // 1322\n    var div = createElement('div');                                                                                    // 1323\n    div.innerHTML = '<svg/>';                                                                                          // 1324\n    return (div.firstChild && div.firstChild.namespaceURI) == 'http://www.w3.org/2000/svg';                            // 1325\n  });                                                                                                                  // 1326\n                                                                                                                       // 1327\n/*!                                                                                                                    // 1328\n{                                                                                                                      // 1329\n  \"name\": \"WebGL\",                                                                                                     // 1330\n  \"property\": \"webgl\",                                                                                                 // 1331\n  \"caniuse\": \"webgl\",                                                                                                  // 1332\n  \"tags\": [\"webgl\", \"graphics\"],                                                                                       // 1333\n  \"polyfills\": [\"jebgl\", \"webglcompat\", \"cwebgl\", \"iewebgl\"]                                                           // 1334\n}                                                                                                                      // 1335\n!*/                                                                                                                    // 1336\n                                                                                                                       // 1337\n  Modernizr.addTest('webgl', function() {                                                                              // 1338\n    var canvas = createElement('canvas');                                                                              // 1339\n    var supports = 'probablySupportsContext' in canvas ? 'probablySupportsContext' :  'supportsContext';               // 1340\n    if (supports in canvas) {                                                                                          // 1341\n      return canvas[supports]('webgl') || canvas[supports]('experimental-webgl');                                      // 1342\n    }                                                                                                                  // 1343\n    return 'WebGLRenderingContext' in window;                                                                          // 1344\n  });                                                                                                                  // 1345\n                                                                                                                       // 1346\n                                                                                                                       // 1347\n  // isEventSupported determines if the given element supports the given event                                         // 1348\n  // kangax.github.com/iseventsupported/                                                                               // 1349\n  // github.com/Modernizr/Modernizr/pull/636                                                                           // 1350\n  //                                                                                                                   // 1351\n  // Known incorrects:                                                                                                 // 1352\n  //   Modernizr.hasEvent(\"webkitTransitionEnd\", elem) // false negative                                               // 1353\n  //   Modernizr.hasEvent(\"textInput\") // in Webkit. github.com/Modernizr/Modernizr/issues/333                         // 1354\n  var isEventSupported = (function (undefined) {                                                                       // 1355\n                                                                                                                       // 1356\n    // Detect whether event support can be detected via `in`. Test on a DOM element                                    // 1357\n    // using the \"blur\" event b/c it should always exist. bit.ly/event-detection                                       // 1358\n    var needsFallback = !('onblur' in document.documentElement);                                                       // 1359\n                                                                                                                       // 1360\n    /**                                                                                                                // 1361\n     * @param  {string|*}           eventName  is the name of an event to test for (e.g. \"resize\")                     // 1362\n     * @param  {(Object|string|*)=} element    is the element|document|window|tagName to test on                       // 1363\n     * @return {boolean}                                                                                               // 1364\n     */                                                                                                                // 1365\n    function isEventSupportedInner( eventName, element ) {                                                             // 1366\n                                                                                                                       // 1367\n      var isSupported;                                                                                                 // 1368\n      if ( !eventName ) { return false; }                                                                              // 1369\n      if ( !element || typeof element === 'string' ) {                                                                 // 1370\n        element = createElement(element || 'div');                                                                     // 1371\n      }                                                                                                                // 1372\n                                                                                                                       // 1373\n      // Testing via the `in` operator is sufficient for modern browsers and IE.                                       // 1374\n      // When using `setAttribute`, IE skips \"unload\", WebKit skips \"unload\" and                                       // 1375\n      // \"resize\", whereas `in` \"catches\" those.                                                                       // 1376\n      eventName = 'on' + eventName;                                                                                    // 1377\n      isSupported = eventName in element;                                                                              // 1378\n                                                                                                                       // 1379\n      // Fallback technique for old Firefox - bit.ly/event-detection                                                   // 1380\n      if ( !isSupported && needsFallback ) {                                                                           // 1381\n        if ( !element.setAttribute ) {                                                                                 // 1382\n          // Switch to generic element if it lacks `setAttribute`.                                                     // 1383\n          // It could be the `document`, `window`, or something else.                                                  // 1384\n          element = createElement('div');                                                                              // 1385\n        }                                                                                                              // 1386\n        if ( element.setAttribute && element.removeAttribute ) {                                                       // 1387\n          element.setAttribute(eventName, '');                                                                         // 1388\n          isSupported = typeof element[eventName] === 'function';                                                      // 1389\n                                                                                                                       // 1390\n          if ( element[eventName] !== undefined ) {                                                                    // 1391\n            // If property was created, \"remove it\" by setting value to `undefined`.                                   // 1392\n            element[eventName] = undefined;                                                                            // 1393\n          }                                                                                                            // 1394\n          element.removeAttribute(eventName);                                                                          // 1395\n        }                                                                                                              // 1396\n      }                                                                                                                // 1397\n                                                                                                                       // 1398\n      return isSupported;                                                                                              // 1399\n    }                                                                                                                  // 1400\n    return isEventSupportedInner;                                                                                      // 1401\n  })();                                                                                                                // 1402\n                                                                                                                       // 1403\n                                                                                                                       // 1404\n                                                                                                                       // 1405\n  // Modernizr.hasEvent() detects support for a given event, with an optional element to test on                       // 1406\n  // Modernizr.hasEvent('gesturestart', elem)                                                                          // 1407\n  var hasEvent = ModernizrProto.hasEvent = isEventSupported;                                                           // 1408\n                                                                                                                       // 1409\n/*!                                                                                                                    // 1410\n{                                                                                                                      // 1411\n  \"name\": \"Hashchange event\",                                                                                          // 1412\n  \"property\": \"hashchange\",                                                                                            // 1413\n  \"caniuse\": \"hashchange\",                                                                                             // 1414\n  \"tags\": [\"history\"],                                                                                                 // 1415\n  \"notes\": [{                                                                                                          // 1416\n    \"name\": \"MDN documentation\",                                                                                       // 1417\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/window.onhashchange\"                                     // 1418\n  }],                                                                                                                  // 1419\n  \"polyfills\": [                                                                                                       // 1420\n    \"jquery-hashchange\",                                                                                               // 1421\n    \"moo-historymanager\",                                                                                              // 1422\n    \"jquery-ajaxy\",                                                                                                    // 1423\n    \"hasher\",                                                                                                          // 1424\n    \"shistory\"                                                                                                         // 1425\n  ]                                                                                                                    // 1426\n}                                                                                                                      // 1427\n!*/                                                                                                                    // 1428\n/* DOC                                                                                                                 // 1429\nDetects support for the `hashchange` event, fired when the current location fragment changes.                          // 1430\n*/                                                                                                                     // 1431\n                                                                                                                       // 1432\n  Modernizr.addTest('hashchange', function() {                                                                         // 1433\n    if (hasEvent('hashchange', window) === false) {                                                                    // 1434\n      return false;                                                                                                    // 1435\n    }                                                                                                                  // 1436\n                                                                                                                       // 1437\n    // documentMode logic from YUI to filter out IE8 Compat Mode                                                       // 1438\n    //   which false positives.                                                                                        // 1439\n    return (document.documentMode === undefined || document.documentMode > 7);                                         // 1440\n  });                                                                                                                  // 1441\n                                                                                                                       // 1442\n                                                                                                                       // 1443\n  /**                                                                                                                  // 1444\n   * contains returns a boolean for if substr is found within str.                                                     // 1445\n   */                                                                                                                  // 1446\n  function contains( str, substr ) {                                                                                   // 1447\n    return !!~('' + str).indexOf(substr);                                                                              // 1448\n  }                                                                                                                    // 1449\n                                                                                                                       // 1450\n  ;                                                                                                                    // 1451\n/*!                                                                                                                    // 1452\n{                                                                                                                      // 1453\n  \"name\": \"CSS HSLA Colors\",                                                                                           // 1454\n  \"caniuse\": \"css3-colors\",                                                                                            // 1455\n  \"property\": \"hsla\",                                                                                                  // 1456\n  \"tags\": [\"css\"],                                                                                                     // 1457\n  \"notes\": [\"Same as rgba(), in fact, browsers re-map hsla() to rgba() internally, except IE9 who retains it as hsla\"] // 1458\n}                                                                                                                      // 1459\n!*/                                                                                                                    // 1460\n                                                                                                                       // 1461\n  Modernizr.addTest('hsla', function() {                                                                               // 1462\n    var elem = createElement('div');                                                                                   // 1463\n    var style = elem.style;                                                                                            // 1464\n    style.cssText = 'background-color:hsla(120,40%,100%,.5)';                                                          // 1465\n    return contains(style.backgroundColor, 'rgba') || contains(style.backgroundColor, 'hsla');                         // 1466\n  });                                                                                                                  // 1467\n                                                                                                                       // 1468\n/*!                                                                                                                    // 1469\n{                                                                                                                      // 1470\n  \"name\": \"CSS Supports\",                                                                                              // 1471\n  \"property\": \"supports\",                                                                                              // 1472\n  \"caniuse\": \"css-featurequeries\",                                                                                     // 1473\n  \"tags\": [\"css\"],                                                                                                     // 1474\n  \"builderAliases\": [\"css_supports\"],                                                                                  // 1475\n  \"notes\": [{                                                                                                          // 1476\n    \"name\": \"W3 Spec\",                                                                                                 // 1477\n    \"href\": \"http://dev.w3.org/csswg/css3-conditional/#at-supports\"                                                    // 1478\n  },{                                                                                                                  // 1479\n    \"name\": \"Related Github Issue\",                                                                                    // 1480\n    \"href\": \"github.com/Modernizr/Modernizr/issues/648\"                                                                // 1481\n  },{                                                                                                                  // 1482\n    \"name\": \"W3 Info\",                                                                                                 // 1483\n    \"href\": \"http://dev.w3.org/csswg/css3-conditional/#the-csssupportsrule-interface\"                                  // 1484\n  }]                                                                                                                   // 1485\n}                                                                                                                      // 1486\n!*/                                                                                                                    // 1487\n                                                                                                                       // 1488\n  Modernizr.addTest('supports', 'CSS' in window && 'supports' in window.CSS);                                          // 1489\n                                                                                                                       // 1490\n                                                                                                                       // 1491\n  var inputElem = createElement('input');                                                                              // 1492\n                                                                                                                       // 1493\n                                                                                                                       // 1494\n  var inputtypes = 'search tel url email datetime date month week time datetime-local number range color'.split(' ');  // 1495\n                                                                                                                       // 1496\n                                                                                                                       // 1497\n  var inputs = {};                                                                                                     // 1498\n                                                                                                                       // 1499\n                                                                                                                       // 1500\n  var smile = ':)';                                                                                                    // 1501\n                                                                                                                       // 1502\n/*!                                                                                                                    // 1503\n{                                                                                                                      // 1504\n  \"name\": \"Form input types\",                                                                                          // 1505\n  \"property\": \"inputtypes\",                                                                                            // 1506\n  \"caniuse\": \"forms\",                                                                                                  // 1507\n  \"tags\": [\"forms\"],                                                                                                   // 1508\n  \"authors\": [\"Mike Taylor\"],                                                                                          // 1509\n  \"polyfills\": [                                                                                                       // 1510\n    \"jquerytools\",                                                                                                     // 1511\n    \"webshims\",                                                                                                        // 1512\n    \"h5f\",                                                                                                             // 1513\n    \"webforms2\",                                                                                                       // 1514\n    \"nwxforms\",                                                                                                        // 1515\n    \"fdslider\",                                                                                                        // 1516\n    \"html5slider\",                                                                                                     // 1517\n    \"galleryhtml5forms\",                                                                                               // 1518\n    \"jscolor\",                                                                                                         // 1519\n    \"html5formshim\",                                                                                                   // 1520\n    \"jqueryformshim\",                                                                                                  // 1521\n    \"selectedoptionsjs\",                                                                                               // 1522\n    \"formvalidationjs\"                                                                                                 // 1523\n  ]                                                                                                                    // 1524\n}                                                                                                                      // 1525\n!*/                                                                                                                    // 1526\n/* DOC                                                                                                                 // 1527\nDetects support for HTML5 form input types and exposes Boolean subproperties with the results:                         // 1528\n                                                                                                                       // 1529\n```javascript                                                                                                          // 1530\nModernizr.inputtypes.color                                                                                             // 1531\nModernizr.inputtypes.date                                                                                              // 1532\nModernizr.inputtypes.datetime                                                                                          // 1533\nModernizr.inputtypes['datetime-local']                                                                                 // 1534\nModernizr.inputtypes.email                                                                                             // 1535\nModernizr.inputtypes.month                                                                                             // 1536\nModernizr.inputtypes.number                                                                                            // 1537\nModernizr.inputtypes.range                                                                                             // 1538\nModernizr.inputtypes.search                                                                                            // 1539\nModernizr.inputtypes.tel                                                                                               // 1540\nModernizr.inputtypes.time                                                                                              // 1541\nModernizr.inputtypes.url                                                                                               // 1542\nModernizr.inputtypes.week                                                                                              // 1543\n```                                                                                                                    // 1544\n*/                                                                                                                     // 1545\n                                                                                                                       // 1546\n  // Run through HTML5's new input types to see if the UA understands any.                                             // 1547\n  //   This is put behind the tests runloop because it doesn't return a                                                // 1548\n  //   true/false like all the other tests; instead, it returns an object                                              // 1549\n  //   containing each input type with its corresponding true/false value                                              // 1550\n                                                                                                                       // 1551\n  // Big thanks to @miketaylr for the html5 forms expertise. miketaylr.com/                                            // 1552\n  Modernizr['inputtypes'] = (function(props) {                                                                         // 1553\n    var bool;                                                                                                          // 1554\n    var inputElemType;                                                                                                 // 1555\n    var defaultView;                                                                                                   // 1556\n    var len = props.length;                                                                                            // 1557\n                                                                                                                       // 1558\n    for ( var i = 0; i < len; i++ ) {                                                                                  // 1559\n                                                                                                                       // 1560\n      inputElem.setAttribute('type', inputElemType = props[i]);                                                        // 1561\n      bool = inputElem.type !== 'text';                                                                                // 1562\n                                                                                                                       // 1563\n      // We first check to see if the type we give it sticks..                                                         // 1564\n      // If the type does, we feed it a textual value, which shouldn't be valid.                                       // 1565\n      // If the value doesn't stick, we know there's input sanitization which infers a custom UI                       // 1566\n      if ( bool ) {                                                                                                    // 1567\n                                                                                                                       // 1568\n        inputElem.value         = smile;                                                                               // 1569\n        inputElem.style.cssText = 'position:absolute;visibility:hidden;';                                              // 1570\n                                                                                                                       // 1571\n        if ( /^range$/.test(inputElemType) && inputElem.style.WebkitAppearance !== undefined ) {                       // 1572\n                                                                                                                       // 1573\n          docElement.appendChild(inputElem);                                                                           // 1574\n          defaultView = document.defaultView;                                                                          // 1575\n                                                                                                                       // 1576\n          // Safari 2-4 allows the smiley as a value, despite making a slider                                          // 1577\n          bool =  defaultView.getComputedStyle &&                                                                      // 1578\n            defaultView.getComputedStyle(inputElem, null).WebkitAppearance !== 'textfield' &&                          // 1579\n            // Mobile android web browser has false positive, so must                                                  // 1580\n            // check the height to see if the widget is actually there.                                                // 1581\n            (inputElem.offsetHeight !== 0);                                                                            // 1582\n                                                                                                                       // 1583\n          docElement.removeChild(inputElem);                                                                           // 1584\n                                                                                                                       // 1585\n        } else if ( /^(search|tel)$/.test(inputElemType) ){                                                            // 1586\n          // Spec doesn't define any special parsing or detectable UI                                                  // 1587\n          //   behaviors so we pass these through as true                                                              // 1588\n                                                                                                                       // 1589\n          // Interestingly, opera fails the earlier test, so it doesn't                                                // 1590\n          //  even make it here.                                                                                       // 1591\n                                                                                                                       // 1592\n        } else if ( /^(url|email|number)$/.test(inputElemType) ) {                                                     // 1593\n          // Real url and email support comes with prebaked validation.                                                // 1594\n          bool = inputElem.checkValidity && inputElem.checkValidity() === false;                                       // 1595\n                                                                                                                       // 1596\n        } else {                                                                                                       // 1597\n          // If the upgraded input compontent rejects the :) text, we got a winner                                     // 1598\n          bool = inputElem.value != smile;                                                                             // 1599\n        }                                                                                                              // 1600\n      }                                                                                                                // 1601\n                                                                                                                       // 1602\n      inputs[ props[i] ] = !!bool;                                                                                     // 1603\n    }                                                                                                                  // 1604\n    return inputs;                                                                                                     // 1605\n  })(inputtypes);                                                                                                      // 1606\n                                                                                                                       // 1607\n                                                                                                                       // 1608\n  var attrs = {};                                                                                                      // 1609\n                                                                                                                       // 1610\n                                                                                                                       // 1611\n  var inputattrs = 'autocomplete autofocus list placeholder max min multiple pattern required step'.split(' ');        // 1612\n                                                                                                                       // 1613\n/*!                                                                                                                    // 1614\n{                                                                                                                      // 1615\n  \"name\": \"Input attributes\",                                                                                          // 1616\n  \"property\": \"input\",                                                                                                 // 1617\n  \"tags\": [\"forms\"],                                                                                                   // 1618\n  \"authors\": [\"Mike Taylor\"],                                                                                          // 1619\n  \"notes\": [{                                                                                                          // 1620\n    \"name\": \"WHATWG spec\",                                                                                             // 1621\n    \"href\": \"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary\"\n  }],                                                                                                                  // 1623\n  \"knownBugs\": [\"Some blackberry devices report false positive for input.multiple\"]                                    // 1624\n}                                                                                                                      // 1625\n!*/                                                                                                                    // 1626\n/* DOC                                                                                                                 // 1627\nDetects support for HTML5 `<input>` element attributes and exposes Boolean subproperties with the results:             // 1628\n                                                                                                                       // 1629\n```javascript                                                                                                          // 1630\nModernizr.input.autocomplete                                                                                           // 1631\nModernizr.input.autofocus                                                                                              // 1632\nModernizr.input.list                                                                                                   // 1633\nModernizr.input.max                                                                                                    // 1634\nModernizr.input.min                                                                                                    // 1635\nModernizr.input.multiple                                                                                               // 1636\nModernizr.input.pattern                                                                                                // 1637\nModernizr.input.placeholder                                                                                            // 1638\nModernizr.input.required                                                                                               // 1639\nModernizr.input.step                                                                                                   // 1640\n```                                                                                                                    // 1641\n*/                                                                                                                     // 1642\n                                                                                                                       // 1643\n  // Run through HTML5's new input attributes to see if the UA understands any.                                        // 1644\n  // Mike Taylr has created a comprehensive resource for testing these attributes                                      // 1645\n  //   when applied to all input types:                                                                                // 1646\n  //   miketaylr.com/code/input-type-attr.html                                                                         // 1647\n                                                                                                                       // 1648\n  // Only input placeholder is tested while textarea's placeholder is not.                                             // 1649\n  // Currently Safari 4 and Opera 11 have support only for the input placeholder                                       // 1650\n  // Both tests are available in feature-detects/forms-placeholder.js                                                  // 1651\n  Modernizr['input'] = (function( props ) {                                                                            // 1652\n    for ( var i = 0, len = props.length; i < len; i++ ) {                                                              // 1653\n      attrs[ props[i] ] = !!(props[i] in inputElem);                                                                   // 1654\n    }                                                                                                                  // 1655\n    if (attrs.list){                                                                                                   // 1656\n      // safari false positive's on datalist: webk.it/74252                                                            // 1657\n      // see also github.com/Modernizr/Modernizr/issues/146                                                            // 1658\n      attrs.list = !!(createElement('datalist') && window.HTMLDataListElement);                                        // 1659\n    }                                                                                                                  // 1660\n    return attrs;                                                                                                      // 1661\n  })(inputattrs);                                                                                                      // 1662\n                                                                                                                       // 1663\n                                                                                                                       // 1664\n  var toStringFn = ({}).toString;                                                                                      // 1665\n                                                                                                                       // 1666\n/*!                                                                                                                    // 1667\n{                                                                                                                      // 1668\n  \"name\": \"SVG clip paths\",                                                                                            // 1669\n  \"property\": \"svgclippaths\",                                                                                          // 1670\n  \"tags\": [\"svg\"],                                                                                                     // 1671\n  \"notes\": [{                                                                                                          // 1672\n    \"name\": \"Demo\",                                                                                                    // 1673\n    \"href\": \"http://srufaculty.sru.edu/david.dailey/svg/newstuff/clipPath4.svg\"                                        // 1674\n  }]                                                                                                                   // 1675\n}                                                                                                                      // 1676\n!*/                                                                                                                    // 1677\n/* DOC                                                                                                                 // 1678\nDetects support for clip paths in SVG (only, not on HTML content).                                                     // 1679\n                                                                                                                       // 1680\nSee [this discussion](http://github.com/Modernizr/Modernizr/issues/213) regarding applying SVG clip paths to HTML content.\n*/                                                                                                                     // 1682\n                                                                                                                       // 1683\n  Modernizr.addTest('svgclippaths', function() {                                                                       // 1684\n    return !!document.createElementNS &&                                                                               // 1685\n      /SVGClipPath/.test(toStringFn.call(document.createElementNS('http://www.w3.org/2000/svg', 'clipPath')));         // 1686\n  });                                                                                                                  // 1687\n                                                                                                                       // 1688\n/*!                                                                                                                    // 1689\n{                                                                                                                      // 1690\n  \"name\": \"SVG SMIL animation\",                                                                                        // 1691\n  \"property\": \"smil\",                                                                                                  // 1692\n  \"caniuse\": \"svg-smil\",                                                                                               // 1693\n  \"tags\": [\"svg\"],                                                                                                     // 1694\n  \"notes\": [{                                                                                                          // 1695\n  \"name\": \"W3C Synchronised Multimedia spec\",                                                                          // 1696\n  \"href\": \"http://www.w3.org/AudioVideo/\"                                                                              // 1697\n  }]                                                                                                                   // 1698\n}                                                                                                                      // 1699\n!*/                                                                                                                    // 1700\n                                                                                                                       // 1701\n  // SVG SMIL animation                                                                                                // 1702\n  Modernizr.addTest('smil', function() {                                                                               // 1703\n    return !!document.createElementNS &&                                                                               // 1704\n      /SVGAnimate/.test(toStringFn.call(document.createElementNS('http://www.w3.org/2000/svg', 'animate')));           // 1705\n  });                                                                                                                  // 1706\n                                                                                                                       // 1707\n                                                                                                                       // 1708\n  var cssomPrefixes = (ModernizrProto._config.usePrefixes ? omPrefixes.split(' ') : []);                               // 1709\n  ModernizrProto._cssomPrefixes = cssomPrefixes;                                                                       // 1710\n                                                                                                                       // 1711\n                                                                                                                       // 1712\n  function getBody() {                                                                                                 // 1713\n    // After page load injecting a fake body doesn't work so check if body exists                                      // 1714\n    var body = document.body;                                                                                          // 1715\n                                                                                                                       // 1716\n    if(!body) {                                                                                                        // 1717\n      // Can't use the real body create a fake one.                                                                    // 1718\n      body = createElement('body');                                                                                    // 1719\n      body.fake = true;                                                                                                // 1720\n    }                                                                                                                  // 1721\n                                                                                                                       // 1722\n    return body;                                                                                                       // 1723\n  }                                                                                                                    // 1724\n                                                                                                                       // 1725\n  ;                                                                                                                    // 1726\n                                                                                                                       // 1727\n  // Inject element with style element and some CSS rules                                                              // 1728\n  function injectElementWithStyles( rule, callback, nodes, testnames ) {                                               // 1729\n    var mod = 'modernizr';                                                                                             // 1730\n    var style;                                                                                                         // 1731\n    var ret;                                                                                                           // 1732\n    var node;                                                                                                          // 1733\n    var docOverflow;                                                                                                   // 1734\n    var div = createElement('div');                                                                                    // 1735\n    var body = getBody();                                                                                              // 1736\n                                                                                                                       // 1737\n    if ( parseInt(nodes, 10) ) {                                                                                       // 1738\n      // In order not to give false positives we create a node for each test                                           // 1739\n      // This also allows the method to scale for unspecified uses                                                     // 1740\n      while ( nodes-- ) {                                                                                              // 1741\n        node = createElement('div');                                                                                   // 1742\n        node.id = testnames ? testnames[nodes] : mod + (nodes + 1);                                                    // 1743\n        div.appendChild(node);                                                                                         // 1744\n      }                                                                                                                // 1745\n    }                                                                                                                  // 1746\n                                                                                                                       // 1747\n    // <style> elements in IE6-9 are considered 'NoScope' elements and therefore will be removed                       // 1748\n    // when injected with innerHTML. To get around this you need to prepend the 'NoScope' element                      // 1749\n    // with a 'scoped' element, in our case the soft-hyphen entity as it won't mess with our measurements.             // 1750\n    // msdn.microsoft.com/en-us/library/ms533897%28VS.85%29.aspx                                                       // 1751\n    // Documents served as xml will throw if using &shy; so use xml friendly encoded version. See issue #277           // 1752\n    style = ['&#173;','<style id=\"s', mod, '\">', rule, '</style>'].join('');                                           // 1753\n    div.id = mod;                                                                                                      // 1754\n    // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.\n    // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270\n    (!body.fake ? div : body).innerHTML += style;                                                                      // 1757\n    body.appendChild(div);                                                                                             // 1758\n    if ( body.fake ) {                                                                                                 // 1759\n      //avoid crashing IE8, if background image is used                                                                // 1760\n      body.style.background = '';                                                                                      // 1761\n      //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible                  // 1762\n      body.style.overflow = 'hidden';                                                                                  // 1763\n      docOverflow = docElement.style.overflow;                                                                         // 1764\n      docElement.style.overflow = 'hidden';                                                                            // 1765\n      docElement.appendChild(body);                                                                                    // 1766\n    }                                                                                                                  // 1767\n                                                                                                                       // 1768\n    ret = callback(div, rule);                                                                                         // 1769\n    // If this is done after page load we don't want to remove the body so check if body exists                        // 1770\n    if ( body.fake ) {                                                                                                 // 1771\n      body.parentNode.removeChild(body);                                                                               // 1772\n      docElement.style.overflow = docOverflow;                                                                         // 1773\n      // Trigger layout so kinetic scrolling isn't disabled in iOS6+                                                   // 1774\n      docElement.offsetHeight;                                                                                         // 1775\n    } else {                                                                                                           // 1776\n      div.parentNode.removeChild(div);                                                                                 // 1777\n    }                                                                                                                  // 1778\n                                                                                                                       // 1779\n    return !!ret;                                                                                                      // 1780\n                                                                                                                       // 1781\n  }                                                                                                                    // 1782\n                                                                                                                       // 1783\n  ;                                                                                                                    // 1784\n                                                                                                                       // 1785\n  var testStyles = ModernizrProto.testStyles = injectElementWithStyles;                                                // 1786\n                                                                                                                       // 1787\n/*!                                                                                                                    // 1788\n{                                                                                                                      // 1789\n  \"name\": \"@font-face\",                                                                                                // 1790\n  \"property\": \"fontface\",                                                                                              // 1791\n  \"authors\": [\"Diego Perini\", \"Mat Marquis\"],                                                                          // 1792\n  \"tags\": [\"css\"],                                                                                                     // 1793\n  \"knownBugs\": [                                                                                                       // 1794\n    \"False Positive: WebOS http://github.com/Modernizr/Modernizr/issues/342\",                                          // 1795\n    \"False Postive: WP7 http://github.com/Modernizr/Modernizr/issues/538\"                                              // 1796\n  ],                                                                                                                   // 1797\n  \"notes\": [{                                                                                                          // 1798\n    \"name\": \"@font-face detection routine by Diego Perini\",                                                            // 1799\n    \"href\": \"http://javascript.nwbox.com/CSSSupport/\"                                                                  // 1800\n  },{                                                                                                                  // 1801\n    \"name\": \"Filament Group @font-face compatibility research\",                                                        // 1802\n    \"href\": \"https://docs.google.com/presentation/d/1n4NyG4uPRjAA8zn_pSQ_Ket0RhcWC6QlZ6LMjKeECo0/edit#slide=id.p\"      // 1803\n  },{                                                                                                                  // 1804\n    \"name\": \"Filament Grunticon/@font-face device testing results\",                                                    // 1805\n    \"href\": \"https://docs.google.com/spreadsheet/ccc?key=0Ag5_yGvxpINRdHFYeUJPNnZMWUZKR2ItMEpRTXZPdUE#gid=0\"           // 1806\n  },{                                                                                                                  // 1807\n    \"name\": \"CSS fonts on Android\",                                                                                    // 1808\n    \"href\": \"http://stackoverflow.com/questions/3200069/css-fonts-on-android\"                                          // 1809\n  },{                                                                                                                  // 1810\n    \"name\": \"@font-face and Android\",                                                                                  // 1811\n    \"href\": \"http://archivist.incutio.com/viewlist/css-discuss/115960\"                                                 // 1812\n  }]                                                                                                                   // 1813\n}                                                                                                                      // 1814\n!*/                                                                                                                    // 1815\n                                                                                                                       // 1816\n  var blacklist = (function() {                                                                                        // 1817\n    var ua = navigator.userAgent;                                                                                      // 1818\n    var wkvers = ua.match( /applewebkit\\/([0-9]+)/gi ) && parseFloat( RegExp.$1 );                                     // 1819\n    var webos = ua.match( /w(eb)?osbrowser/gi );                                                                       // 1820\n    var wppre8 = ua.match( /windows phone/gi ) && ua.match( /iemobile\\/([0-9])+/gi ) && parseFloat( RegExp.$1 ) >= 9;  // 1821\n    var oldandroid = wkvers < 533 && ua.match( /android/gi );                                                          // 1822\n    return webos || oldandroid || wppre8;                                                                              // 1823\n  }());                                                                                                                // 1824\n  if( blacklist ) {                                                                                                    // 1825\n    Modernizr.addTest('fontface', false);                                                                              // 1826\n  } else {                                                                                                             // 1827\n    testStyles('@font-face {font-family:\"font\";src:url(\"https://\")}', function( node, rule ) {                         // 1828\n      var style = document.getElementById('smodernizr');                                                               // 1829\n      var sheet = style.sheet || style.styleSheet;                                                                     // 1830\n      var cssText = sheet ? (sheet.cssRules && sheet.cssRules[0] ? sheet.cssRules[0].cssText : sheet.cssText || '') : '';\n      var bool = /src/i.test(cssText) && cssText.indexOf(rule.split(' ')[0]) === 0;                                    // 1832\n      Modernizr.addTest('fontface', bool);                                                                             // 1833\n    });                                                                                                                // 1834\n  }                                                                                                                    // 1835\n;                                                                                                                      // 1836\n/*!                                                                                                                    // 1837\n{                                                                                                                      // 1838\n  \"name\": \"CSS Generated Content\",                                                                                     // 1839\n  \"property\": \"generatedcontent\",                                                                                      // 1840\n  \"tags\": [\"css\"],                                                                                                     // 1841\n  \"warnings\": [\"Android won't return correct height for anything below 7px #738\"]                                      // 1842\n}                                                                                                                      // 1843\n!*/                                                                                                                    // 1844\n                                                                                                                       // 1845\n  testStyles('#modernizr{font:0/0 a}#modernizr:after{content:\":)\";visibility:hidden;font:7px/1 a}', function( node ) { // 1846\n    Modernizr.addTest('generatedcontent', node.offsetHeight >= 7);                                                     // 1847\n  });                                                                                                                  // 1848\n                                                                                                                       // 1849\n                                                                                                                       // 1850\n  // Change the function's scope.                                                                                      // 1851\n  function fnBind(fn, that) {                                                                                          // 1852\n    return function() {                                                                                                // 1853\n      return fn.apply(that, arguments);                                                                                // 1854\n    };                                                                                                                 // 1855\n  }                                                                                                                    // 1856\n                                                                                                                       // 1857\n  ;                                                                                                                    // 1858\n                                                                                                                       // 1859\n  /**                                                                                                                  // 1860\n   * testDOMProps is a generic DOM property test; if a browser supports                                                // 1861\n   *   a certain property, it won't return undefined for it.                                                           // 1862\n   */                                                                                                                  // 1863\n  function testDOMProps( props, obj, elem ) {                                                                          // 1864\n    var item;                                                                                                          // 1865\n                                                                                                                       // 1866\n    for ( var i in props ) {                                                                                           // 1867\n      if ( props[i] in obj ) {                                                                                         // 1868\n                                                                                                                       // 1869\n        // return the property name as a string                                                                        // 1870\n        if (elem === false) return props[i];                                                                           // 1871\n                                                                                                                       // 1872\n        item = obj[props[i]];                                                                                          // 1873\n                                                                                                                       // 1874\n        // let's bind a function                                                                                       // 1875\n        if (is(item, 'function')) {                                                                                    // 1876\n          // bind to obj unless overriden                                                                              // 1877\n          return fnBind(item, elem || obj);                                                                            // 1878\n        }                                                                                                              // 1879\n                                                                                                                       // 1880\n        // return the unbound function or obj or value                                                                 // 1881\n        return item;                                                                                                   // 1882\n      }                                                                                                                // 1883\n    }                                                                                                                  // 1884\n    return false;                                                                                                      // 1885\n  }                                                                                                                    // 1886\n                                                                                                                       // 1887\n  ;                                                                                                                    // 1888\n                                                                                                                       // 1889\n  /**                                                                                                                  // 1890\n   * Create our \"modernizr\" element that we do most feature tests on.                                                  // 1891\n   */                                                                                                                  // 1892\n  var modElem = {                                                                                                      // 1893\n    elem : createElement('modernizr')                                                                                  // 1894\n  };                                                                                                                   // 1895\n                                                                                                                       // 1896\n  // Clean up this element                                                                                             // 1897\n  Modernizr._q.push(function() {                                                                                       // 1898\n    delete modElem.elem;                                                                                               // 1899\n  });                                                                                                                  // 1900\n                                                                                                                       // 1901\n                                                                                                                       // 1902\n                                                                                                                       // 1903\n  var mStyle = {                                                                                                       // 1904\n    style : modElem.elem.style                                                                                         // 1905\n  };                                                                                                                   // 1906\n                                                                                                                       // 1907\n  // kill ref for gc, must happen before                                                                               // 1908\n  // mod.elem is removed, so we unshift on to                                                                          // 1909\n  // the front of the queue.                                                                                           // 1910\n  Modernizr._q.unshift(function() {                                                                                    // 1911\n    delete mStyle.style;                                                                                               // 1912\n  });                                                                                                                  // 1913\n                                                                                                                       // 1914\n                                                                                                                       // 1915\n                                                                                                                       // 1916\n  // Helper function for converting camelCase to kebab-case,                                                           // 1917\n  // e.g. boxSizing -> box-sizing                                                                                      // 1918\n  function domToCSS( name ) {                                                                                          // 1919\n    return name.replace(/([A-Z])/g, function(str, m1) {                                                                // 1920\n      return '-' + m1.toLowerCase();                                                                                   // 1921\n    }).replace(/^ms-/, '-ms-');                                                                                        // 1922\n  }                                                                                                                    // 1923\n  ;                                                                                                                    // 1924\n                                                                                                                       // 1925\n  // Function to allow us to use native feature detection functionality if available.                                  // 1926\n  // Accepts a list of property names and a single value                                                               // 1927\n  // Returns `undefined` if native detection not available                                                             // 1928\n  function nativeTestProps ( props, value ) {                                                                          // 1929\n    var i = props.length;                                                                                              // 1930\n    // Start with the JS API: http://www.w3.org/TR/css3-conditional/#the-css-interface                                 // 1931\n    if ('CSS' in window && 'supports' in window.CSS) {                                                                 // 1932\n      // Try every prefixed variant of the property                                                                    // 1933\n      while (i--) {                                                                                                    // 1934\n        if (window.CSS.supports(domToCSS(props[i]), value)) {                                                          // 1935\n          return true;                                                                                                 // 1936\n        }                                                                                                              // 1937\n      }                                                                                                                // 1938\n      return false;                                                                                                    // 1939\n    }                                                                                                                  // 1940\n    // Otherwise fall back to at-rule (for FF 17 and Opera 12.x)                                                       // 1941\n    else if ('CSSSupportsRule' in window) {                                                                            // 1942\n      // Build a condition string for every prefixed variant                                                           // 1943\n      var conditionText = [];                                                                                          // 1944\n      while (i--) {                                                                                                    // 1945\n        conditionText.push('(' + domToCSS(props[i]) + ':' + value + ')');                                              // 1946\n      }                                                                                                                // 1947\n      conditionText = conditionText.join(' or ');                                                                      // 1948\n      return injectElementWithStyles('@supports (' + conditionText + ') { #modernizr { position: absolute; } }', function( node ) {\n        return (window.getComputedStyle ?                                                                              // 1950\n                getComputedStyle(node, null) :                                                                         // 1951\n                node.currentStyle)['position'] == 'absolute';                                                          // 1952\n      });                                                                                                              // 1953\n    }                                                                                                                  // 1954\n    return undefined;                                                                                                  // 1955\n  }                                                                                                                    // 1956\n  ;                                                                                                                    // 1957\n                                                                                                                       // 1958\n  // testProps is a generic CSS / DOM property test.                                                                   // 1959\n                                                                                                                       // 1960\n  // In testing support for a given CSS property, it's legit to test:                                                  // 1961\n  //    `elem.style[styleName] !== undefined`                                                                          // 1962\n  // If the property is supported it will return an empty string,                                                      // 1963\n  // if unsupported it will return undefined.                                                                          // 1964\n                                                                                                                       // 1965\n  // We'll take advantage of this quick test and skip setting a style                                                  // 1966\n  // on our modernizr element, but instead just testing undefined vs                                                   // 1967\n  // empty string.                                                                                                     // 1968\n                                                                                                                       // 1969\n  // Property names can be provided in either camelCase or kebab-case.                                                 // 1970\n                                                                                                                       // 1971\n  function testProps( props, prefixed, value, skipValueTest ) {                                                        // 1972\n    skipValueTest = is(skipValueTest, 'undefined') ? false : skipValueTest;                                            // 1973\n                                                                                                                       // 1974\n    // Try native detect first                                                                                         // 1975\n    if (!is(value, 'undefined')) {                                                                                     // 1976\n      var result = nativeTestProps(props, value);                                                                      // 1977\n      if(!is(result, 'undefined')) {                                                                                   // 1978\n        return result;                                                                                                 // 1979\n      }                                                                                                                // 1980\n    }                                                                                                                  // 1981\n                                                                                                                       // 1982\n    // Otherwise do it properly                                                                                        // 1983\n    var afterInit, i, propsLength, prop, before;                                                                       // 1984\n                                                                                                                       // 1985\n    // If we don't have a style element, that means                                                                    // 1986\n    // we're running async or after the core tests,                                                                    // 1987\n    // so we'll need to create our own elements to use                                                                 // 1988\n    if ( !mStyle.style ) {                                                                                             // 1989\n      afterInit = true;                                                                                                // 1990\n      mStyle.modElem = createElement('modernizr');                                                                     // 1991\n      mStyle.style = mStyle.modElem.style;                                                                             // 1992\n    }                                                                                                                  // 1993\n                                                                                                                       // 1994\n    // Delete the objects if we                                                                                        // 1995\n    // we created them.                                                                                                // 1996\n    function cleanElems() {                                                                                            // 1997\n      if (afterInit) {                                                                                                 // 1998\n        delete mStyle.style;                                                                                           // 1999\n        delete mStyle.modElem;                                                                                         // 2000\n      }                                                                                                                // 2001\n    }                                                                                                                  // 2002\n                                                                                                                       // 2003\n    propsLength = props.length;                                                                                        // 2004\n    for ( i = 0; i < propsLength; i++ ) {                                                                              // 2005\n      prop = props[i];                                                                                                 // 2006\n      before = mStyle.style[prop];                                                                                     // 2007\n                                                                                                                       // 2008\n      if (contains(prop, '-')) {                                                                                       // 2009\n        prop = cssToDOM(prop);                                                                                         // 2010\n      }                                                                                                                // 2011\n                                                                                                                       // 2012\n      if ( mStyle.style[prop] !== undefined ) {                                                                        // 2013\n                                                                                                                       // 2014\n        // If value to test has been passed in, do a set-and-check test.                                               // 2015\n        // 0 (integer) is a valid property value, so check that `value` isn't                                          // 2016\n        // undefined, rather than just checking it's truthy.                                                           // 2017\n        if (!skipValueTest && !is(value, 'undefined')) {                                                               // 2018\n                                                                                                                       // 2019\n          // Needs a try catch block because of old IE. This is slow, but will                                         // 2020\n          // be avoided in most cases because `skipValueTest` will be used.                                            // 2021\n          try {                                                                                                        // 2022\n            mStyle.style[prop] = value;                                                                                // 2023\n          } catch (e) {}                                                                                               // 2024\n                                                                                                                       // 2025\n          // If the property value has changed, we assume the value used is                                            // 2026\n          // supported. If `value` is empty string, it'll fail here (because                                           // 2027\n          // it hasn't changed), which matches how browsers have implemented                                           // 2028\n          // CSS.supports()                                                                                            // 2029\n          if (mStyle.style[prop] != before) {                                                                          // 2030\n            cleanElems();                                                                                              // 2031\n            return prefixed == 'pfx' ? prop : true;                                                                    // 2032\n          }                                                                                                            // 2033\n        }                                                                                                              // 2034\n        // Otherwise just return true, or the property name if this is a                                               // 2035\n        // `prefixed()` call                                                                                           // 2036\n        else {                                                                                                         // 2037\n          cleanElems();                                                                                                // 2038\n          return prefixed == 'pfx' ? prop : true;                                                                      // 2039\n        }                                                                                                              // 2040\n      }                                                                                                                // 2041\n    }                                                                                                                  // 2042\n    cleanElems();                                                                                                      // 2043\n    return false;                                                                                                      // 2044\n  }                                                                                                                    // 2045\n                                                                                                                       // 2046\n  ;                                                                                                                    // 2047\n                                                                                                                       // 2048\n  // Modernizr.testProp() investigates whether a given style property is recognized                                    // 2049\n  // Property names can be provided in either camelCase or kebab-case.                                                 // 2050\n  // Modernizr.testProp('pointerEvents')                                                                               // 2051\n  // Also accepts optional 2nd arg, of a value to use for native feature detection, e.g.:                              // 2052\n  // Modernizr.testProp('pointerEvents', 'none')                                                                       // 2053\n  var testProp = ModernizrProto.testProp = function( prop, value, useValue ) {                                         // 2054\n    return testProps([prop], undefined, value, useValue);                                                              // 2055\n  };                                                                                                                   // 2056\n                                                                                                                       // 2057\n/*!                                                                                                                    // 2058\n{                                                                                                                      // 2059\n  \"name\": \"CSS textshadow\",                                                                                            // 2060\n  \"property\": \"textshadow\",                                                                                            // 2061\n  \"caniuse\": \"css-textshadow\",                                                                                         // 2062\n  \"tags\": [\"css\"],                                                                                                     // 2063\n  \"knownBugs\": [\"FF3.0 will false positive on this test\"]                                                              // 2064\n}                                                                                                                      // 2065\n!*/                                                                                                                    // 2066\n                                                                                                                       // 2067\n  Modernizr.addTest('textshadow', testProp('textShadow', '1px 1px'));                                                  // 2068\n                                                                                                                       // 2069\n                                                                                                                       // 2070\n  /**                                                                                                                  // 2071\n   * testPropsAll tests a list of DOM properties we want to check against.                                             // 2072\n   *     We specify literally ALL possible (known and/or likely) properties on                                         // 2073\n   *     the element including the non-vendor prefixed one, for forward-                                               // 2074\n   *     compatibility.                                                                                                // 2075\n   */                                                                                                                  // 2076\n  function testPropsAll( prop, prefixed, elem, value, skipValueTest ) {                                                // 2077\n                                                                                                                       // 2078\n    var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1),                                                         // 2079\n    props = (prop + ' ' + cssomPrefixes.join(ucProp + ' ') + ucProp).split(' ');                                       // 2080\n                                                                                                                       // 2081\n    // did they call .prefixed('boxSizing') or are we just testing a prop?                                             // 2082\n    if(is(prefixed, 'string') || is(prefixed, 'undefined')) {                                                          // 2083\n      return testProps(props, prefixed, value, skipValueTest);                                                         // 2084\n                                                                                                                       // 2085\n      // otherwise, they called .prefixed('requestAnimationFrame', window[, elem])                                     // 2086\n    } else {                                                                                                           // 2087\n      props = (prop + ' ' + (domPrefixes).join(ucProp + ' ') + ucProp).split(' ');                                     // 2088\n      return testDOMProps(props, prefixed, elem);                                                                      // 2089\n    }                                                                                                                  // 2090\n  }                                                                                                                    // 2091\n                                                                                                                       // 2092\n  // Modernizr.testAllProps() investigates whether a given style property,                                             // 2093\n  //     or any of its vendor-prefixed variants, is recognized                                                         // 2094\n  // Note that the property names must be provided in the camelCase variant.                                           // 2095\n  // Modernizr.testAllProps('boxSizing')                                                                               // 2096\n  ModernizrProto.testAllProps = testPropsAll;                                                                          // 2097\n                                                                                                                       // 2098\n                                                                                                                       // 2099\n                                                                                                                       // 2100\n  // Modernizr.prefixed() returns the prefixed or nonprefixed property name variant of your input                      // 2101\n  // Modernizr.prefixed('boxSizing') // 'MozBoxSizing'                                                                 // 2102\n                                                                                                                       // 2103\n  // Properties can be passed as DOM-style camelCase or CSS-style kebab-case.                                          // 2104\n  // Return values will always be in camelCase; if you want kebab-case, use Modernizr.prefixedCSS().                   // 2105\n                                                                                                                       // 2106\n  // If you're trying to ascertain which transition end event to bind to, you might do something like...               // 2107\n  //                                                                                                                   // 2108\n  //     var transEndEventNames = {                                                                                    // 2109\n  //         'WebkitTransition' : 'webkitTransitionEnd',// Saf 6, Android Browser                                      // 2110\n  //         'MozTransition'    : 'transitionend',      // only for FF < 15                                            // 2111\n  //         'transition'       : 'transitionend'       // IE10, Opera, Chrome, FF 15+, Saf 7+                         // 2112\n  //     },                                                                                                            // 2113\n  //     transEndEventName = transEndEventNames[ Modernizr.prefixed('transition') ];                                   // 2114\n                                                                                                                       // 2115\n  var prefixed = ModernizrProto.prefixed = function( prop, obj, elem ) {                                               // 2116\n    if (prop.indexOf('@') === 0) {                                                                                     // 2117\n      return atRule(prop);                                                                                             // 2118\n    }                                                                                                                  // 2119\n                                                                                                                       // 2120\n    if (prop.indexOf('-') != -1) {                                                                                     // 2121\n      // Convert kebab-case to camelCase                                                                               // 2122\n      prop = cssToDOM(prop);                                                                                           // 2123\n    }                                                                                                                  // 2124\n    if (!obj) {                                                                                                        // 2125\n      return testPropsAll(prop, 'pfx');                                                                                // 2126\n    } else {                                                                                                           // 2127\n      // Testing DOM property e.g. Modernizr.prefixed('requestAnimationFrame', window) // 'mozRequestAnimationFrame'   // 2128\n      return testPropsAll(prop, obj, elem);                                                                            // 2129\n    }                                                                                                                  // 2130\n  };                                                                                                                   // 2131\n                                                                                                                       // 2132\n                                                                                                                       // 2133\n/*!                                                                                                                    // 2134\n{                                                                                                                      // 2135\n  \"name\": \"IndexedDB\",                                                                                                 // 2136\n  \"property\": \"indexeddb\",                                                                                             // 2137\n  \"caniuse\": \"indexeddb\",                                                                                              // 2138\n  \"tags\": [\"storage\"],                                                                                                 // 2139\n  \"polyfills\": [\"indexeddb\"]                                                                                           // 2140\n}                                                                                                                      // 2141\n!*/                                                                                                                    // 2142\n/* DOC                                                                                                                 // 2143\nDetects support for the IndexedDB client-side storage API (final spec).                                                // 2144\n*/                                                                                                                     // 2145\n                                                                                                                       // 2146\n  // Vendors had inconsistent prefixing with the experimental Indexed DB:                                              // 2147\n  // - Webkit's implementation is accessible through webkitIndexedDB                                                   // 2148\n  // - Firefox shipped moz_indexedDB before FF4b9, but since then has been mozIndexedDB                                // 2149\n  // For speed, we don't test the legacy (and beta-only) indexedDB                                                     // 2150\n                                                                                                                       // 2151\n  var indexeddb = prefixed('indexedDB', window);                                                                       // 2152\n  Modernizr.addTest('indexeddb', !!indexeddb);                                                                         // 2153\n                                                                                                                       // 2154\n  if (!!indexeddb) {                                                                                                   // 2155\n    Modernizr.addTest('indexeddb.deletedatabase', 'deleteDatabase' in indexeddb);                                      // 2156\n  }                                                                                                                    // 2157\n;                                                                                                                      // 2158\n                                                                                                                       // 2159\n  /**                                                                                                                  // 2160\n   * testAllProps determines whether a given CSS property, in some prefixed                                            // 2161\n   * form, is supported by the browser. It can optionally be given a value; in                                         // 2162\n   * which case testAllProps will only return true if the browser supports that                                        // 2163\n   * value for the named property; this latter case will use native detection                                          // 2164\n   * (via window.CSS.supports) if available. A boolean can be passed as a 3rd                                          // 2165\n   * parameter to skip the value check when native detection isn't available,                                          // 2166\n   * to improve performance when simply testing for support of a property.                                             // 2167\n   *                                                                                                                   // 2168\n   * @param prop - String naming the property to test (either camelCase or                                             // 2169\n   *               kebab-case)                                                                                         // 2170\n   * @param value - [optional] String of the value to test                                                             // 2171\n   * @param skipValueTest - [optional] Whether to skip testing that the value                                          // 2172\n   *                        is supported when using non-native detection                                               // 2173\n   *                        (default: false)                                                                           // 2174\n   */                                                                                                                  // 2175\n  function testAllProps (prop, value, skipValueTest) {                                                                 // 2176\n    return testPropsAll(prop, undefined, undefined, value, skipValueTest);                                             // 2177\n  }                                                                                                                    // 2178\n  ModernizrProto.testAllProps = testAllProps;                                                                          // 2179\n                                                                                                                       // 2180\n/*!                                                                                                                    // 2181\n{                                                                                                                      // 2182\n  \"name\": \"Background Size\",                                                                                           // 2183\n  \"property\": \"backgroundsize\",                                                                                        // 2184\n  \"tags\": [\"css\"],                                                                                                     // 2185\n  \"knownBugs\": [\"This will false positive in Opera Mini - http://github.com/Modernizr/Modernizr/issues/396\"],          // 2186\n  \"notes\": [{                                                                                                          // 2187\n    \"name\": \"Related Issue\",                                                                                           // 2188\n    \"href\": \"http://github.com/Modernizr/Modernizr/issues/396\"                                                         // 2189\n  }]                                                                                                                   // 2190\n}                                                                                                                      // 2191\n!*/                                                                                                                    // 2192\n                                                                                                                       // 2193\n  Modernizr.addTest('backgroundsize', testAllProps('backgroundSize', '100%', true));                                   // 2194\n                                                                                                                       // 2195\n/*!                                                                                                                    // 2196\n{                                                                                                                      // 2197\n  \"name\": \"Border Image\",                                                                                              // 2198\n  \"property\": \"borderimage\",                                                                                           // 2199\n  \"caniuse\": \"border-image\",                                                                                           // 2200\n  \"polyfills\": [\"css3pie\"],                                                                                            // 2201\n   \"knownBugs\": [\"Android < 2.0 is true, but has a broken implementation\"],                                            // 2202\n  \"tags\": [\"css\"]                                                                                                      // 2203\n}                                                                                                                      // 2204\n!*/                                                                                                                    // 2205\n                                                                                                                       // 2206\n  Modernizr.addTest('borderimage', testAllProps('borderImage', 'url() 1', true));                                      // 2207\n                                                                                                                       // 2208\n/*!                                                                                                                    // 2209\n{                                                                                                                      // 2210\n  \"name\": \"Border Radius\",                                                                                             // 2211\n  \"property\": \"borderradius\",                                                                                          // 2212\n  \"caniuse\": \"border-radius\",                                                                                          // 2213\n  \"polyfills\": [\"css3pie\"],                                                                                            // 2214\n  \"tags\": [\"css\"],                                                                                                     // 2215\n  \"notes\": [{                                                                                                          // 2216\n    \"name\": \"Comprehensive Compat Chart\",                                                                              // 2217\n    \"href\": \"http://muddledramblings.com/table-of-css3-border-radius-compliance\"                                       // 2218\n  }]                                                                                                                   // 2219\n}                                                                                                                      // 2220\n!*/                                                                                                                    // 2221\n                                                                                                                       // 2222\n  Modernizr.addTest('borderradius', testAllProps('borderRadius', '0px', true));                                        // 2223\n                                                                                                                       // 2224\n/*!                                                                                                                    // 2225\n{                                                                                                                      // 2226\n  \"name\": \"Box Shadow\",                                                                                                // 2227\n  \"property\": \"boxshadow\",                                                                                             // 2228\n  \"caniuse\": \"css-boxshadow\",                                                                                          // 2229\n  \"tags\": [\"css\"],                                                                                                     // 2230\n  \"knownBugs\": [                                                                                                       // 2231\n    \"WebOS false positives on this test.\",                                                                             // 2232\n    \"The Kindle Silk browser false positives\"                                                                          // 2233\n  ]                                                                                                                    // 2234\n}                                                                                                                      // 2235\n!*/                                                                                                                    // 2236\n                                                                                                                       // 2237\n  Modernizr.addTest('boxshadow', testAllProps('boxShadow', '1px 1px', true));                                          // 2238\n                                                                                                                       // 2239\n/*!                                                                                                                    // 2240\n{                                                                                                                      // 2241\n  \"name\": \"CSS Animations\",                                                                                            // 2242\n  \"property\": \"cssanimations\",                                                                                         // 2243\n  \"caniuse\": \"css-animation\",                                                                                          // 2244\n  \"polyfills\": [\"transformie\", \"csssandpaper\"],                                                                        // 2245\n  \"tags\": [\"css\"],                                                                                                     // 2246\n  \"warnings\": [\"Android < 4 will pass this test, but can only animate a single property at a time\"],                   // 2247\n  \"notes\": [{                                                                                                          // 2248\n    \"name\" : \"Article: 'Dispelling the Android CSS animation myths'\",                                                  // 2249\n    \"href\": \"http://goo.gl/OGw5Gm\"                                                                                     // 2250\n  }]                                                                                                                   // 2251\n}                                                                                                                      // 2252\n!*/                                                                                                                    // 2253\n/* DOC                                                                                                                 // 2254\nDetects whether or not elements can be animated using CSS                                                              // 2255\n*/                                                                                                                     // 2256\n                                                                                                                       // 2257\n  Modernizr.addTest('cssanimations', testAllProps('animationName', 'a', true));                                        // 2258\n                                                                                                                       // 2259\n/*!                                                                                                                    // 2260\n{                                                                                                                      // 2261\n  \"name\": \"CSS Columns\",                                                                                               // 2262\n  \"property\": \"csscolumns\",                                                                                            // 2263\n  \"caniuse\": \"multicolumn\",                                                                                            // 2264\n  \"polyfills\": [\"css3multicolumnjs\"],                                                                                  // 2265\n  \"tags\": [\"css\"]                                                                                                      // 2266\n}                                                                                                                      // 2267\n!*/                                                                                                                    // 2268\n                                                                                                                       // 2269\n                                                                                                                       // 2270\n  (function() {                                                                                                        // 2271\n                                                                                                                       // 2272\n    /* jshint -W053 */                                                                                                 // 2273\n    Modernizr.addTest('csscolumns', function(){                                                                        // 2274\n      var bool = false;                                                                                                // 2275\n      var test = testAllProps('columnCount');                                                                          // 2276\n      try {                                                                                                            // 2277\n        if ( bool = !!test ) {                                                                                         // 2278\n          bool = new Boolean(bool);                                                                                    // 2279\n        }                                                                                                              // 2280\n      } catch(e){}                                                                                                     // 2281\n                                                                                                                       // 2282\n      return bool;                                                                                                     // 2283\n    });                                                                                                                // 2284\n                                                                                                                       // 2285\n    var props = ['Width', 'Span', 'Fill', 'Gap', 'Rule', 'RuleColor', 'RuleStyle', 'RuleWidth', 'BreakBefore', 'BreakAfter', 'BreakInside'];\n    var name, test;                                                                                                    // 2287\n                                                                                                                       // 2288\n    for (var i = 0; i < props.length; i++) {                                                                           // 2289\n      name = props[i].toLowerCase();                                                                                   // 2290\n      test = testAllProps('column' + props[i]);                                                                        // 2291\n                                                                                                                       // 2292\n      // break-before, break-after & break-inside are not \"column\"-prefixed in spec                                    // 2293\n      if (name === 'breakbefore' || name === 'breakafter' || name == 'breakinside') {                                  // 2294\n        test = test || testAllProps(props[i]);                                                                         // 2295\n      }                                                                                                                // 2296\n                                                                                                                       // 2297\n      Modernizr.addTest('csscolumns.' + name, test);                                                                   // 2298\n    }                                                                                                                  // 2299\n                                                                                                                       // 2300\n                                                                                                                       // 2301\n  })();                                                                                                                // 2302\n                                                                                                                       // 2303\n                                                                                                                       // 2304\n/*!                                                                                                                    // 2305\n{                                                                                                                      // 2306\n  \"name\": \"CSS Reflections\",                                                                                           // 2307\n  \"caniuse\": \"css-reflections\",                                                                                        // 2308\n  \"property\": \"cssreflections\",                                                                                        // 2309\n  \"tags\": [\"css\"]                                                                                                      // 2310\n}                                                                                                                      // 2311\n!*/                                                                                                                    // 2312\n                                                                                                                       // 2313\n  Modernizr.addTest('cssreflections', testAllProps('boxReflect', 'above', true));                                      // 2314\n                                                                                                                       // 2315\n/*!                                                                                                                    // 2316\n{                                                                                                                      // 2317\n  \"name\": \"CSS Transforms\",                                                                                            // 2318\n  \"property\": \"csstransforms\",                                                                                         // 2319\n  \"caniuse\": \"transforms2d\",                                                                                           // 2320\n  \"tags\": [\"css\"]                                                                                                      // 2321\n}                                                                                                                      // 2322\n!*/                                                                                                                    // 2323\n                                                                                                                       // 2324\n  Modernizr.addTest('csstransforms', function() {                                                                      // 2325\n    // Android < 3.0 is buggy, so we sniff and blacklist                                                               // 2326\n    // http://git.io/hHzL7w                                                                                            // 2327\n    return navigator.userAgent.indexOf('Android 2.') === -1 &&                                                         // 2328\n           testAllProps('transform', 'scale(1)', true);                                                                // 2329\n  });                                                                                                                  // 2330\n                                                                                                                       // 2331\n/*!                                                                                                                    // 2332\n{                                                                                                                      // 2333\n  \"name\": \"CSS Transforms 3D\",                                                                                         // 2334\n  \"property\": \"csstransforms3d\",                                                                                       // 2335\n  \"caniuse\": \"transforms3d\",                                                                                           // 2336\n  \"tags\": [\"css\"],                                                                                                     // 2337\n  \"warnings\": [                                                                                                        // 2338\n    \"Chrome may occassionally fail this test on some systems; more info: https://code.google.com/p/chromium/issues/detail?id=129004\"\n  ]                                                                                                                    // 2340\n}                                                                                                                      // 2341\n!*/                                                                                                                    // 2342\n                                                                                                                       // 2343\n  Modernizr.addTest('csstransforms3d', function() {                                                                    // 2344\n    var ret = !!testAllProps('perspective', '1px', true);                                                              // 2345\n    var usePrefix = Modernizr._config.usePrefixes;                                                                     // 2346\n                                                                                                                       // 2347\n    // Webkit's 3D transforms are passed off to the browser's own graphics renderer.                                   // 2348\n    //   It works fine in Safari on Leopard and Snow Leopard, but not in Chrome in                                     // 2349\n    //   some conditions. As a result, Webkit typically recognizes the syntax but                                      // 2350\n    //   will sometimes throw a false positive, thus we must do a more thorough check:                                 // 2351\n    if ( ret && (!usePrefix || 'webkitPerspective' in docElement.style )) {                                            // 2352\n      var mq;                                                                                                          // 2353\n      // Use CSS Conditional Rules if available                                                                        // 2354\n      if (Modernizr.supports) {                                                                                        // 2355\n        mq = '@supports (perspective: 1px)';                                                                           // 2356\n      } else {                                                                                                         // 2357\n        // Otherwise, Webkit allows this media query to succeed only if the feature is enabled.                        // 2358\n        // `@media (transform-3d),(-webkit-transform-3d){ ... }`                                                       // 2359\n        mq = '@media (transform-3d)';                                                                                  // 2360\n        if (usePrefix ) mq += ',(-webkit-transform-3d)';                                                               // 2361\n      }                                                                                                                // 2362\n      // If loaded inside the body tag and the test element inherits any padding, margin or borders it will fail #740  // 2363\n      mq += '{#modernizr{left:9px;position:absolute;height:5px;margin:0;padding:0;border:0}}';                         // 2364\n                                                                                                                       // 2365\n      testStyles(mq, function( elem ) {                                                                                // 2366\n        ret = elem.offsetLeft === 9 && elem.offsetHeight === 5;                                                        // 2367\n      });                                                                                                              // 2368\n    }                                                                                                                  // 2369\n                                                                                                                       // 2370\n    return ret;                                                                                                        // 2371\n  });                                                                                                                  // 2372\n                                                                                                                       // 2373\n/*!                                                                                                                    // 2374\n{                                                                                                                      // 2375\n  \"name\": \"CSS Transitions\",                                                                                           // 2376\n  \"property\": \"csstransitions\",                                                                                        // 2377\n  \"caniuse\": \"css-transitions\",                                                                                        // 2378\n  \"tags\": [\"css\"]                                                                                                      // 2379\n}                                                                                                                      // 2380\n!*/                                                                                                                    // 2381\n                                                                                                                       // 2382\n  Modernizr.addTest('csstransitions', testAllProps('transition', 'all', true));                                        // 2383\n                                                                                                                       // 2384\n/*!                                                                                                                    // 2385\n{                                                                                                                      // 2386\n  \"name\": \"Flexbox\",                                                                                                   // 2387\n  \"property\": \"flexbox\",                                                                                               // 2388\n  \"caniuse\": \"flexbox\",                                                                                                // 2389\n  \"tags\": [\"css\"],                                                                                                     // 2390\n  \"notes\": [{                                                                                                          // 2391\n    \"name\": \"The _new_ flexbox\",                                                                                       // 2392\n    \"href\": \"http://dev.w3.org/csswg/css3-flexbox\"                                                                     // 2393\n  }],                                                                                                                  // 2394\n  \"warnings\": [                                                                                                        // 2395\n    \"A `true` result for this detect does not imply that the `flex-wrap` property is supported; see the `flexwrap` detect.\"\n  ]                                                                                                                    // 2397\n}                                                                                                                      // 2398\n!*/                                                                                                                    // 2399\n/* DOC                                                                                                                 // 2400\nDetects support for the Flexible Box Layout model, a.k.a. Flexbox, which allows easy manipulation of layout order and sizing within a container.\n*/                                                                                                                     // 2402\n                                                                                                                       // 2403\n  Modernizr.addTest('flexbox', testAllProps('flexBasis', '1px', true));                                                // 2404\n                                                                                                                       // 2405\n/*!                                                                                                                    // 2406\n{                                                                                                                      // 2407\n  \"name\": \"Flexbox (legacy)\",                                                                                          // 2408\n  \"property\": \"flexboxlegacy\",                                                                                         // 2409\n  \"tags\": [\"css\"],                                                                                                     // 2410\n  \"polyfills\": [\"flexie\"],                                                                                             // 2411\n  \"notes\": [{                                                                                                          // 2412\n    \"name\": \"The _old_ flexbox\",                                                                                       // 2413\n    \"href\": \"http://www.w3.org/TR/2009/WD-css3-flexbox-20090723/\"                                                      // 2414\n  }]                                                                                                                   // 2415\n}                                                                                                                      // 2416\n!*/                                                                                                                    // 2417\n                                                                                                                       // 2418\n  Modernizr.addTest('flexboxlegacy', testAllProps('boxDirection', 'reverse', true));                                   // 2419\n                                                                                                                       // 2420\n                                                                                                                       // 2421\n  // Run each test                                                                                                     // 2422\n  testRunner();                                                                                                        // 2423\n                                                                                                                       // 2424\n  // Remove the \"no-js\" class if it exists                                                                             // 2425\n  setClasses(classes);                                                                                                 // 2426\n                                                                                                                       // 2427\n  delete ModernizrProto.addTest;                                                                                       // 2428\n  delete ModernizrProto.addAsyncTest;                                                                                  // 2429\n                                                                                                                       // 2430\n  // Run the things that are supposed to run after the tests                                                           // 2431\n  for (var i = 0; i < Modernizr._q.length; i++) {                                                                      // 2432\n    Modernizr._q[i]();                                                                                                 // 2433\n  }                                                                                                                    // 2434\n                                                                                                                       // 2435\n  // Leak Modernizr namespace                                                                                          // 2436\n  window.Modernizr = Modernizr;                                                                                        // 2437\n                                                                                                                       // 2438\n                                                                                                                       // 2439\n                                                                                                                       // 2440\n})(window, document);                                                                                                  // 2441\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 2451\n}).call(this);                                                       // 2452\n                                                                     // 2453\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['cwaring:modernizr'] = {};\n\n})();\n","servePath":"/packages/cwaring_modernizr.js","sourceMap":{"version":3,"sources":["/packages/cwaring_modernizr/packages/cwaring_modernizr.js"],"names":[],"mappingsfile":"/packages/cwaring_modernizr.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cwaring:modernizr/modernizr-dev.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*!                                                                                                                    // 1\n * modernizr v3.0.0pre                                                                                                 // 2\n * Build http://v3.modernizr.com/download/#-applicationcache-audio-backgroundsize-borderimage-borderradius-boxshadow-canvas-canvastext-cssanimations-csscolumns-cssgradients-cssreflections-csstransforms-csstransforms3d-csstransitions-draganddrop-flexbox-flexboxlegacy-fontface-generatedcontent-geolocation-hashchange-history-hsla-indexeddb-inlinesvg-input-inputtypes-localstorage-multiplebgs-opacity-postmessage-rgba-sessionstorage-smil-svg-svgclippaths-textshadow-video-webgl-websockets-websqldatabase-webworkers-addtest-cssclasses-domprefixes-hasevent-prefixed-prefixes-shiv-testallprops-testprop-teststyles\n *                                                                                                                     // 4\n * Copyright (c)                                                                                                       // 5\n *  Faruk Ates                                                                                                         // 6\n *  Paul Irish                                                                                                         // 7\n *  Alex Sexton                                                                                                        // 8\n *  Ryan Seddon                                                                                                        // 9\n *  Alexander Farkas                                                                                                   // 10\n *  Patrick Kettner                                                                                                    // 11\n *  Stu Cox                                                                                                            // 12\n *  Richard Herrera                                                                                                    // 13\n                                                                                                                       // 14\n * MIT License                                                                                                         // 15\n */                                                                                                                    // 16\n                                                                                                                       // 17\n/*                                                                                                                     // 18\n * Modernizr tests which native CSS3 and HTML5 features are available in the                                           // 19\n * current UA and makes the results available to you in two ways: as properties on                                     // 20\n * a global `Modernizr` object, and as classes on the `<html>` element. This                                           // 21\n * information allows you to progressively enhance your pages with a granular level                                    // 22\n * of control over the experience.                                                                                     // 23\n*/                                                                                                                     // 24\n                                                                                                                       // 25\n;(function(window, document, undefined){                                                                               // 26\n                                                                                                                       // 27\n  var classes = [];                                                                                                    // 28\n                                                                                                                       // 29\n                                                                                                                       // 30\n  // Take the html5 variable out of the                                                                                // 31\n  // html5shiv scope so we can return it.                                                                              // 32\n  var html5;                                                                                                           // 33\n  /**                                                                                                                  // 34\n  * @preserve HTML5 Shiv 3.7.2 | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed                                  // 35\n  */                                                                                                                   // 36\n  ;(function(window, document) {                                                                                       // 37\n  /*jshint evil:true */                                                                                                // 38\n    /** version */                                                                                                     // 39\n    var version = '3.7.2';                                                                                             // 40\n                                                                                                                       // 41\n    /** Preset options */                                                                                              // 42\n    var options = window.html5 || {};                                                                                  // 43\n                                                                                                                       // 44\n    /** Used to skip problem elements */                                                                               // 45\n    var reSkip = /^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i;                                 // 46\n                                                                                                                       // 47\n    /** Not all elements can be cloned in IE **/                                                                       // 48\n    var saveClones = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i;\n                                                                                                                       // 50\n    /** Detect whether the browser supports default html5 styles */                                                    // 51\n    var supportsHtml5Styles;                                                                                           // 52\n                                                                                                                       // 53\n    /** Name of the expando, to work with multiple documents or to re-shiv one document */                             // 54\n    var expando = '_html5shiv';                                                                                        // 55\n                                                                                                                       // 56\n    /** The id for the the documents expando */                                                                        // 57\n    var expanID = 0;                                                                                                   // 58\n                                                                                                                       // 59\n    /** Cached data for each document */                                                                               // 60\n    var expandoData = {};                                                                                              // 61\n                                                                                                                       // 62\n    /** Detect whether the browser supports unknown elements */                                                        // 63\n    var supportsUnknownElements;                                                                                       // 64\n                                                                                                                       // 65\n    (function() {                                                                                                      // 66\n      try {                                                                                                            // 67\n          var a = document.createElement('a');                                                                         // 68\n          a.innerHTML = '<xyz></xyz>';                                                                                 // 69\n          //if the hidden property is implemented we can assume, that the browser supports basic HTML5 Styles          // 70\n          supportsHtml5Styles = ('hidden' in a);                                                                       // 71\n                                                                                                                       // 72\n          supportsUnknownElements = a.childNodes.length == 1 || (function() {                                          // 73\n            // assign a false positive if unable to shiv                                                               // 74\n            (document.createElement)('a');                                                                             // 75\n            var frag = document.createDocumentFragment();                                                              // 76\n            return (                                                                                                   // 77\n              typeof frag.cloneNode == 'undefined' ||                                                                  // 78\n              typeof frag.createDocumentFragment == 'undefined' ||                                                     // 79\n              typeof frag.createElement == 'undefined'                                                                 // 80\n            );                                                                                                         // 81\n          }());                                                                                                        // 82\n      } catch(e) {                                                                                                     // 83\n        // assign a false positive if detection fails => unable to shiv                                                // 84\n        supportsHtml5Styles = true;                                                                                    // 85\n        supportsUnknownElements = true;                                                                                // 86\n      }                                                                                                                // 87\n                                                                                                                       // 88\n    }());                                                                                                              // 89\n                                                                                                                       // 90\n    /*--------------------------------------------------------------------------*/                                     // 91\n                                                                                                                       // 92\n    /**                                                                                                                // 93\n     * Creates a style sheet with the given CSS text and adds it to the document.                                      // 94\n     * @private                                                                                                        // 95\n     * @param {Document} ownerDocument The document.                                                                   // 96\n     * @param {String} cssText The CSS text.                                                                           // 97\n     * @returns {StyleSheet} The style element.                                                                        // 98\n     */                                                                                                                // 99\n    function addStyleSheet(ownerDocument, cssText) {                                                                   // 100\n      var p = ownerDocument.createElement('p'),                                                                        // 101\n          parent = ownerDocument.getElementsByTagName('head')[0] || ownerDocument.documentElement;                     // 102\n                                                                                                                       // 103\n      p.innerHTML = 'x<style>' + cssText + '</style>';                                                                 // 104\n      return parent.insertBefore(p.lastChild, parent.firstChild);                                                      // 105\n    }                                                                                                                  // 106\n                                                                                                                       // 107\n    /**                                                                                                                // 108\n     * Returns the value of `html5.elements` as an array.                                                              // 109\n     * @private                                                                                                        // 110\n     * @returns {Array} An array of shived element node names.                                                         // 111\n     */                                                                                                                // 112\n    function getElements() {                                                                                           // 113\n      var elements = html5.elements;                                                                                   // 114\n      return typeof elements == 'string' ? elements.split(' ') : elements;                                             // 115\n    }                                                                                                                  // 116\n                                                                                                                       // 117\n    /**                                                                                                                // 118\n     * Extends the built-in list of html5 elements                                                                     // 119\n     * @memberOf html5                                                                                                 // 120\n     * @param {String|Array} newElements whitespace separated list or array of new element names to shiv               // 121\n     * @param {Document} ownerDocument The context document.                                                           // 122\n     */                                                                                                                // 123\n    function addElements(newElements, ownerDocument) {                                                                 // 124\n      var elements = html5.elements;                                                                                   // 125\n      if(typeof elements != 'string'){                                                                                 // 126\n        elements = elements.join(' ');                                                                                 // 127\n      }                                                                                                                // 128\n      if(typeof newElements != 'string'){                                                                              // 129\n        newElements = newElements.join(' ');                                                                           // 130\n      }                                                                                                                // 131\n      html5.elements = elements +' '+ newElements;                                                                     // 132\n      shivDocument(ownerDocument);                                                                                     // 133\n    }                                                                                                                  // 134\n                                                                                                                       // 135\n     /**                                                                                                               // 136\n     * Returns the data associated to the given document                                                               // 137\n     * @private                                                                                                        // 138\n     * @param {Document} ownerDocument The document.                                                                   // 139\n     * @returns {Object} An object of data.                                                                            // 140\n     */                                                                                                                // 141\n    function getExpandoData(ownerDocument) {                                                                           // 142\n      var data = expandoData[ownerDocument[expando]];                                                                  // 143\n      if (!data) {                                                                                                     // 144\n          data = {};                                                                                                   // 145\n          expanID++;                                                                                                   // 146\n          ownerDocument[expando] = expanID;                                                                            // 147\n          expandoData[expanID] = data;                                                                                 // 148\n      }                                                                                                                // 149\n      return data;                                                                                                     // 150\n    }                                                                                                                  // 151\n                                                                                                                       // 152\n    /**                                                                                                                // 153\n     * returns a shived element for the given nodeName and document                                                    // 154\n     * @memberOf html5                                                                                                 // 155\n     * @param {String} nodeName name of the element                                                                    // 156\n     * @param {Document} ownerDocument The context document.                                                           // 157\n     * @returns {Object} The shived element.                                                                           // 158\n     */                                                                                                                // 159\n    function createElement(nodeName, ownerDocument, data){                                                             // 160\n      if (!ownerDocument) {                                                                                            // 161\n          ownerDocument = document;                                                                                    // 162\n      }                                                                                                                // 163\n      if(supportsUnknownElements){                                                                                     // 164\n          return ownerDocument.createElement(nodeName);                                                                // 165\n      }                                                                                                                // 166\n      if (!data) {                                                                                                     // 167\n          data = getExpandoData(ownerDocument);                                                                        // 168\n      }                                                                                                                // 169\n      var node;                                                                                                        // 170\n                                                                                                                       // 171\n      if (data.cache[nodeName]) {                                                                                      // 172\n          node = data.cache[nodeName].cloneNode();                                                                     // 173\n      } else if (saveClones.test(nodeName)) {                                                                          // 174\n          node = (data.cache[nodeName] = data.createElem(nodeName)).cloneNode();                                       // 175\n      } else {                                                                                                         // 176\n          node = data.createElem(nodeName);                                                                            // 177\n      }                                                                                                                // 178\n                                                                                                                       // 179\n      // Avoid adding some elements to fragments in IE < 9 because                                                     // 180\n      // * Attributes like `name` or `type` cannot be set/changed once an element                                      // 181\n      //   is inserted into a document/fragment                                                                        // 182\n      // * Link elements with `src` attributes that are inaccessible, as with                                          // 183\n      //   a 403 response, will cause the tab/window to crash                                                          // 184\n      // * Script elements appended to fragments will execute when their `src`                                         // 185\n      //   or `text` property is set                                                                                   // 186\n      return node.canHaveChildren && !reSkip.test(nodeName) && !node.tagUrn ? data.frag.appendChild(node) : node;      // 187\n    }                                                                                                                  // 188\n                                                                                                                       // 189\n    /**                                                                                                                // 190\n     * returns a shived DocumentFragment for the given document                                                        // 191\n     * @memberOf html5                                                                                                 // 192\n     * @param {Document} ownerDocument The context document.                                                           // 193\n     * @returns {Object} The shived DocumentFragment.                                                                  // 194\n     */                                                                                                                // 195\n    function createDocumentFragment(ownerDocument, data){                                                              // 196\n      if (!ownerDocument) {                                                                                            // 197\n          ownerDocument = document;                                                                                    // 198\n      }                                                                                                                // 199\n      if(supportsUnknownElements){                                                                                     // 200\n          return ownerDocument.createDocumentFragment();                                                               // 201\n      }                                                                                                                // 202\n      data = data || getExpandoData(ownerDocument);                                                                    // 203\n      var clone = data.frag.cloneNode(),                                                                               // 204\n          i = 0,                                                                                                       // 205\n          elems = getElements(),                                                                                       // 206\n          l = elems.length;                                                                                            // 207\n      for(;i<l;i++){                                                                                                   // 208\n          clone.createElement(elems[i]);                                                                               // 209\n      }                                                                                                                // 210\n      return clone;                                                                                                    // 211\n    }                                                                                                                  // 212\n                                                                                                                       // 213\n    /**                                                                                                                // 214\n     * Shivs the `createElement` and `createDocumentFragment` methods of the document.                                 // 215\n     * @private                                                                                                        // 216\n     * @param {Document|DocumentFragment} ownerDocument The document.                                                  // 217\n     * @param {Object} data of the document.                                                                           // 218\n     */                                                                                                                // 219\n    function shivMethods(ownerDocument, data) {                                                                        // 220\n      if (!data.cache) {                                                                                               // 221\n          data.cache = {};                                                                                             // 222\n          data.createElem = ownerDocument.createElement;                                                               // 223\n          data.createFrag = ownerDocument.createDocumentFragment;                                                      // 224\n          data.frag = data.createFrag();                                                                               // 225\n      }                                                                                                                // 226\n                                                                                                                       // 227\n                                                                                                                       // 228\n      ownerDocument.createElement = function(nodeName) {                                                               // 229\n        //abort shiv                                                                                                   // 230\n        if (!html5.shivMethods) {                                                                                      // 231\n            return data.createElem(nodeName);                                                                          // 232\n        }                                                                                                              // 233\n        return createElement(nodeName, ownerDocument, data);                                                           // 234\n      };                                                                                                               // 235\n                                                                                                                       // 236\n      ownerDocument.createDocumentFragment = Function('h,f', 'return function(){' +                                    // 237\n        'var n=f.cloneNode(),c=n.createElement;' +                                                                     // 238\n        'h.shivMethods&&(' +                                                                                           // 239\n          // unroll the `createElement` calls                                                                          // 240\n          getElements().join().replace(/[\\w\\-:]+/g, function(nodeName) {                                               // 241\n            data.createElem(nodeName);                                                                                 // 242\n            data.frag.createElement(nodeName);                                                                         // 243\n            return 'c(\"' + nodeName + '\")';                                                                            // 244\n          }) +                                                                                                         // 245\n        ');return n}'                                                                                                  // 246\n      )(html5, data.frag);                                                                                             // 247\n    }                                                                                                                  // 248\n                                                                                                                       // 249\n    /*--------------------------------------------------------------------------*/                                     // 250\n                                                                                                                       // 251\n    /**                                                                                                                // 252\n     * Shivs the given document.                                                                                       // 253\n     * @memberOf html5                                                                                                 // 254\n     * @param {Document} ownerDocument The document to shiv.                                                           // 255\n     * @returns {Document} The shived document.                                                                        // 256\n     */                                                                                                                // 257\n    function shivDocument(ownerDocument) {                                                                             // 258\n      if (!ownerDocument) {                                                                                            // 259\n          ownerDocument = document;                                                                                    // 260\n      }                                                                                                                // 261\n      var data = getExpandoData(ownerDocument);                                                                        // 262\n                                                                                                                       // 263\n      if (html5.shivCSS && !supportsHtml5Styles && !data.hasCSS) {                                                     // 264\n        data.hasCSS = !!addStyleSheet(ownerDocument,                                                                   // 265\n          // corrects block display not defined in IE6/7/8/9                                                           // 266\n          'article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}' +              // 267\n          // adds styling not present in IE6/7/8/9                                                                     // 268\n          'mark{background:#FF0;color:#000}' +                                                                         // 269\n          // hides non-rendered elements                                                                               // 270\n          'template{display:none}'                                                                                     // 271\n        );                                                                                                             // 272\n      }                                                                                                                // 273\n      if (!supportsUnknownElements) {                                                                                  // 274\n        shivMethods(ownerDocument, data);                                                                              // 275\n      }                                                                                                                // 276\n      return ownerDocument;                                                                                            // 277\n    }                                                                                                                  // 278\n                                                                                                                       // 279\n    /*--------------------------------------------------------------------------*/                                     // 280\n                                                                                                                       // 281\n    /**                                                                                                                // 282\n     * The `html5` object is exposed so that more elements can be shived and                                           // 283\n     * existing shiving can be detected on iframes.                                                                    // 284\n     * @type Object                                                                                                    // 285\n     * @example                                                                                                        // 286\n     *                                                                                                                 // 287\n     * // options can be changed before the script is included                                                         // 288\n     * html5 = { 'elements': 'mark section', 'shivCSS': false, 'shivMethods': false };                                 // 289\n     */                                                                                                                // 290\n    var html5 = {                                                                                                      // 291\n                                                                                                                       // 292\n      /**                                                                                                              // 293\n       * An array or space separated string of node names of the elements to shiv.                                     // 294\n       * @memberOf html5                                                                                               // 295\n       * @type Array|String                                                                                            // 296\n       */                                                                                                              // 297\n      'elements': options.elements || 'abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output picture progress section summary template time video',\n                                                                                                                       // 299\n      /**                                                                                                              // 300\n       * current version of html5shiv                                                                                  // 301\n       */                                                                                                              // 302\n      'version': version,                                                                                              // 303\n                                                                                                                       // 304\n      /**                                                                                                              // 305\n       * A flag to indicate that the HTML5 style sheet should be inserted.                                             // 306\n       * @memberOf html5                                                                                               // 307\n       * @type Boolean                                                                                                 // 308\n       */                                                                                                              // 309\n      'shivCSS': (options.shivCSS !== false),                                                                          // 310\n                                                                                                                       // 311\n      /**                                                                                                              // 312\n       * Is equal to true if a browser supports creating unknown/HTML5 elements                                        // 313\n       * @memberOf html5                                                                                               // 314\n       * @type boolean                                                                                                 // 315\n       */                                                                                                              // 316\n      'supportsUnknownElements': supportsUnknownElements,                                                              // 317\n                                                                                                                       // 318\n      /**                                                                                                              // 319\n       * A flag to indicate that the document's `createElement` and `createDocumentFragment`                           // 320\n       * methods should be overwritten.                                                                                // 321\n       * @memberOf html5                                                                                               // 322\n       * @type Boolean                                                                                                 // 323\n       */                                                                                                              // 324\n      'shivMethods': (options.shivMethods !== false),                                                                  // 325\n                                                                                                                       // 326\n      /**                                                                                                              // 327\n       * A string to describe the type of `html5` object (\"default\" or \"default print\").                               // 328\n       * @memberOf html5                                                                                               // 329\n       * @type String                                                                                                  // 330\n       */                                                                                                              // 331\n      'type': 'default',                                                                                               // 332\n                                                                                                                       // 333\n      // shivs the document according to the specified `html5` object options                                          // 334\n      'shivDocument': shivDocument,                                                                                    // 335\n                                                                                                                       // 336\n      //creates a shived element                                                                                       // 337\n      createElement: createElement,                                                                                    // 338\n                                                                                                                       // 339\n      //creates a shived documentFragment                                                                              // 340\n      createDocumentFragment: createDocumentFragment,                                                                  // 341\n                                                                                                                       // 342\n      //extends list of elements                                                                                       // 343\n      addElements: addElements                                                                                         // 344\n    };                                                                                                                 // 345\n                                                                                                                       // 346\n    /*--------------------------------------------------------------------------*/                                     // 347\n                                                                                                                       // 348\n    // expose html5                                                                                                    // 349\n    window.html5 = html5;                                                                                              // 350\n                                                                                                                       // 351\n    // shiv the document                                                                                               // 352\n    shivDocument(document);                                                                                            // 353\n                                                                                                                       // 354\n  }(this, document));                                                                                                  // 355\n                                                                                                                       // 356\n                                                                                                                       // 357\n  var tests = [];                                                                                                      // 358\n                                                                                                                       // 359\n                                                                                                                       // 360\n  var ModernizrProto = {                                                                                               // 361\n    // The current version, dummy                                                                                      // 362\n    _version: 'v3.0.0pre',                                                                                             // 363\n                                                                                                                       // 364\n    // Any settings that don't work as separate modules                                                                // 365\n    // can go in here as configuration.                                                                                // 366\n    _config: {                                                                                                         // 367\n      classPrefix : '',                                                                                                // 368\n      enableClasses : true,                                                                                            // 369\n      enableJSClass : true,                                                                                            // 370\n      usePrefixes : true                                                                                               // 371\n    },                                                                                                                 // 372\n                                                                                                                       // 373\n    // Queue of tests                                                                                                  // 374\n    _q: [],                                                                                                            // 375\n                                                                                                                       // 376\n    // Stub these for people who are listening                                                                         // 377\n    on: function( test, cb ) {                                                                                         // 378\n      // I don't really think people should do this, but we can                                                        // 379\n      // safe guard it a bit.                                                                                          // 380\n      // -- NOTE:: this gets WAY overridden in src/addTest for                                                         // 381\n      // actual async tests. This is in case people listen to                                                          // 382\n      // synchronous tests. I would leave it out, but the code                                                         // 383\n      // to *disallow* sync tests in the real version of this                                                          // 384\n      // function is actually larger than this.                                                                        // 385\n      var self = this;                                                                                                 // 386\n      setTimeout(function() {                                                                                          // 387\n        cb(self[test]);                                                                                                // 388\n      }, 0);                                                                                                           // 389\n    },                                                                                                                 // 390\n                                                                                                                       // 391\n    addTest: function( name, fn, options ) {                                                                           // 392\n      tests.push({name : name, fn : fn, options : options });                                                          // 393\n    },                                                                                                                 // 394\n                                                                                                                       // 395\n    addAsyncTest: function (fn) {                                                                                      // 396\n      tests.push({name : null, fn : fn});                                                                              // 397\n    }                                                                                                                  // 398\n  };                                                                                                                   // 399\n                                                                                                                       // 400\n                                                                                                                       // 401\n                                                                                                                       // 402\n  // Fake some of Object.create                                                                                        // 403\n  // so we can force non test results                                                                                  // 404\n  // to be non \"own\" properties.                                                                                       // 405\n  var Modernizr = function(){};                                                                                        // 406\n  Modernizr.prototype = ModernizrProto;                                                                                // 407\n                                                                                                                       // 408\n  // Leak modernizr globally when you `require` it                                                                     // 409\n  // rather than force it here.                                                                                        // 410\n  // Overwrite name so constructor name is nicer :D                                                                    // 411\n  Modernizr = new Modernizr();                                                                                         // 412\n                                                                                                                       // 413\n                                                                                                                       // 414\n/*!                                                                                                                    // 415\n{                                                                                                                      // 416\n  \"name\": \"Application Cache\",                                                                                         // 417\n  \"property\": \"applicationcache\",                                                                                      // 418\n  \"caniuse\": \"offline-apps\",                                                                                           // 419\n  \"tags\": [\"storage\", \"offline\"],                                                                                      // 420\n  \"notes\": [{                                                                                                          // 421\n    \"name\": \"MDN documentation\",                                                                                       // 422\n    \"href\": \"https://developer.mozilla.org/en/docs/HTML/Using_the_application_cache\"                                   // 423\n  }],                                                                                                                  // 424\n  \"polyfills\": [\"html5gears\"]                                                                                          // 425\n}                                                                                                                      // 426\n!*/                                                                                                                    // 427\n/* DOC                                                                                                                 // 428\nDetects support for the Application Cache, for storing data to enable web-based applications run offline.              // 429\n                                                                                                                       // 430\nThe API has been [heavily criticized](http://alistapart.com/article/application-cache-is-a-douchebag) and discussions are underway to address this.\n*/                                                                                                                     // 432\n                                                                                                                       // 433\n  Modernizr.addTest('applicationcache', 'applicationCache' in window);                                                 // 434\n                                                                                                                       // 435\n/*!                                                                                                                    // 436\n{                                                                                                                      // 437\n  \"name\": \"Geolocation API\",                                                                                           // 438\n  \"property\": \"geolocation\",                                                                                           // 439\n  \"caniuse\": \"geolocation\",                                                                                            // 440\n  \"tags\": [\"media\"],                                                                                                   // 441\n  \"notes\": [{                                                                                                          // 442\n    \"name\": \"MDN documentation\",                                                                                       // 443\n    \"href\": \"https://developer.mozilla.org/en-US/docs/WebAPI/Using_geolocation\"                                        // 444\n  }],                                                                                                                  // 445\n  \"polyfills\": [                                                                                                       // 446\n    \"joshuabell-polyfill\",                                                                                             // 447\n    \"webshims\",                                                                                                        // 448\n    \"geolocationshim\",                                                                                                 // 449\n    \"geo-location-javascript\",                                                                                         // 450\n    \"geolocation-api-polyfill\"                                                                                         // 451\n  ]                                                                                                                    // 452\n}                                                                                                                      // 453\n!*/                                                                                                                    // 454\n/* DOC                                                                                                                 // 455\nDetects support for the Geolocation API for users to provide their location to web applications.                       // 456\n*/                                                                                                                     // 457\n                                                                                                                       // 458\n  // geolocation is often considered a trivial feature detect...                                                       // 459\n  // Turns out, it's quite tricky to get right:                                                                        // 460\n  //                                                                                                                   // 461\n  // Using !!navigator.geolocation does two things we don't want. It:                                                  // 462\n  //   1. Leaks memory in IE9: github.com/Modernizr/Modernizr/issues/513                                               // 463\n  //   2. Disables page caching in WebKit: webk.it/43956                                                               // 464\n  //                                                                                                                   // 465\n  // Meanwhile, in Firefox < 8, an about:config setting could expose                                                   // 466\n  // a false positive that would throw an exception: bugzil.la/688158                                                  // 467\n                                                                                                                       // 468\n  Modernizr.addTest('geolocation', 'geolocation' in navigator);                                                        // 469\n                                                                                                                       // 470\n/*!                                                                                                                    // 471\n{                                                                                                                      // 472\n  \"name\": \"History API\",                                                                                               // 473\n  \"property\": \"history\",                                                                                               // 474\n  \"caniuse\": \"history\",                                                                                                // 475\n  \"tags\": [\"history\"],                                                                                                 // 476\n  \"authors\": [\"Hay Kranen\", \"Alexander Farkas\"],                                                                       // 477\n  \"notes\": [{                                                                                                          // 478\n    \"name\": \"W3C Spec\",                                                                                                // 479\n    \"href\": \"http://www.w3.org/TR/html51/browsers.html#the-history-interface\"                                          // 480\n  }, {                                                                                                                 // 481\n    \"name\": \"MDN documentation\",                                                                                       // 482\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/window.history\"                                          // 483\n  }],                                                                                                                  // 484\n  \"polyfills\": [\"historyjs\", \"html5historyapi\"]                                                                        // 485\n}                                                                                                                      // 486\n!*/                                                                                                                    // 487\n/* DOC                                                                                                                 // 488\nDetects support for the History API for manipulating the browser session history.                                      // 489\n*/                                                                                                                     // 490\n                                                                                                                       // 491\n  Modernizr.addTest('history', function() {                                                                            // 492\n    // Issue #733                                                                                                      // 493\n    // The stock browser on Android 2.2 & 2.3, and 4.0.x returns positive on history support                           // 494\n    // Unfortunately support is really buggy and there is no clean way to detect                                       // 495\n    // these bugs, so we fall back to a user agent sniff :(                                                            // 496\n    var ua = navigator.userAgent;                                                                                      // 497\n                                                                                                                       // 498\n    // We only want Android 2 and 4.0, stock browser, and not Chrome which identifies                                  // 499\n    // itself as 'Mobile Safari' as well, nor Windows Phone (issue #1471).                                             // 500\n    if ((ua.indexOf('Android 2.') !== -1 ||                                                                            // 501\n        (ua.indexOf('Android 4.0') !== -1)) &&                                                                         // 502\n        ua.indexOf('Mobile Safari') !== -1 &&                                                                          // 503\n        ua.indexOf('Chrome') === -1 &&                                                                                 // 504\n        ua.indexOf('Windows Phone') === -1) {                                                                          // 505\n      return false;                                                                                                    // 506\n    }                                                                                                                  // 507\n                                                                                                                       // 508\n    // Return the regular check                                                                                        // 509\n    return (window.history && 'pushState' in window.history);                                                          // 510\n  });                                                                                                                  // 511\n                                                                                                                       // 512\n/*!                                                                                                                    // 513\n{                                                                                                                      // 514\n  \"name\": \"Local Storage\",                                                                                             // 515\n  \"property\": \"localstorage\",                                                                                          // 516\n  \"caniuse\": \"namevalue-storage\",                                                                                      // 517\n  \"tags\": [\"storage\"],                                                                                                 // 518\n  \"knownBugs\": [],                                                                                                     // 519\n  \"notes\": [],                                                                                                         // 520\n  \"warnings\": [],                                                                                                      // 521\n  \"polyfills\": [                                                                                                       // 522\n    \"joshuabell-polyfill\",                                                                                             // 523\n    \"cupcake\",                                                                                                         // 524\n    \"storagepolyfill\",                                                                                                 // 525\n    \"amplifyjs\",                                                                                                       // 526\n    \"yui-cacheoffline\",                                                                                                // 527\n    \"textstorage\"                                                                                                      // 528\n  ]                                                                                                                    // 529\n}                                                                                                                      // 530\n!*/                                                                                                                    // 531\n                                                                                                                       // 532\n  // In FF4, if disabled, window.localStorage should === null.                                                         // 533\n                                                                                                                       // 534\n  // Normally, we could not test that directly and need to do a                                                        // 535\n  //   `('localStorage' in window) && ` test first because otherwise Firefox will                                      // 536\n  //   throw bugzil.la/365772 if cookies are disabled                                                                  // 537\n                                                                                                                       // 538\n  // Also in iOS5 Private Browsing mode, attempting to use localStorage.setItem                                        // 539\n  // will throw the exception:                                                                                         // 540\n  //   QUOTA_EXCEEDED_ERRROR DOM Exception 22.                                                                         // 541\n  // Peculiarly, getItem and removeItem calls do not throw.                                                            // 542\n                                                                                                                       // 543\n  // Because we are forced to try/catch this, we'll go aggressive.                                                     // 544\n                                                                                                                       // 545\n  // Just FWIW: IE8 Compat mode supports these features completely:                                                    // 546\n  //   www.quirksmode.org/dom/html5.html                                                                               // 547\n  // But IE8 doesn't support either with local files                                                                   // 548\n                                                                                                                       // 549\n  Modernizr.addTest('localstorage', function() {                                                                       // 550\n    var mod = 'modernizr';                                                                                             // 551\n    try {                                                                                                              // 552\n      localStorage.setItem(mod, mod);                                                                                  // 553\n      localStorage.removeItem(mod);                                                                                    // 554\n      return true;                                                                                                     // 555\n    } catch(e) {                                                                                                       // 556\n      return false;                                                                                                    // 557\n    }                                                                                                                  // 558\n  });                                                                                                                  // 559\n                                                                                                                       // 560\n/*!                                                                                                                    // 561\n{                                                                                                                      // 562\n  \"name\": \"postMessage\",                                                                                               // 563\n  \"property\": \"postmessage\",                                                                                           // 564\n  \"caniuse\": \"x-doc-messaging\",                                                                                        // 565\n  \"notes\": [{                                                                                                          // 566\n    \"name\": \"W3C Spec\",                                                                                                // 567\n    \"href\": \"http://www.w3.org/TR/html5/comms.html#posting-messages\"                                                   // 568\n  }],                                                                                                                  // 569\n  \"polyfills\": [\"easyxdm\", \"postmessage-jquery\"]                                                                       // 570\n}                                                                                                                      // 571\n!*/                                                                                                                    // 572\n/* DOC                                                                                                                 // 573\nDetects support for the `window.postMessage` protocol for cross-document messaging.                                    // 574\n*/                                                                                                                     // 575\n                                                                                                                       // 576\n  Modernizr.addTest('postmessage', 'postMessage' in window);                                                           // 577\n                                                                                                                       // 578\n/*!                                                                                                                    // 579\n{                                                                                                                      // 580\n  \"name\": \"Session Storage\",                                                                                           // 581\n  \"property\": \"sessionstorage\",                                                                                        // 582\n  \"tags\": [\"storage\"],                                                                                                 // 583\n  \"polyfills\": [\"joshuabell-polyfill\", \"cupcake\", \"sessionstorage\"]                                                    // 584\n}                                                                                                                      // 585\n!*/                                                                                                                    // 586\n                                                                                                                       // 587\n  // Because we are forced to try/catch this, we'll go aggressive.                                                     // 588\n                                                                                                                       // 589\n  // Just FWIW: IE8 Compat mode supports these features completely:                                                    // 590\n  //   www.quirksmode.org/dom/html5.html                                                                               // 591\n  // But IE8 doesn't support either with local files                                                                   // 592\n  Modernizr.addTest('sessionstorage', function() {                                                                     // 593\n    var mod = 'modernizr';                                                                                             // 594\n    try {                                                                                                              // 595\n      sessionStorage.setItem(mod, mod);                                                                                // 596\n      sessionStorage.removeItem(mod);                                                                                  // 597\n      return true;                                                                                                     // 598\n    } catch(e) {                                                                                                       // 599\n      return false;                                                                                                    // 600\n    }                                                                                                                  // 601\n  });                                                                                                                  // 602\n                                                                                                                       // 603\n/*!                                                                                                                    // 604\n{                                                                                                                      // 605\n  \"name\": \"SVG\",                                                                                                       // 606\n  \"property\": \"svg\",                                                                                                   // 607\n  \"caniuse\": \"svg\",                                                                                                    // 608\n  \"tags\": [\"svg\"],                                                                                                     // 609\n  \"authors\": [\"Erik Dahlstrom\"],                                                                                       // 610\n  \"polyfills\": [                                                                                                       // 611\n    \"svgweb\",                                                                                                          // 612\n    \"raphael\",                                                                                                         // 613\n    \"amplesdk\",                                                                                                        // 614\n    \"canvg\",                                                                                                           // 615\n    \"svg-boilerplate\",                                                                                                 // 616\n    \"sie\",                                                                                                             // 617\n    \"dojogfx\",                                                                                                         // 618\n    \"fabricjs\"                                                                                                         // 619\n  ]                                                                                                                    // 620\n}                                                                                                                      // 621\n!*/                                                                                                                    // 622\n/* DOC                                                                                                                 // 623\nDetects support for SVG in `<embed>` or `<object>` elements.                                                           // 624\n*/                                                                                                                     // 625\n                                                                                                                       // 626\n  Modernizr.addTest('svg', !!document.createElementNS && !!document.createElementNS('http://www.w3.org/2000/svg', 'svg').createSVGRect);\n                                                                                                                       // 628\n/*!                                                                                                                    // 629\n{                                                                                                                      // 630\n  \"name\": \"Web SQL Database\",                                                                                          // 631\n  \"property\": \"websqldatabase\",                                                                                        // 632\n  \"caniuse\": \"sql-storage\",                                                                                            // 633\n  \"tags\": [\"storage\"]                                                                                                  // 634\n}                                                                                                                      // 635\n!*/                                                                                                                    // 636\n                                                                                                                       // 637\n  // Chrome incognito mode used to throw an exception when using openDatabase                                          // 638\n  // It doesn't anymore.                                                                                               // 639\n  Modernizr.addTest('websqldatabase', 'openDatabase' in window);                                                       // 640\n                                                                                                                       // 641\n/*!                                                                                                                    // 642\n{                                                                                                                      // 643\n  \"name\": \"Web Workers\",                                                                                               // 644\n  \"property\": \"webworkers\",                                                                                            // 645\n  \"caniuse\" : \"webworkers\",                                                                                            // 646\n  \"tags\": [\"performance\", \"workers\"],                                                                                  // 647\n  \"notes\": [{                                                                                                          // 648\n    \"name\": \"W3C Reference\",                                                                                           // 649\n    \"href\": \"http://www.w3.org/TR/workers/\"                                                                            // 650\n  }, {                                                                                                                 // 651\n    \"name\": \"HTML5 Rocks article\",                                                                                     // 652\n    \"href\": \"http://www.html5rocks.com/en/tutorials/workers/basics/\"                                                   // 653\n  }, {                                                                                                                 // 654\n    \"name\": \"MDN documentation\",                                                                                       // 655\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/Guide/Performance/Using_web_workers\"                         // 656\n  }],                                                                                                                  // 657\n  \"polyfills\": [\"fakeworker\", \"html5shims\"]                                                                            // 658\n}                                                                                                                      // 659\n!*/                                                                                                                    // 660\n/* DOC                                                                                                                 // 661\nDetects support for the basic `Worker` API from the Web Workers spec. Web Workers provide a simple means for web content to run scripts in background threads.\n*/                                                                                                                     // 663\n                                                                                                                       // 664\n  Modernizr.addTest('webworkers', 'Worker' in window);                                                                 // 665\n                                                                                                                       // 666\n/*!                                                                                                                    // 667\n{                                                                                                                      // 668\n  \"name\": \"WebSockets Support\",                                                                                        // 669\n  \"property\": \"websockets\",                                                                                            // 670\n  \"authors\": [\"Phread [fearphage]\", \"Mike Sherov [mikesherov]\", \"Burak Yigit Kaya [BYK]\"],                             // 671\n  \"caniuse\": \"websockets\",                                                                                             // 672\n  \"tags\": [\"html5\"],                                                                                                   // 673\n  \"warnings\": [                                                                                                        // 674\n    \"This test will reject any old version of WebSockets even if it is not prefixed such as in Safari 5.1\"             // 675\n  ],                                                                                                                   // 676\n  \"notes\": [{                                                                                                          // 677\n    \"name\": \"CLOSING State and Spec\",                                                                                  // 678\n    \"href\": \"http://www.w3.org/TR/websockets/#the-websocket-interface\"                                                 // 679\n  }],                                                                                                                  // 680\n  \"polyfills\": [                                                                                                       // 681\n    \"sockjs\",                                                                                                          // 682\n    \"socketio\",                                                                                                        // 683\n    \"kaazing-websocket-gateway\",                                                                                       // 684\n    \"websocketjs\",                                                                                                     // 685\n    \"atmosphere\",                                                                                                      // 686\n    \"graceful-websocket\",                                                                                              // 687\n    \"portal\",                                                                                                          // 688\n    \"datachannel\"                                                                                                      // 689\n  ]                                                                                                                    // 690\n}                                                                                                                      // 691\n!*/                                                                                                                    // 692\n                                                                                                                       // 693\n  Modernizr.addTest('websockets', 'WebSocket' in window && window.WebSocket.CLOSING === 2);                            // 694\n                                                                                                                       // 695\n                                                                                                                       // 696\n  // List of property values to set for css tests. See ticket #21                                                      // 697\n  var prefixes = (ModernizrProto._config.usePrefixes ? ' -webkit- -moz- -o- -ms- '.split(' ') : []);                   // 698\n                                                                                                                       // 699\n  // expose these for the plugin API. Look in the source for how to join() them against your input                     // 700\n  ModernizrProto._prefixes = prefixes;                                                                                 // 701\n                                                                                                                       // 702\n                                                                                                                       // 703\n                                                                                                                       // 704\n  /**                                                                                                                  // 705\n   * is returns a boolean for if typeof obj is exactly type.                                                           // 706\n   */                                                                                                                  // 707\n  function is( obj, type ) {                                                                                           // 708\n    return typeof obj === type;                                                                                        // 709\n  }                                                                                                                    // 710\n  ;                                                                                                                    // 711\n                                                                                                                       // 712\n  // Run through all tests and detect their support in the current UA.                                                 // 713\n  function testRunner() {                                                                                              // 714\n    var featureNames;                                                                                                  // 715\n    var feature;                                                                                                       // 716\n    var aliasIdx;                                                                                                      // 717\n    var result;                                                                                                        // 718\n    var nameIdx;                                                                                                       // 719\n    var featureName;                                                                                                   // 720\n    var featureNameSplit;                                                                                              // 721\n                                                                                                                       // 722\n    for ( var featureIdx in tests ) {                                                                                  // 723\n      featureNames = [];                                                                                               // 724\n      feature = tests[featureIdx];                                                                                     // 725\n      // run the test, throw the return value into the Modernizr,                                                      // 726\n      //   then based on that boolean, define an appropriate className                                                 // 727\n      //   and push it into an array of classes we'll join later.                                                      // 728\n      //                                                                                                               // 729\n      //   If there is no name, it's an 'async' test that is run,                                                      // 730\n      //   but not directly added to the object. That should                                                           // 731\n      //   be done with a post-run addTest call.                                                                       // 732\n      if ( feature.name ) {                                                                                            // 733\n        featureNames.push(feature.name.toLowerCase());                                                                 // 734\n                                                                                                                       // 735\n        if (feature.options && feature.options.aliases && feature.options.aliases.length) {                            // 736\n          // Add all the aliases into the names list                                                                   // 737\n          for (aliasIdx = 0; aliasIdx < feature.options.aliases.length; aliasIdx++) {                                  // 738\n            featureNames.push(feature.options.aliases[aliasIdx].toLowerCase());                                        // 739\n          }                                                                                                            // 740\n        }                                                                                                              // 741\n      }                                                                                                                // 742\n                                                                                                                       // 743\n      // Run the test, or use the raw value if it's not a function                                                     // 744\n      result = is(feature.fn, 'function') ? feature.fn() : feature.fn;                                                 // 745\n                                                                                                                       // 746\n                                                                                                                       // 747\n      // Set each of the names on the Modernizr object                                                                 // 748\n      for (nameIdx = 0; nameIdx < featureNames.length; nameIdx++) {                                                    // 749\n        featureName = featureNames[nameIdx];                                                                           // 750\n        // Support dot properties as sub tests. We don't do checking to make sure                                      // 751\n        // that the implied parent tests have been added. You must call them in                                        // 752\n        // order (either in the test, or make the parent test a dependency).                                           // 753\n        //                                                                                                             // 754\n        // Cap it to TWO to make the logic simple and because who needs that kind of subtesting                        // 755\n        // hashtag famous last words                                                                                   // 756\n        featureNameSplit = featureName.split('.');                                                                     // 757\n                                                                                                                       // 758\n        if (featureNameSplit.length === 1) {                                                                           // 759\n          Modernizr[featureNameSplit[0]] = result;                                                                     // 760\n        }                                                                                                              // 761\n        else if (featureNameSplit.length === 2) {                                                                      // 762\n          // cast to a Boolean, if not one already                                                                     // 763\n          /* jshint -W053 */                                                                                           // 764\n          if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {                // 765\n            Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);                              // 766\n          }                                                                                                            // 767\n                                                                                                                       // 768\n          Modernizr[featureNameSplit[0]][featureNameSplit[1]] = result;                                                // 769\n        }                                                                                                              // 770\n                                                                                                                       // 771\n        classes.push((result ? '' : 'no-') + featureNameSplit.join('-'));                                              // 772\n      }                                                                                                                // 773\n    }                                                                                                                  // 774\n  }                                                                                                                    // 775\n                                                                                                                       // 776\n  ;                                                                                                                    // 777\n                                                                                                                       // 778\n  var docElement = document.documentElement;                                                                           // 779\n                                                                                                                       // 780\n                                                                                                                       // 781\n  // Pass in an and array of class names, e.g.:                                                                        // 782\n  //  ['no-webp', 'borderradius', ...]                                                                                 // 783\n  function setClasses( classes ) {                                                                                     // 784\n    var className = docElement.className;                                                                              // 785\n    var classPrefix = Modernizr._config.classPrefix || '';                                                             // 786\n                                                                                                                       // 787\n    // Change `no-js` to `js` (we do this independently of the `enableClasses`                                         // 788\n    // option)                                                                                                         // 789\n    // Handle classPrefix on this too                                                                                  // 790\n    if(Modernizr._config.enableJSClass) {                                                                              // 791\n      var reJS = new RegExp('(^|\\\\s)'+classPrefix+'no-js(\\\\s|$)');                                                     // 792\n      className = className.replace(reJS, '$1'+classPrefix+'js$2');                                                    // 793\n    }                                                                                                                  // 794\n                                                                                                                       // 795\n    if(Modernizr._config.enableClasses) {                                                                              // 796\n      // Add the new classes                                                                                           // 797\n      className += ' ' + classPrefix + classes.join(' ' + classPrefix);                                                // 798\n      docElement.className = className;                                                                                // 799\n    }                                                                                                                  // 800\n                                                                                                                       // 801\n  }                                                                                                                    // 802\n                                                                                                                       // 803\n  ;                                                                                                                    // 804\n                                                                                                                       // 805\n  // hasOwnProperty shim by kangax needed for Safari 2.0 support                                                       // 806\n  var hasOwnProp;                                                                                                      // 807\n                                                                                                                       // 808\n  (function() {                                                                                                        // 809\n    var _hasOwnProperty = ({}).hasOwnProperty;                                                                         // 810\n    if ( !is(_hasOwnProperty, 'undefined') && !is(_hasOwnProperty.call, 'undefined') ) {                               // 811\n      hasOwnProp = function (object, property) {                                                                       // 812\n        return _hasOwnProperty.call(object, property);                                                                 // 813\n      };                                                                                                               // 814\n    }                                                                                                                  // 815\n    else {                                                                                                             // 816\n      hasOwnProp = function (object, property) { /* yes, this can give false positives/negatives, but most of the time we don't care about those */\n        return ((property in object) && is(object.constructor.prototype[property], 'undefined'));                      // 818\n      };                                                                                                               // 819\n    }                                                                                                                  // 820\n  })();                                                                                                                // 821\n                                                                                                                       // 822\n                                                                                                                       // 823\n                                                                                                                       // 824\n  // As far as I can think of, we shouldn't need or                                                                    // 825\n  // allow 'on' for non-async tests, and you can't do                                                                  // 826\n  // async tests without this 'addTest' module.                                                                        // 827\n                                                                                                                       // 828\n  // Listeners for async or post-run tests                                                                             // 829\n  ModernizrProto._l = {};                                                                                              // 830\n                                                                                                                       // 831\n  // 'addTest' implies a test after the core runloop,                                                                  // 832\n  // So we'll add in the events                                                                                        // 833\n  ModernizrProto.on = function( test, cb ) {                                                                           // 834\n    // Create the list of listeners if it doesn't exist                                                                // 835\n    if (!this._l[test]) {                                                                                              // 836\n      this._l[test] = [];                                                                                              // 837\n    }                                                                                                                  // 838\n                                                                                                                       // 839\n    // Push this test on to the listener list                                                                          // 840\n    this._l[test].push(cb);                                                                                            // 841\n                                                                                                                       // 842\n    // If it's already been resolved, trigger it on next tick                                                          // 843\n    if (Modernizr.hasOwnProperty(test)) {                                                                              // 844\n      // Next Tick                                                                                                     // 845\n      setTimeout(function() {                                                                                          // 846\n        Modernizr._trigger(test, Modernizr[test]);                                                                     // 847\n      }, 0);                                                                                                           // 848\n    }                                                                                                                  // 849\n  };                                                                                                                   // 850\n                                                                                                                       // 851\n  ModernizrProto._trigger = function( test, res ) {                                                                    // 852\n    if (!this._l[test]) {                                                                                              // 853\n      return;                                                                                                          // 854\n    }                                                                                                                  // 855\n                                                                                                                       // 856\n    var cbs = this._l[test];                                                                                           // 857\n                                                                                                                       // 858\n    // Force async                                                                                                     // 859\n    setTimeout(function() {                                                                                            // 860\n      var i, cb;                                                                                                       // 861\n      for (i = 0; i < cbs.length; i++) {                                                                               // 862\n        cb = cbs[i];                                                                                                   // 863\n        cb(res);                                                                                                       // 864\n      }                                                                                                                // 865\n    },0);                                                                                                              // 866\n                                                                                                                       // 867\n    // Don't trigger these again                                                                                       // 868\n    delete this._l[test];                                                                                              // 869\n  };                                                                                                                   // 870\n                                                                                                                       // 871\n  /**                                                                                                                  // 872\n   * addTest allows the user to define their own feature tests                                                         // 873\n   * the result will be added onto the Modernizr object,                                                               // 874\n   * as well as an appropriate className set on the html element                                                       // 875\n   *                                                                                                                   // 876\n   * @param feature - String naming the feature                                                                        // 877\n   * @param test - Function returning true if feature is supported, false if not                                       // 878\n   */                                                                                                                  // 879\n  function addTest( feature, test ) {                                                                                  // 880\n    if ( typeof feature == 'object' ) {                                                                                // 881\n      for ( var key in feature ) {                                                                                     // 882\n        if ( hasOwnProp( feature, key ) ) {                                                                            // 883\n          addTest( key, feature[ key ] );                                                                              // 884\n        }                                                                                                              // 885\n      }                                                                                                                // 886\n    } else {                                                                                                           // 887\n                                                                                                                       // 888\n      feature = feature.toLowerCase();                                                                                 // 889\n      var featureNameSplit = feature.split('.');                                                                       // 890\n      var last = Modernizr[featureNameSplit[0]];                                                                       // 891\n                                                                                                                       // 892\n      // Again, we don't check for parent test existence. Get that right, though.                                      // 893\n      if (featureNameSplit.length == 2) {                                                                              // 894\n        last = last[featureNameSplit[1]];                                                                              // 895\n      }                                                                                                                // 896\n                                                                                                                       // 897\n      if ( typeof last != 'undefined' ) {                                                                              // 898\n        // we're going to quit if you're trying to overwrite an existing test                                          // 899\n        // if we were to allow it, we'd do this:                                                                       // 900\n        //   var re = new RegExp(\"\\\\b(no-)?\" + feature + \"\\\\b\");                                                       // 901\n        //   docElement.className = docElement.className.replace( re, '' );                                            // 902\n        // but, no rly, stuff 'em.                                                                                     // 903\n        return Modernizr;                                                                                              // 904\n      }                                                                                                                // 905\n                                                                                                                       // 906\n      test = typeof test == 'function' ? test() : test;                                                                // 907\n                                                                                                                       // 908\n      // Set the value (this is the magic, right here).                                                                // 909\n      if (featureNameSplit.length == 1) {                                                                              // 910\n        Modernizr[featureNameSplit[0]] = test;                                                                         // 911\n      }                                                                                                                // 912\n      else if (featureNameSplit.length == 2) {                                                                         // 913\n        // cast to a Boolean, if not one already                                                                       // 914\n        /* jshint -W053 */                                                                                             // 915\n        if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {                  // 916\n          Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);                                // 917\n        }                                                                                                              // 918\n                                                                                                                       // 919\n        Modernizr[featureNameSplit[0]][featureNameSplit[1]] = test;                                                    // 920\n      }                                                                                                                // 921\n                                                                                                                       // 922\n      // Set a single class (either `feature` or `no-feature`)                                                         // 923\n      /* jshint -W041 */                                                                                               // 924\n      setClasses([(!!test && test != false ? '' : 'no-') + featureNameSplit.join('-')]);                               // 925\n      /* jshint +W041 */                                                                                               // 926\n                                                                                                                       // 927\n      // Trigger the event                                                                                             // 928\n      Modernizr._trigger(feature, test);                                                                               // 929\n    }                                                                                                                  // 930\n                                                                                                                       // 931\n    return Modernizr; // allow chaining.                                                                               // 932\n  }                                                                                                                    // 933\n                                                                                                                       // 934\n  // After all the tests are run, add self                                                                             // 935\n  // to the Modernizr prototype                                                                                        // 936\n  Modernizr._q.push(function() {                                                                                       // 937\n    ModernizrProto.addTest = addTest;                                                                                  // 938\n  });                                                                                                                  // 939\n                                                                                                                       // 940\n                                                                                                                       // 941\n                                                                                                                       // 942\n  // Helper function for converting kebab-case to camelCase,                                                           // 943\n  // e.g. box-sizing -> boxSizing                                                                                      // 944\n  function cssToDOM( name ) {                                                                                          // 945\n    return name.replace(/([a-z])-([a-z])/g, function(str, m1, m2) {                                                    // 946\n      return m1 + m2.toUpperCase();                                                                                    // 947\n    }).replace(/^-/, '');                                                                                              // 948\n  }                                                                                                                    // 949\n  ;                                                                                                                    // 950\n                                                                                                                       // 951\n  /**                                                                                                                  // 952\n   * atRule returns a given CSS property at-rule (eg @keyframes), possibly in                                          // 953\n   * some prefixed form, or false, in the case of an unsupported rule                                                  // 954\n   *                                                                                                                   // 955\n   * @param prop - String naming the property to test                                                                  // 956\n   */                                                                                                                  // 957\n                                                                                                                       // 958\n  var atRule = function(prop) {                                                                                        // 959\n    var length = prefixes.length;                                                                                      // 960\n    var cssrule = window.CSSRule;                                                                                      // 961\n    var rule;                                                                                                          // 962\n                                                                                                                       // 963\n    if (typeof cssrule === 'undefined') {                                                                              // 964\n      return false;                                                                                                    // 965\n    }                                                                                                                  // 966\n                                                                                                                       // 967\n    // remove literal @ from beginning of provided property                                                            // 968\n    prop = prop.replace(/^@/,'');                                                                                      // 969\n                                                                                                                       // 970\n    // CSSRules use underscores instead of dashes                                                                      // 971\n    rule = prop.replace(/-/g,'_').toUpperCase() + '_RULE';                                                             // 972\n                                                                                                                       // 973\n    if (rule in cssrule) {                                                                                             // 974\n      return '@' + prop;                                                                                               // 975\n    }                                                                                                                  // 976\n                                                                                                                       // 977\n    for ( var i = 0; i < length; i++ ) {                                                                               // 978\n      // prefixes gives us something like -o-, and we want O_                                                          // 979\n      var prefix = prefixes[i];                                                                                        // 980\n      var thisRule = prefix.toUpperCase() + '_' + rule;                                                                // 981\n                                                                                                                       // 982\n      if (thisRule in cssrule) {                                                                                       // 983\n        return '@-' + prefix.toLowerCase() + '-' + prop;                                                               // 984\n      }                                                                                                                // 985\n    }                                                                                                                  // 986\n                                                                                                                       // 987\n    return false;                                                                                                      // 988\n  };                                                                                                                   // 989\n                                                                                                                       // 990\n                                                                                                                       // 991\n                                                                                                                       // 992\n  // Following spec is to expose vendor-specific style properties as:                                                  // 993\n  //   elem.style.WebkitBorderRadius                                                                                   // 994\n  // and the following would be incorrect:                                                                             // 995\n  //   elem.style.webkitBorderRadius                                                                                   // 996\n                                                                                                                       // 997\n  // Webkit ghosts their properties in lowercase but Opera & Moz do not.                                               // 998\n  // Microsoft uses a lowercase `ms` instead of the correct `Ms` in IE8+                                               // 999\n  //   erik.eae.net/archives/2008/03/10/21.48.10/                                                                      // 1000\n                                                                                                                       // 1001\n  // More here: github.com/Modernizr/Modernizr/issues/issue/21                                                         // 1002\n  var omPrefixes = 'Webkit Moz O ms';                                                                                  // 1003\n                                                                                                                       // 1004\n                                                                                                                       // 1005\n  var domPrefixes = (ModernizrProto._config.usePrefixes ? omPrefixes.toLowerCase().split(' ') : []);                   // 1006\n  ModernizrProto._domPrefixes = domPrefixes;                                                                           // 1007\n                                                                                                                       // 1008\n                                                                                                                       // 1009\n  var createElement = function() {                                                                                     // 1010\n    if (typeof document.createElement !== 'function') {                                                                // 1011\n      // This is the case in IE7, where the type of createElement is \"object\".                                         // 1012\n      // For this reason, we cannot call apply() as Object is not a Function.                                          // 1013\n      return document.createElement(arguments[0]);                                                                     // 1014\n    } else {                                                                                                           // 1015\n      return document.createElement.apply(document, arguments);                                                        // 1016\n    }                                                                                                                  // 1017\n  };                                                                                                                   // 1018\n                                                                                                                       // 1019\n/*!                                                                                                                    // 1020\n{                                                                                                                      // 1021\n  \"name\": \"Canvas\",                                                                                                    // 1022\n  \"property\": \"canvas\",                                                                                                // 1023\n  \"caniuse\": \"canvas\",                                                                                                 // 1024\n  \"tags\": [\"canvas\", \"graphics\"],                                                                                      // 1025\n  \"polyfills\": [\"flashcanvas\", \"excanvas\", \"slcanvas\", \"fxcanvas\"]                                                     // 1026\n}                                                                                                                      // 1027\n!*/                                                                                                                    // 1028\n/* DOC                                                                                                                 // 1029\nDetects support for the `<canvas>` element for 2D drawing.                                                             // 1030\n*/                                                                                                                     // 1031\n                                                                                                                       // 1032\n  // On the S60 and BB Storm, getContext exists, but always returns undefined                                          // 1033\n  // so we actually have to call getContext() to verify                                                                // 1034\n  // github.com/Modernizr/Modernizr/issues/issue/97/                                                                   // 1035\n  Modernizr.addTest('canvas', function() {                                                                             // 1036\n    var elem = createElement('canvas');                                                                                // 1037\n    return !!(elem.getContext && elem.getContext('2d'));                                                               // 1038\n  });                                                                                                                  // 1039\n                                                                                                                       // 1040\n/*!                                                                                                                    // 1041\n{                                                                                                                      // 1042\n  \"name\": \"Canvas text\",                                                                                               // 1043\n  \"property\": \"canvastext\",                                                                                            // 1044\n  \"caniuse\": \"canvas-text\",                                                                                            // 1045\n  \"tags\": [\"canvas\", \"graphics\"],                                                                                      // 1046\n  \"polyfills\": [\"canvastext\"]                                                                                          // 1047\n}                                                                                                                      // 1048\n!*/                                                                                                                    // 1049\n/* DOC                                                                                                                 // 1050\nDetects support for the text APIs for `<canvas>` elements.                                                             // 1051\n*/                                                                                                                     // 1052\n                                                                                                                       // 1053\n  Modernizr.addTest('canvastext',  function() {                                                                        // 1054\n    if (Modernizr.canvas  === false) return false;                                                                     // 1055\n    return typeof createElement('canvas').getContext('2d').fillText == 'function';                                     // 1056\n  });                                                                                                                  // 1057\n                                                                                                                       // 1058\n/*!                                                                                                                    // 1059\n{                                                                                                                      // 1060\n  \"name\": \"CSS Gradients\",                                                                                             // 1061\n  \"caniuse\": \"css-gradients\",                                                                                          // 1062\n  \"property\": \"cssgradients\",                                                                                          // 1063\n  \"tags\": [\"css\"],                                                                                                     // 1064\n  \"knownBugs\": [\"False-positives on webOS (https://github.com/Modernizr/Modernizr/issues/202)\"],                       // 1065\n  \"notes\": [{                                                                                                          // 1066\n    \"name\": \"Webkit Gradient Syntax\",                                                                                  // 1067\n    \"href\": \"http://webkit.org/blog/175/introducing-css-gradients/\"                                                    // 1068\n  },{                                                                                                                  // 1069\n    \"name\": \"Mozilla Linear Gradient Syntax\",                                                                          // 1070\n    \"href\": \"http://developer.mozilla.org/en/CSS/-moz-linear-gradient\"                                                 // 1071\n  },{                                                                                                                  // 1072\n    \"name\": \"Mozilla Radial Gradient Syntax\",                                                                          // 1073\n    \"href\": \"http://developer.mozilla.org/en/CSS/-moz-radial-gradient\"                                                 // 1074\n  },{                                                                                                                  // 1075\n    \"name\": \"W3C Gradient Spec\",                                                                                       // 1076\n    \"href\": \"dev.w3.org/csswg/css3-images/#gradients-\"                                                                 // 1077\n  }]                                                                                                                   // 1078\n}                                                                                                                      // 1079\n!*/                                                                                                                    // 1080\n                                                                                                                       // 1081\n                                                                                                                       // 1082\n  Modernizr.addTest('cssgradients', function() {                                                                       // 1083\n                                                                                                                       // 1084\n    var str1 = 'background-image:';                                                                                    // 1085\n    var str2 = 'gradient(linear,left top,right bottom,from(#9f9),to(white));';                                         // 1086\n    var str3 = 'linear-gradient(left top,#9f9, white);';                                                               // 1087\n                                                                                                                       // 1088\n    // standard syntax             // trailing 'background-image:'                                                     // 1089\n    var css = str1 + prefixes.join(str3 + str1).slice(0, -str1.length);                                                // 1090\n    if (Modernizr._config.usePrefixes) {                                                                               // 1091\n    // legacy webkit syntax (FIXME: remove when syntax not in use anymore)                                             // 1092\n      css += str1 + '-webkit-' + str2;                                                                                 // 1093\n    }                                                                                                                  // 1094\n                                                                                                                       // 1095\n    var elem = createElement('div');                                                                                   // 1096\n    var style = elem.style;                                                                                            // 1097\n    style.cssText = css;                                                                                               // 1098\n                                                                                                                       // 1099\n    // IE6 returns undefined so cast to string                                                                         // 1100\n    return ('' + style.backgroundImage).indexOf('gradient') > -1;                                                      // 1101\n  });                                                                                                                  // 1102\n                                                                                                                       // 1103\n/*!                                                                                                                    // 1104\n{                                                                                                                      // 1105\n  \"name\": \"CSS Multiple Backgrounds\",                                                                                  // 1106\n  \"caniuse\": \"multibackgrounds\",                                                                                       // 1107\n  \"property\": \"multiplebgs\",                                                                                           // 1108\n  \"tags\": [\"css\"]                                                                                                      // 1109\n}                                                                                                                      // 1110\n!*/                                                                                                                    // 1111\n                                                                                                                       // 1112\n  // Setting multiple images AND a color on the background shorthand property                                          // 1113\n  // and then querying the style.background property value for the number of                                           // 1114\n  // occurrences of \"url(\" is a reliable method for detecting ACTUAL support for this!                                 // 1115\n                                                                                                                       // 1116\n  Modernizr.addTest('multiplebgs', function() {                                                                        // 1117\n    var elem = createElement('div');                                                                                   // 1118\n    var style = elem.style;                                                                                            // 1119\n    style.cssText = 'background:url(https://),url(https://),red url(https://)';                                        // 1120\n                                                                                                                       // 1121\n    // If the UA supports multiple backgrounds, there should be three occurrences                                      // 1122\n    // of the string \"url(\" in the return value for elemStyle.background                                               // 1123\n    return (/(url\\s*\\(.*?){3}/).test(style.background);                                                                // 1124\n  });                                                                                                                  // 1125\n                                                                                                                       // 1126\n/*!                                                                                                                    // 1127\n{                                                                                                                      // 1128\n  \"name\": \"CSS Opacity\",                                                                                               // 1129\n  \"caniuse\": \"css-opacity\",                                                                                            // 1130\n  \"property\": \"opacity\",                                                                                               // 1131\n  \"tags\": [\"css\"],                                                                                                     // 1132\n  \"notes\": [\"Opacity must be be in the range of [0.0,1.0], according to the spec.\"]                                    // 1133\n}                                                                                                                      // 1134\n!*/                                                                                                                    // 1135\n                                                                                                                       // 1136\n  // Browsers that actually have CSS Opacity implemented have done so                                                  // 1137\n  // according to spec, which means their return values are within the                                                 // 1138\n  // range of [0.0,1.0] - including the leading zero.                                                                  // 1139\n                                                                                                                       // 1140\n  Modernizr.addTest('opacity', function() {                                                                            // 1141\n    var elem = createElement('div');                                                                                   // 1142\n    var style = elem.style;                                                                                            // 1143\n    style.cssText = prefixes.join('opacity:.55;');                                                                     // 1144\n                                                                                                                       // 1145\n    // The non-literal . in this regex is intentional:                                                                 // 1146\n    // German Chrome returns this value as 0,55                                                                        // 1147\n    // github.com/Modernizr/Modernizr/issues/#issue/59/comment/516632                                                  // 1148\n    return (/^0.55$/).test(style.opacity);                                                                             // 1149\n  });                                                                                                                  // 1150\n                                                                                                                       // 1151\n/*!                                                                                                                    // 1152\n{                                                                                                                      // 1153\n  \"name\": \"CSS rgba\",                                                                                                  // 1154\n  \"caniuse\": \"css3-colors\",                                                                                            // 1155\n  \"property\": \"rgba\",                                                                                                  // 1156\n  \"tags\": [\"css\"],                                                                                                     // 1157\n  \"notes\": [{                                                                                                          // 1158\n    \"name\": \"CSSTricks Tutorial\",                                                                                      // 1159\n    \"href\": \"http://css-tricks.com/rgba-browser-support/\"                                                              // 1160\n  }]                                                                                                                   // 1161\n}                                                                                                                      // 1162\n!*/                                                                                                                    // 1163\n                                                                                                                       // 1164\n  Modernizr.addTest('rgba', function() {                                                                               // 1165\n    var elem = createElement('div');                                                                                   // 1166\n    var style = elem.style;                                                                                            // 1167\n    style.cssText = 'background-color:rgba(150,255,150,.5)';                                                           // 1168\n                                                                                                                       // 1169\n    return ('' + style.backgroundColor).indexOf('rgba') > -1;                                                          // 1170\n  });                                                                                                                  // 1171\n                                                                                                                       // 1172\n/*!                                                                                                                    // 1173\n{                                                                                                                      // 1174\n  \"name\": \"Drag & Drop\",                                                                                               // 1175\n  \"property\": \"draganddrop\",                                                                                           // 1176\n  \"caniuse\": \"dragndrop\",                                                                                              // 1177\n  \"knownBugs\": [\"Mobile browsers like Android, iOS < 6, and Firefox OS technically support the APIs, but don't expose it to the end user, resulting in a false positive.\"],\n  \"notes\": [{                                                                                                          // 1179\n    \"name\": \"W3C spec\",                                                                                                // 1180\n    \"href\": \"http://www.w3.org/TR/2010/WD-html5-20101019/dnd.html\"                                                     // 1181\n  }],                                                                                                                  // 1182\n  \"polyfills\": [\"dropfile\", \"moxie\", \"fileapi\"]                                                                        // 1183\n}                                                                                                                      // 1184\n!*/                                                                                                                    // 1185\n/* DOC                                                                                                                 // 1186\nDetects support for native drag & drop of elements.                                                                    // 1187\n*/                                                                                                                     // 1188\n                                                                                                                       // 1189\n  Modernizr.addTest('draganddrop', function() {                                                                        // 1190\n    var div = createElement('div');                                                                                    // 1191\n    return ('draggable' in div) || ('ondragstart' in div && 'ondrop' in div);                                          // 1192\n  });                                                                                                                  // 1193\n                                                                                                                       // 1194\n/*!                                                                                                                    // 1195\n{                                                                                                                      // 1196\n  \"name\" : \"HTML5 Audio Element\",                                                                                      // 1197\n  \"property\": \"audio\",                                                                                                 // 1198\n  \"tags\" : [\"html5\", \"audio\", \"media\"]                                                                                 // 1199\n}                                                                                                                      // 1200\n!*/                                                                                                                    // 1201\n/* DOC                                                                                                                 // 1202\nDetects the audio element                                                                                              // 1203\n*/                                                                                                                     // 1204\n                                                                                                                       // 1205\n  // This tests evaluates support of the audio element, as well as                                                     // 1206\n  // testing what types of content it supports.                                                                        // 1207\n  //                                                                                                                   // 1208\n  // We're using the Boolean constructor here, so that we can extend the value                                         // 1209\n  // e.g.  Modernizr.audio     // true                                                                                 // 1210\n  //       Modernizr.audio.ogg // 'probably'                                                                           // 1211\n  //                                                                                                                   // 1212\n  // Codec values from : github.com/NielsLeenheer/html5test/blob/9106a8/index.html#L845                                // 1213\n  //                     thx to NielsLeenheer and zcorpan                                                              // 1214\n                                                                                                                       // 1215\n  // Note: in some older browsers, \"no\" was a return value instead of empty string.                                    // 1216\n  //   It was live in FF3.5.0 and 3.5.1, but fixed in 3.5.2                                                            // 1217\n  //   It was also live in Safari 4.0.0 - 4.0.4, but fixed in 4.0.5                                                    // 1218\n  Modernizr.addTest('audio', function() {                                                                              // 1219\n    /* jshint -W053 */                                                                                                 // 1220\n    var elem = createElement('audio');                                                                                 // 1221\n    var bool = false;                                                                                                  // 1222\n                                                                                                                       // 1223\n    try {                                                                                                              // 1224\n      if ( bool = !!elem.canPlayType ) {                                                                               // 1225\n        bool      = new Boolean(bool);                                                                                 // 1226\n        bool.ogg  = elem.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/,'');                                 // 1227\n        bool.mp3  = elem.canPlayType('audio/mpeg;')               .replace(/^no$/,'');                                 // 1228\n        bool.opus  = elem.canPlayType('audio/ogg; codecs=\"opus\"') .replace(/^no$/,'');                                 // 1229\n                                                                                                                       // 1230\n        // Mimetypes accepted:                                                                                         // 1231\n        //   developer.mozilla.org/En/Media_formats_supported_by_the_audio_and_video_elements                          // 1232\n        //   bit.ly/iphoneoscodecs                                                                                     // 1233\n        bool.wav  = elem.canPlayType('audio/wav; codecs=\"1\"')     .replace(/^no$/,'');                                 // 1234\n        bool.m4a  = ( elem.canPlayType('audio/x-m4a;')            ||                                                   // 1235\n                     elem.canPlayType('audio/aac;'))             .replace(/^no$/,'');                                  // 1236\n      }                                                                                                                // 1237\n    } catch(e) { }                                                                                                     // 1238\n                                                                                                                       // 1239\n    return bool;                                                                                                       // 1240\n  });                                                                                                                  // 1241\n                                                                                                                       // 1242\n/*!                                                                                                                    // 1243\n{                                                                                                                      // 1244\n  \"name\": \"HTML5 Video\",                                                                                               // 1245\n  \"property\": \"video\",                                                                                                 // 1246\n  \"caniuse\": \"video\",                                                                                                  // 1247\n  \"tags\": [\"html5\"],                                                                                                   // 1248\n  \"knownBugs\": [                                                                                                       // 1249\n    \"Without QuickTime, `Modernizr.video.h264` will be `undefined`; http://github.com/Modernizr/Modernizr/issues/546\"  // 1250\n  ],                                                                                                                   // 1251\n  \"polyfills\": [                                                                                                       // 1252\n    \"html5media\",                                                                                                      // 1253\n    \"mediaelementjs\",                                                                                                  // 1254\n    \"sublimevideo\",                                                                                                    // 1255\n    \"videojs\",                                                                                                         // 1256\n    \"leanbackplayer\",                                                                                                  // 1257\n    \"videoforeverybody\"                                                                                                // 1258\n  ]                                                                                                                    // 1259\n}                                                                                                                      // 1260\n!*/                                                                                                                    // 1261\n/* DOC                                                                                                                 // 1262\nDetects support for the video element, as well as testing what types of content it supports.                           // 1263\n                                                                                                                       // 1264\nSubproperties are provided to describe support for `ogg`, `h264` and `webm` formats, e.g.:                             // 1265\n                                                                                                                       // 1266\n```javascript                                                                                                          // 1267\nModernizr.video         // true                                                                                        // 1268\nModernizr.video.ogg     // 'probably'                                                                                  // 1269\n```                                                                                                                    // 1270\n*/                                                                                                                     // 1271\n                                                                                                                       // 1272\n  // Codec values from : github.com/NielsLeenheer/html5test/blob/9106a8/index.html#L845                                // 1273\n  //                     thx to NielsLeenheer and zcorpan                                                              // 1274\n                                                                                                                       // 1275\n  // Note: in some older browsers, \"no\" was a return value instead of empty string.                                    // 1276\n  //   It was live in FF3.5.0 and 3.5.1, but fixed in 3.5.2                                                            // 1277\n  //   It was also live in Safari 4.0.0 - 4.0.4, but fixed in 4.0.5                                                    // 1278\n                                                                                                                       // 1279\n  Modernizr.addTest('video', function() {                                                                              // 1280\n    /* jshint -W053 */                                                                                                 // 1281\n    var elem = createElement('video');                                                                                 // 1282\n    var bool = false;                                                                                                  // 1283\n                                                                                                                       // 1284\n    // IE9 Running on Windows Server SKU can cause an exception to be thrown, bug #224                                 // 1285\n    try {                                                                                                              // 1286\n      if ( bool = !!elem.canPlayType ) {                                                                               // 1287\n        bool = new Boolean(bool);                                                                                      // 1288\n        bool.ogg = elem.canPlayType('video/ogg; codecs=\"theora\"').replace(/^no$/,'');                                  // 1289\n                                                                                                                       // 1290\n        // Without QuickTime, this value will be `undefined`. github.com/Modernizr/Modernizr/issues/546                // 1291\n        bool.h264 = elem.canPlayType('video/mp4; codecs=\"avc1.42E01E\"').replace(/^no$/,'');                            // 1292\n                                                                                                                       // 1293\n        bool.webm = elem.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/^no$/,'');                           // 1294\n                                                                                                                       // 1295\n        bool.vp9 = elem.canPlayType('video/webm; codecs=\"vp9\"').replace(/^no$/,'');                                    // 1296\n                                                                                                                       // 1297\n        bool.hls = elem.canPlayType('application/x-mpegURL; codecs=\"avc1.42E01E\"').replace(/^no$/,'');                 // 1298\n      }                                                                                                                // 1299\n    } catch(e){}                                                                                                       // 1300\n                                                                                                                       // 1301\n    return bool;                                                                                                       // 1302\n  });                                                                                                                  // 1303\n                                                                                                                       // 1304\n/*!                                                                                                                    // 1305\n{                                                                                                                      // 1306\n  \"name\": \"Inline SVG\",                                                                                                // 1307\n  \"property\": \"inlinesvg\",                                                                                             // 1308\n  \"caniuse\": \"svg-html5\",                                                                                              // 1309\n  \"tags\": [\"svg\"],                                                                                                     // 1310\n  \"notes\": [{                                                                                                          // 1311\n    \"name\": \"Test page\",                                                                                               // 1312\n    \"href\": \"http://paulirish.com/demo/inline-svg\"                                                                     // 1313\n  }],                                                                                                                  // 1314\n  \"polyfills\": [\"inline-svg-polyfill\"]                                                                                 // 1315\n}                                                                                                                      // 1316\n!*/                                                                                                                    // 1317\n/* DOC                                                                                                                 // 1318\nDetects support for inline SVG in HTML (not within XHTML).                                                             // 1319\n*/                                                                                                                     // 1320\n                                                                                                                       // 1321\n  Modernizr.addTest('inlinesvg', function() {                                                                          // 1322\n    var div = createElement('div');                                                                                    // 1323\n    div.innerHTML = '<svg/>';                                                                                          // 1324\n    return (div.firstChild && div.firstChild.namespaceURI) == 'http://www.w3.org/2000/svg';                            // 1325\n  });                                                                                                                  // 1326\n                                                                                                                       // 1327\n/*!                                                                                                                    // 1328\n{                                                                                                                      // 1329\n  \"name\": \"WebGL\",                                                                                                     // 1330\n  \"property\": \"webgl\",                                                                                                 // 1331\n  \"caniuse\": \"webgl\",                                                                                                  // 1332\n  \"tags\": [\"webgl\", \"graphics\"],                                                                                       // 1333\n  \"polyfills\": [\"jebgl\", \"webglcompat\", \"cwebgl\", \"iewebgl\"]                                                           // 1334\n}                                                                                                                      // 1335\n!*/                                                                                                                    // 1336\n                                                                                                                       // 1337\n  Modernizr.addTest('webgl', function() {                                                                              // 1338\n    var canvas = createElement('canvas');                                                                              // 1339\n    var supports = 'probablySupportsContext' in canvas ? 'probablySupportsContext' :  'supportsContext';               // 1340\n    if (supports in canvas) {                                                                                          // 1341\n      return canvas[supports]('webgl') || canvas[supports]('experimental-webgl');                                      // 1342\n    }                                                                                                                  // 1343\n    return 'WebGLRenderingContext' in window;                                                                          // 1344\n  });                                                                                                                  // 1345\n                                                                                                                       // 1346\n                                                                                                                       // 1347\n  // isEventSupported determines if the given element supports the given event                                         // 1348\n  // kangax.github.com/iseventsupported/                                                                               // 1349\n  // github.com/Modernizr/Modernizr/pull/636                                                                           // 1350\n  //                                                                                                                   // 1351\n  // Known incorrects:                                                                                                 // 1352\n  //   Modernizr.hasEvent(\"webkitTransitionEnd\", elem) // false negative                                               // 1353\n  //   Modernizr.hasEvent(\"textInput\") // in Webkit. github.com/Modernizr/Modernizr/issues/333                         // 1354\n  var isEventSupported = (function (undefined) {                                                                       // 1355\n                                                                                                                       // 1356\n    // Detect whether event support can be detected via `in`. Test on a DOM element                                    // 1357\n    // using the \"blur\" event b/c it should always exist. bit.ly/event-detection                                       // 1358\n    var needsFallback = !('onblur' in document.documentElement);                                                       // 1359\n                                                                                                                       // 1360\n    /**                                                                                                                // 1361\n     * @param  {string|*}           eventName  is the name of an event to test for (e.g. \"resize\")                     // 1362\n     * @param  {(Object|string|*)=} element    is the element|document|window|tagName to test on                       // 1363\n     * @return {boolean}                                                                                               // 1364\n     */                                                                                                                // 1365\n    function isEventSupportedInner( eventName, element ) {                                                             // 1366\n                                                                                                                       // 1367\n      var isSupported;                                                                                                 // 1368\n      if ( !eventName ) { return false; }                                                                              // 1369\n      if ( !element || typeof element === 'string' ) {                                                                 // 1370\n        element = createElement(element || 'div');                                                                     // 1371\n      }                                                                                                                // 1372\n                                                                                                                       // 1373\n      // Testing via the `in` operator is sufficient for modern browsers and IE.                                       // 1374\n      // When using `setAttribute`, IE skips \"unload\", WebKit skips \"unload\" and                                       // 1375\n      // \"resize\", whereas `in` \"catches\" those.                                                                       // 1376\n      eventName = 'on' + eventName;                                                                                    // 1377\n      isSupported = eventName in element;                                                                              // 1378\n                                                                                                                       // 1379\n      // Fallback technique for old Firefox - bit.ly/event-detection                                                   // 1380\n      if ( !isSupported && needsFallback ) {                                                                           // 1381\n        if ( !element.setAttribute ) {                                                                                 // 1382\n          // Switch to generic element if it lacks `setAttribute`.                                                     // 1383\n          // It could be the `document`, `window`, or something else.                                                  // 1384\n          element = createElement('div');                                                                              // 1385\n        }                                                                                                              // 1386\n        if ( element.setAttribute && element.removeAttribute ) {                                                       // 1387\n          element.setAttribute(eventName, '');                                                                         // 1388\n          isSupported = typeof element[eventName] === 'function';                                                      // 1389\n                                                                                                                       // 1390\n          if ( element[eventName] !== undefined ) {                                                                    // 1391\n            // If property was created, \"remove it\" by setting value to `undefined`.                                   // 1392\n            element[eventName] = undefined;                                                                            // 1393\n          }                                                                                                            // 1394\n          element.removeAttribute(eventName);                                                                          // 1395\n        }                                                                                                              // 1396\n      }                                                                                                                // 1397\n                                                                                                                       // 1398\n      return isSupported;                                                                                              // 1399\n    }                                                                                                                  // 1400\n    return isEventSupportedInner;                                                                                      // 1401\n  })();                                                                                                                // 1402\n                                                                                                                       // 1403\n                                                                                                                       // 1404\n                                                                                                                       // 1405\n  // Modernizr.hasEvent() detects support for a given event, with an optional element to test on                       // 1406\n  // Modernizr.hasEvent('gesturestart', elem)                                                                          // 1407\n  var hasEvent = ModernizrProto.hasEvent = isEventSupported;                                                           // 1408\n                                                                                                                       // 1409\n/*!                                                                                                                    // 1410\n{                                                                                                                      // 1411\n  \"name\": \"Hashchange event\",                                                                                          // 1412\n  \"property\": \"hashchange\",                                                                                            // 1413\n  \"caniuse\": \"hashchange\",                                                                                             // 1414\n  \"tags\": [\"history\"],                                                                                                 // 1415\n  \"notes\": [{                                                                                                          // 1416\n    \"name\": \"MDN documentation\",                                                                                       // 1417\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/window.onhashchange\"                                     // 1418\n  }],                                                                                                                  // 1419\n  \"polyfills\": [                                                                                                       // 1420\n    \"jquery-hashchange\",                                                                                               // 1421\n    \"moo-historymanager\",                                                                                              // 1422\n    \"jquery-ajaxy\",                                                                                                    // 1423\n    \"hasher\",                                                                                                          // 1424\n    \"shistory\"                                                                                                         // 1425\n  ]                                                                                                                    // 1426\n}                                                                                                                      // 1427\n!*/                                                                                                                    // 1428\n/* DOC                                                                                                                 // 1429\nDetects support for the `hashchange` event, fired when the current location fragment changes.                          // 1430\n*/                                                                                                                     // 1431\n                                                                                                                       // 1432\n  Modernizr.addTest('hashchange', function() {                                                                         // 1433\n    if (hasEvent('hashchange', window) === false) {                                                                    // 1434\n      return false;                                                                                                    // 1435\n    }                                                                                                                  // 1436\n                                                                                                                       // 1437\n    // documentMode logic from YUI to filter out IE8 Compat Mode                                                       // 1438\n    //   which false positives.                                                                                        // 1439\n    return (document.documentMode === undefined || document.documentMode > 7);                                         // 1440\n  });                                                                                                                  // 1441\n                                                                                                                       // 1442\n                                                                                                                       // 1443\n  /**                                                                                                                  // 1444\n   * contains returns a boolean for if substr is found within str.                                                     // 1445\n   */                                                                                                                  // 1446\n  function contains( str, substr ) {                                                                                   // 1447\n    return !!~('' + str).indexOf(substr);                                                                              // 1448\n  }                                                                                                                    // 1449\n                                                                                                                       // 1450\n  ;                                                                                                                    // 1451\n/*!                                                                                                                    // 1452\n{                                                                                                                      // 1453\n  \"name\": \"CSS HSLA Colors\",                                                                                           // 1454\n  \"caniuse\": \"css3-colors\",                                                                                            // 1455\n  \"property\": \"hsla\",                                                                                                  // 1456\n  \"tags\": [\"css\"],                                                                                                     // 1457\n  \"notes\": [\"Same as rgba(), in fact, browsers re-map hsla() to rgba() internally, except IE9 who retains it as hsla\"] // 1458\n}                                                                                                                      // 1459\n!*/                                                                                                                    // 1460\n                                                                                                                       // 1461\n  Modernizr.addTest('hsla', function() {                                                                               // 1462\n    var elem = createElement('div');                                                                                   // 1463\n    var style = elem.style;                                                                                            // 1464\n    style.cssText = 'background-color:hsla(120,40%,100%,.5)';                                                          // 1465\n    return contains(style.backgroundColor, 'rgba') || contains(style.backgroundColor, 'hsla');                         // 1466\n  });                                                                                                                  // 1467\n                                                                                                                       // 1468\n/*!                                                                                                                    // 1469\n{                                                                                                                      // 1470\n  \"name\": \"CSS Supports\",                                                                                              // 1471\n  \"property\": \"supports\",                                                                                              // 1472\n  \"caniuse\": \"css-featurequeries\",                                                                                     // 1473\n  \"tags\": [\"css\"],                                                                                                     // 1474\n  \"builderAliases\": [\"css_supports\"],                                                                                  // 1475\n  \"notes\": [{                                                                                                          // 1476\n    \"name\": \"W3 Spec\",                                                                                                 // 1477\n    \"href\": \"http://dev.w3.org/csswg/css3-conditional/#at-supports\"                                                    // 1478\n  },{                                                                                                                  // 1479\n    \"name\": \"Related Github Issue\",                                                                                    // 1480\n    \"href\": \"github.com/Modernizr/Modernizr/issues/648\"                                                                // 1481\n  },{                                                                                                                  // 1482\n    \"name\": \"W3 Info\",                                                                                                 // 1483\n    \"href\": \"http://dev.w3.org/csswg/css3-conditional/#the-csssupportsrule-interface\"                                  // 1484\n  }]                                                                                                                   // 1485\n}                                                                                                                      // 1486\n!*/                                                                                                                    // 1487\n                                                                                                                       // 1488\n  Modernizr.addTest('supports', 'CSS' in window && 'supports' in window.CSS);                                          // 1489\n                                                                                                                       // 1490\n                                                                                                                       // 1491\n  var inputElem = createElement('input');                                                                              // 1492\n                                                                                                                       // 1493\n                                                                                                                       // 1494\n  var inputtypes = 'search tel url email datetime date month week time datetime-local number range color'.split(' ');  // 1495\n                                                                                                                       // 1496\n                                                                                                                       // 1497\n  var inputs = {};                                                                                                     // 1498\n                                                                                                                       // 1499\n                                                                                                                       // 1500\n  var smile = ':)';                                                                                                    // 1501\n                                                                                                                       // 1502\n/*!                                                                                                                    // 1503\n{                                                                                                                      // 1504\n  \"name\": \"Form input types\",                                                                                          // 1505\n  \"property\": \"inputtypes\",                                                                                            // 1506\n  \"caniuse\": \"forms\",                                                                                                  // 1507\n  \"tags\": [\"forms\"],                                                                                                   // 1508\n  \"authors\": [\"Mike Taylor\"],                                                                                          // 1509\n  \"polyfills\": [                                                                                                       // 1510\n    \"jquerytools\",                                                                                                     // 1511\n    \"webshims\",                                                                                                        // 1512\n    \"h5f\",                                                                                                             // 1513\n    \"webforms2\",                                                                                                       // 1514\n    \"nwxforms\",                                                                                                        // 1515\n    \"fdslider\",                                                                                                        // 1516\n    \"html5slider\",                                                                                                     // 1517\n    \"galleryhtml5forms\",                                                                                               // 1518\n    \"jscolor\",                                                                                                         // 1519\n    \"html5formshim\",                                                                                                   // 1520\n    \"jqueryformshim\",                                                                                                  // 1521\n    \"selectedoptionsjs\",                                                                                               // 1522\n    \"formvalidationjs\"                                                                                                 // 1523\n  ]                                                                                                                    // 1524\n}                                                                                                                      // 1525\n!*/                                                                                                                    // 1526\n/* DOC                                                                                                                 // 1527\nDetects support for HTML5 form input types and exposes Boolean subproperties with the results:                         // 1528\n                                                                                                                       // 1529\n```javascript                                                                                                          // 1530\nModernizr.inputtypes.color                                                                                             // 1531\nModernizr.inputtypes.date                                                                                              // 1532\nModernizr.inputtypes.datetime                                                                                          // 1533\nModernizr.inputtypes['datetime-local']                                                                                 // 1534\nModernizr.inputtypes.email                                                                                             // 1535\nModernizr.inputtypes.month                                                                                             // 1536\nModernizr.inputtypes.number                                                                                            // 1537\nModernizr.inputtypes.range                                                                                             // 1538\nModernizr.inputtypes.search                                                                                            // 1539\nModernizr.inputtypes.tel                                                                                               // 1540\nModernizr.inputtypes.time                                                                                              // 1541\nModernizr.inputtypes.url                                                                                               // 1542\nModernizr.inputtypes.week                                                                                              // 1543\n```                                                                                                                    // 1544\n*/                                                                                                                     // 1545\n                                                                                                                       // 1546\n  // Run through HTML5's new input types to see if the UA understands any.                                             // 1547\n  //   This is put behind the tests runloop because it doesn't return a                                                // 1548\n  //   true/false like all the other tests; instead, it returns an object                                              // 1549\n  //   containing each input type with its corresponding true/false value                                              // 1550\n                                                                                                                       // 1551\n  // Big thanks to @miketaylr for the html5 forms expertise. miketaylr.com/                                            // 1552\n  Modernizr['inputtypes'] = (function(props) {                                                                         // 1553\n    var bool;                                                                                                          // 1554\n    var inputElemType;                                                                                                 // 1555\n    var defaultView;                                                                                                   // 1556\n    var len = props.length;                                                                                            // 1557\n                                                                                                                       // 1558\n    for ( var i = 0; i < len; i++ ) {                                                                                  // 1559\n                                                                                                                       // 1560\n      inputElem.setAttribute('type', inputElemType = props[i]);                                                        // 1561\n      bool = inputElem.type !== 'text';                                                                                // 1562\n                                                                                                                       // 1563\n      // We first check to see if the type we give it sticks..                                                         // 1564\n      // If the type does, we feed it a textual value, which shouldn't be valid.                                       // 1565\n      // If the value doesn't stick, we know there's input sanitization which infers a custom UI                       // 1566\n      if ( bool ) {                                                                                                    // 1567\n                                                                                                                       // 1568\n        inputElem.value         = smile;                                                                               // 1569\n        inputElem.style.cssText = 'position:absolute;visibility:hidden;';                                              // 1570\n                                                                                                                       // 1571\n        if ( /^range$/.test(inputElemType) && inputElem.style.WebkitAppearance !== undefined ) {                       // 1572\n                                                                                                                       // 1573\n          docElement.appendChild(inputElem);                                                                           // 1574\n          defaultView = document.defaultView;                                                                          // 1575\n                                                                                                                       // 1576\n          // Safari 2-4 allows the smiley as a value, despite making a slider                                          // 1577\n          bool =  defaultView.getComputedStyle &&                                                                      // 1578\n            defaultView.getComputedStyle(inputElem, null).WebkitAppearance !== 'textfield' &&                          // 1579\n            // Mobile android web browser has false positive, so must                                                  // 1580\n            // check the height to see if the widget is actually there.                                                // 1581\n            (inputElem.offsetHeight !== 0);                                                                            // 1582\n                                                                                                                       // 1583\n          docElement.removeChild(inputElem);                                                                           // 1584\n                                                                                                                       // 1585\n        } else if ( /^(search|tel)$/.test(inputElemType) ){                                                            // 1586\n          // Spec doesn't define any special parsing or detectable UI                                                  // 1587\n          //   behaviors so we pass these through as true                                                              // 1588\n                                                                                                                       // 1589\n          // Interestingly, opera fails the earlier test, so it doesn't                                                // 1590\n          //  even make it here.                                                                                       // 1591\n                                                                                                                       // 1592\n        } else if ( /^(url|email|number)$/.test(inputElemType) ) {                                                     // 1593\n          // Real url and email support comes with prebaked validation.                                                // 1594\n          bool = inputElem.checkValidity && inputElem.checkValidity() === false;                                       // 1595\n                                                                                                                       // 1596\n        } else {                                                                                                       // 1597\n          // If the upgraded input compontent rejects the :) text, we got a winner                                     // 1598\n          bool = inputElem.value != smile;                                                                             // 1599\n        }                                                                                                              // 1600\n      }                                                                                                                // 1601\n                                                                                                                       // 1602\n      inputs[ props[i] ] = !!bool;                                                                                     // 1603\n    }                                                                                                                  // 1604\n    return inputs;                                                                                                     // 1605\n  })(inputtypes);                                                                                                      // 1606\n                                                                                                                       // 1607\n                                                                                                                       // 1608\n  var attrs = {};                                                                                                      // 1609\n                                                                                                                       // 1610\n                                                                                                                       // 1611\n  var inputattrs = 'autocomplete autofocus list placeholder max min multiple pattern required step'.split(' ');        // 1612\n                                                                                                                       // 1613\n/*!                                                                                                                    // 1614\n{                                                                                                                      // 1615\n  \"name\": \"Input attributes\",                                                                                          // 1616\n  \"property\": \"input\",                                                                                                 // 1617\n  \"tags\": [\"forms\"],                                                                                                   // 1618\n  \"authors\": [\"Mike Taylor\"],                                                                                          // 1619\n  \"notes\": [{                                                                                                          // 1620\n    \"name\": \"WHATWG spec\",                                                                                             // 1621\n    \"href\": \"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary\"\n  }],                                                                                                                  // 1623\n  \"knownBugs\": [\"Some blackberry devices report false positive for input.multiple\"]                                    // 1624\n}                                                                                                                      // 1625\n!*/                                                                                                                    // 1626\n/* DOC                                                                                                                 // 1627\nDetects support for HTML5 `<input>` element attributes and exposes Boolean subproperties with the results:             // 1628\n                                                                                                                       // 1629\n```javascript                                                                                                          // 1630\nModernizr.input.autocomplete                                                                                           // 1631\nModernizr.input.autofocus                                                                                              // 1632\nModernizr.input.list                                                                                                   // 1633\nModernizr.input.max                                                                                                    // 1634\nModernizr.input.min                                                                                                    // 1635\nModernizr.input.multiple                                                                                               // 1636\nModernizr.input.pattern                                                                                                // 1637\nModernizr.input.placeholder                                                                                            // 1638\nModernizr.input.required                                                                                               // 1639\nModernizr.input.step                                                                                                   // 1640\n```                                                                                                                    // 1641\n*/                                                                                                                     // 1642\n                                                                                                                       // 1643\n  // Run through HTML5's new input attributes to see if the UA understands any.                                        // 1644\n  // Mike Taylr has created a comprehensive resource for testing these attributes                                      // 1645\n  //   when applied to all input types:                                                                                // 1646\n  //   miketaylr.com/code/input-type-attr.html                                                                         // 1647\n                                                                                                                       // 1648\n  // Only input placeholder is tested while textarea's placeholder is not.                                             // 1649\n  // Currently Safari 4 and Opera 11 have support only for the input placeholder                                       // 1650\n  // Both tests are available in feature-detects/forms-placeholder.js                                                  // 1651\n  Modernizr['input'] = (function( props ) {                                                                            // 1652\n    for ( var i = 0, len = props.length; i < len; i++ ) {                                                              // 1653\n      attrs[ props[i] ] = !!(props[i] in inputElem);                                                                   // 1654\n    }                                                                                                                  // 1655\n    if (attrs.list){                                                                                                   // 1656\n      // safari false positive's on datalist: webk.it/74252                                                            // 1657\n      // see also github.com/Modernizr/Modernizr/issues/146                                                            // 1658\n      attrs.list = !!(createElement('datalist') && window.HTMLDataListElement);                                        // 1659\n    }                                                                                                                  // 1660\n    return attrs;                                                                                                      // 1661\n  })(inputattrs);                                                                                                      // 1662\n                                                                                                                       // 1663\n                                                                                                                       // 1664\n  var toStringFn = ({}).toString;                                                                                      // 1665\n                                                                                                                       // 1666\n/*!                                                                                                                    // 1667\n{                                                                                                                      // 1668\n  \"name\": \"SVG clip paths\",                                                                                            // 1669\n  \"property\": \"svgclippaths\",                                                                                          // 1670\n  \"tags\": [\"svg\"],                                                                                                     // 1671\n  \"notes\": [{                                                                                                          // 1672\n    \"name\": \"Demo\",                                                                                                    // 1673\n    \"href\": \"http://srufaculty.sru.edu/david.dailey/svg/newstuff/clipPath4.svg\"                                        // 1674\n  }]                                                                                                                   // 1675\n}                                                                                                                      // 1676\n!*/                                                                                                                    // 1677\n/* DOC                                                                                                                 // 1678\nDetects support for clip paths in SVG (only, not on HTML content).                                                     // 1679\n                                                                                                                       // 1680\nSee [this discussion](http://github.com/Modernizr/Modernizr/issues/213) regarding applying SVG clip paths to HTML content.\n*/                                                                                                                     // 1682\n                                                                                                                       // 1683\n  Modernizr.addTest('svgclippaths', function() {                                                                       // 1684\n    return !!document.createElementNS &&                                                                               // 1685\n      /SVGClipPath/.test(toStringFn.call(document.createElementNS('http://www.w3.org/2000/svg', 'clipPath')));         // 1686\n  });                                                                                                                  // 1687\n                                                                                                                       // 1688\n/*!                                                                                                                    // 1689\n{                                                                                                                      // 1690\n  \"name\": \"SVG SMIL animation\",                                                                                        // 1691\n  \"property\": \"smil\",                                                                                                  // 1692\n  \"caniuse\": \"svg-smil\",                                                                                               // 1693\n  \"tags\": [\"svg\"],                                                                                                     // 1694\n  \"notes\": [{                                                                                                          // 1695\n  \"name\": \"W3C Synchronised Multimedia spec\",                                                                          // 1696\n  \"href\": \"http://www.w3.org/AudioVideo/\"                                                                              // 1697\n  }]                                                                                                                   // 1698\n}                                                                                                                      // 1699\n!*/                                                                                                                    // 1700\n                                                                                                                       // 1701\n  // SVG SMIL animation                                                                                                // 1702\n  Modernizr.addTest('smil', function() {                                                                               // 1703\n    return !!document.createElementNS &&                                                                               // 1704\n      /SVGAnimate/.test(toStringFn.call(document.createElementNS('http://www.w3.org/2000/svg', 'animate')));           // 1705\n  });                                                                                                                  // 1706\n                                                                                                                       // 1707\n                                                                                                                       // 1708\n  var cssomPrefixes = (ModernizrProto._config.usePrefixes ? omPrefixes.split(' ') : []);                               // 1709\n  ModernizrProto._cssomPrefixes = cssomPrefixes;                                                                       // 1710\n                                                                                                                       // 1711\n                                                                                                                       // 1712\n  function getBody() {                                                                                                 // 1713\n    // After page load injecting a fake body doesn't work so check if body exists                                      // 1714\n    var body = document.body;                                                                                          // 1715\n                                                                                                                       // 1716\n    if(!body) {                                                                                                        // 1717\n      // Can't use the real body create a fake one.                                                                    // 1718\n      body = createElement('body');                                                                                    // 1719\n      body.fake = true;                                                                                                // 1720\n    }                                                                                                                  // 1721\n                                                                                                                       // 1722\n    return body;                                                                                                       // 1723\n  }                                                                                                                    // 1724\n                                                                                                                       // 1725\n  ;                                                                                                                    // 1726\n                                                                                                                       // 1727\n  // Inject element with style element and some CSS rules                                                              // 1728\n  function injectElementWithStyles( rule, callback, nodes, testnames ) {                                               // 1729\n    var mod = 'modernizr';                                                                                             // 1730\n    var style;                                                                                                         // 1731\n    var ret;                                                                                                           // 1732\n    var node;                                                                                                          // 1733\n    var docOverflow;                                                                                                   // 1734\n    var div = createElement('div');                                                                                    // 1735\n    var body = getBody();                                                                                              // 1736\n                                                                                                                       // 1737\n    if ( parseInt(nodes, 10) ) {                                                                                       // 1738\n      // In order not to give false positives we create a node for each test                                           // 1739\n      // This also allows the method to scale for unspecified uses                                                     // 1740\n      while ( nodes-- ) {                                                                                              // 1741\n        node = createElement('div');                                                                                   // 1742\n        node.id = testnames ? testnames[nodes] : mod + (nodes + 1);                                                    // 1743\n        div.appendChild(node);                                                                                         // 1744\n      }                                                                                                                // 1745\n    }                                                                                                                  // 1746\n                                                                                                                       // 1747\n    // <style> elements in IE6-9 are considered 'NoScope' elements and therefore will be removed                       // 1748\n    // when injected with innerHTML. To get around this you need to prepend the 'NoScope' element                      // 1749\n    // with a 'scoped' element, in our case the soft-hyphen entity as it won't mess with our measurements.             // 1750\n    // msdn.microsoft.com/en-us/library/ms533897%28VS.85%29.aspx                                                       // 1751\n    // Documents served as xml will throw if using &shy; so use xml friendly encoded version. See issue #277           // 1752\n    style = ['&#173;','<style id=\"s', mod, '\">', rule, '</style>'].join('');                                           // 1753\n    div.id = mod;                                                                                                      // 1754\n    // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.\n    // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270\n    (!body.fake ? div : body).innerHTML += style;                                                                      // 1757\n    body.appendChild(div);                                                                                             // 1758\n    if ( body.fake ) {                                                                                                 // 1759\n      //avoid crashing IE8, if background image is used                                                                // 1760\n      body.style.background = '';                                                                                      // 1761\n      //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible                  // 1762\n      body.style.overflow = 'hidden';                                                                                  // 1763\n      docOverflow = docElement.style.overflow;                                                                         // 1764\n      docElement.style.overflow = 'hidden';                                                                            // 1765\n      docElement.appendChild(body);                                                                                    // 1766\n    }                                                                                                                  // 1767\n                                                                                                                       // 1768\n    ret = callback(div, rule);                                                                                         // 1769\n    // If this is done after page load we don't want to remove the body so check if body exists                        // 1770\n    if ( body.fake ) {                                                                                                 // 1771\n      body.parentNode.removeChild(body);                                                                               // 1772\n      docElement.style.overflow = docOverflow;                                                                         // 1773\n      // Trigger layout so kinetic scrolling isn't disabled in iOS6+                                                   // 1774\n      docElement.offsetHeight;                                                                                         // 1775\n    } else {                                                                                                           // 1776\n      div.parentNode.removeChild(div);                                                                                 // 1777\n    }                                                                                                                  // 1778\n                                                                                                                       // 1779\n    return !!ret;                                                                                                      // 1780\n                                                                                                                       // 1781\n  }                                                                                                                    // 1782\n                                                                                                                       // 1783\n  ;                                                                                                                    // 1784\n                                                                                                                       // 1785\n  var testStyles = ModernizrProto.testStyles = injectElementWithStyles;                                                // 1786\n                                                                                                                       // 1787\n/*!                                                                                                                    // 1788\n{                                                                                                                      // 1789\n  \"name\": \"@font-face\",                                                                                                // 1790\n  \"property\": \"fontface\",                                                                                              // 1791\n  \"authors\": [\"Diego Perini\", \"Mat Marquis\"],                                                                          // 1792\n  \"tags\": [\"css\"],                                                                                                     // 1793\n  \"knownBugs\": [                                                                                                       // 1794\n    \"False Positive: WebOS http://github.com/Modernizr/Modernizr/issues/342\",                                          // 1795\n    \"False Postive: WP7 http://github.com/Modernizr/Modernizr/issues/538\"                                              // 1796\n  ],                                                                                                                   // 1797\n  \"notes\": [{                                                                                                          // 1798\n    \"name\": \"@font-face detection routine by Diego Perini\",                                                            // 1799\n    \"href\": \"http://javascript.nwbox.com/CSSSupport/\"                                                                  // 1800\n  },{                                                                                                                  // 1801\n    \"name\": \"Filament Group @font-face compatibility research\",                                                        // 1802\n    \"href\": \"https://docs.google.com/presentation/d/1n4NyG4uPRjAA8zn_pSQ_Ket0RhcWC6QlZ6LMjKeECo0/edit#slide=id.p\"      // 1803\n  },{                                                                                                                  // 1804\n    \"name\": \"Filament Grunticon/@font-face device testing results\",                                                    // 1805\n    \"href\": \"https://docs.google.com/spreadsheet/ccc?key=0Ag5_yGvxpINRdHFYeUJPNnZMWUZKR2ItMEpRTXZPdUE#gid=0\"           // 1806\n  },{                                                                                                                  // 1807\n    \"name\": \"CSS fonts on Android\",                                                                                    // 1808\n    \"href\": \"http://stackoverflow.com/questions/3200069/css-fonts-on-android\"                                          // 1809\n  },{                                                                                                                  // 1810\n    \"name\": \"@font-face and Android\",                                                                                  // 1811\n    \"href\": \"http://archivist.incutio.com/viewlist/css-discuss/115960\"                                                 // 1812\n  }]                                                                                                                   // 1813\n}                                                                                                                      // 1814\n!*/                                                                                                                    // 1815\n                                                                                                                       // 1816\n  var blacklist = (function() {                                                                                        // 1817\n    var ua = navigator.userAgent;                                                                                      // 1818\n    var wkvers = ua.match( /applewebkit\\/([0-9]+)/gi ) && parseFloat( RegExp.$1 );                                     // 1819\n    var webos = ua.match( /w(eb)?osbrowser/gi );                                                                       // 1820\n    var wppre8 = ua.match( /windows phone/gi ) && ua.match( /iemobile\\/([0-9])+/gi ) && parseFloat( RegExp.$1 ) >= 9;  // 1821\n    var oldandroid = wkvers < 533 && ua.match( /android/gi );                                                          // 1822\n    return webos || oldandroid || wppre8;                                                                              // 1823\n  }());                                                                                                                // 1824\n  if( blacklist ) {                                                                                                    // 1825\n    Modernizr.addTest('fontface', false);                                                                              // 1826\n  } else {                                                                                                             // 1827\n    testStyles('@font-face {font-family:\"font\";src:url(\"https://\")}', function( node, rule ) {                         // 1828\n      var style = document.getElementById('smodernizr');                                                               // 1829\n      var sheet = style.sheet || style.styleSheet;                                                                     // 1830\n      var cssText = sheet ? (sheet.cssRules && sheet.cssRules[0] ? sheet.cssRules[0].cssText : sheet.cssText || '') : '';\n      var bool = /src/i.test(cssText) && cssText.indexOf(rule.split(' ')[0]) === 0;                                    // 1832\n      Modernizr.addTest('fontface', bool);                                                                             // 1833\n    });                                                                                                                // 1834\n  }                                                                                                                    // 1835\n;                                                                                                                      // 1836\n/*!                                                                                                                    // 1837\n{                                                                                                                      // 1838\n  \"name\": \"CSS Generated Content\",                                                                                     // 1839\n  \"property\": \"generatedcontent\",                                                                                      // 1840\n  \"tags\": [\"css\"],                                                                                                     // 1841\n  \"warnings\": [\"Android won't return correct height for anything below 7px #738\"]                                      // 1842\n}                                                                                                                      // 1843\n!*/                                                                                                                    // 1844\n                                                                                                                       // 1845\n  testStyles('#modernizr{font:0/0 a}#modernizr:after{content:\":)\";visibility:hidden;font:7px/1 a}', function( node ) { // 1846\n    Modernizr.addTest('generatedcontent', node.offsetHeight >= 7);                                                     // 1847\n  });                                                                                                                  // 1848\n                                                                                                                       // 1849\n                                                                                                                       // 1850\n  // Change the function's scope.                                                                                      // 1851\n  function fnBind(fn, that) {                                                                                          // 1852\n    return function() {                                                                                                // 1853\n      return fn.apply(that, arguments);                                                                                // 1854\n    };                                                                                                                 // 1855\n  }                                                                                                                    // 1856\n                                                                                                                       // 1857\n  ;                                                                                                                    // 1858\n                                                                                                                       // 1859\n  /**                                                                                                                  // 1860\n   * testDOMProps is a generic DOM property test; if a browser supports                                                // 1861\n   *   a certain property, it won't return undefined for it.                                                           // 1862\n   */                                                                                                                  // 1863\n  function testDOMProps( props, obj, elem ) {                                                                          // 1864\n    var item;                                                                                                          // 1865\n                                                                                                                       // 1866\n    for ( var i in props ) {                                                                                           // 1867\n      if ( props[i] in obj ) {                                                                                         // 1868\n                                                                                                                       // 1869\n        // return the property name as a string                                                                        // 1870\n        if (elem === false) return props[i];                                                                           // 1871\n                                                                                                                       // 1872\n        item = obj[props[i]];                                                                                          // 1873\n                                                                                                                       // 1874\n        // let's bind a function                                                                                       // 1875\n        if (is(item, 'function')) {                                                                                    // 1876\n          // bind to obj unless overriden                                                                              // 1877\n          return fnBind(item, elem || obj);                                                                            // 1878\n        }                                                                                                              // 1879\n                                                                                                                       // 1880\n        // return the unbound function or obj or value                                                                 // 1881\n        return item;                                                                                                   // 1882\n      }                                                                                                                // 1883\n    }                                                                                                                  // 1884\n    return false;                                                                                                      // 1885\n  }                                                                                                                    // 1886\n                                                                                                                       // 1887\n  ;                                                                                                                    // 1888\n                                                                                                                       // 1889\n  /**                                                                                                                  // 1890\n   * Create our \"modernizr\" element that we do most feature tests on.                                                  // 1891\n   */                                                                                                                  // 1892\n  var modElem = {                                                                                                      // 1893\n    elem : createElement('modernizr')                                                                                  // 1894\n  };                                                                                                                   // 1895\n                                                                                                                       // 1896\n  // Clean up this element                                                                                             // 1897\n  Modernizr._q.push(function() {                                                                                       // 1898\n    delete modElem.elem;                                                                                               // 1899\n  });                                                                                                                  // 1900\n                                                                                                                       // 1901\n                                                                                                                       // 1902\n                                                                                                                       // 1903\n  var mStyle = {                                                                                                       // 1904\n    style : modElem.elem.style                                                                                         // 1905\n  };                                                                                                                   // 1906\n                                                                                                                       // 1907\n  // kill ref for gc, must happen before                                                                               // 1908\n  // mod.elem is removed, so we unshift on to                                                                          // 1909\n  // the front of the queue.                                                                                           // 1910\n  Modernizr._q.unshift(function() {                                                                                    // 1911\n    delete mStyle.style;                                                                                               // 1912\n  });                                                                                                                  // 1913\n                                                                                                                       // 1914\n                                                                                                                       // 1915\n                                                                                                                       // 1916\n  // Helper function for converting camelCase to kebab-case,                                                           // 1917\n  // e.g. boxSizing -> box-sizing                                                                                      // 1918\n  function domToCSS( name ) {                                                                                          // 1919\n    return name.replace(/([A-Z])/g, function(str, m1) {                                                                // 1920\n      return '-' + m1.toLowerCase();                                                                                   // 1921\n    }).replace(/^ms-/, '-ms-');                                                                                        // 1922\n  }                                                                                                                    // 1923\n  ;                                                                                                                    // 1924\n                                                                                                                       // 1925\n  // Function to allow us to use native feature detection functionality if available.                                  // 1926\n  // Accepts a list of property names and a single value                                                               // 1927\n  // Returns `undefined` if native detection not available                                                             // 1928\n  function nativeTestProps ( props, value ) {                                                                          // 1929\n    var i = props.length;                                                                                              // 1930\n    // Start with the JS API: http://www.w3.org/TR/css3-conditional/#the-css-interface                                 // 1931\n    if ('CSS' in window && 'supports' in window.CSS) {                                                                 // 1932\n      // Try every prefixed variant of the property                                                                    // 1933\n      while (i--) {                                                                                                    // 1934\n        if (window.CSS.supports(domToCSS(props[i]), value)) {                                                          // 1935\n          return true;                                                                                                 // 1936\n        }                                                                                                              // 1937\n      }                                                                                                                // 1938\n      return false;                                                                                                    // 1939\n    }                                                                                                                  // 1940\n    // Otherwise fall back to at-rule (for FF 17 and Opera 12.x)                                                       // 1941\n    else if ('CSSSupportsRule' in window) {                                                                            // 1942\n      // Build a condition string for every prefixed variant                                                           // 1943\n      var conditionText = [];                                                                                          // 1944\n      while (i--) {                                                                                                    // 1945\n        conditionText.push('(' + domToCSS(props[i]) + ':' + value + ')');                                              // 1946\n      }                                                                                                                // 1947\n      conditionText = conditionText.join(' or ');                                                                      // 1948\n      return injectElementWithStyles('@supports (' + conditionText + ') { #modernizr { position: absolute; } }', function( node ) {\n        return (window.getComputedStyle ?                                                                              // 1950\n                getComputedStyle(node, null) :                                                                         // 1951\n                node.currentStyle)['position'] == 'absolute';                                                          // 1952\n      });                                                                                                              // 1953\n    }                                                                                                                  // 1954\n    return undefined;                                                                                                  // 1955\n  }                                                                                                                    // 1956\n  ;                                                                                                                    // 1957\n                                                                                                                       // 1958\n  // testProps is a generic CSS / DOM property test.                                                                   // 1959\n                                                                                                                       // 1960\n  // In testing support for a given CSS property, it's legit to test:                                                  // 1961\n  //    `elem.style[styleName] !== undefined`                                                                          // 1962\n  // If the property is supported it will return an empty string,                                                      // 1963\n  // if unsupported it will return undefined.                                                                          // 1964\n                                                                                                                       // 1965\n  // We'll take advantage of this quick test and skip setting a style                                                  // 1966\n  // on our modernizr element, but instead just testing undefined vs                                                   // 1967\n  // empty string.                                                                                                     // 1968\n                                                                                                                       // 1969\n  // Property names can be provided in either camelCase or kebab-case.                                                 // 1970\n                                                                                                                       // 1971\n  function testProps( props, prefixed, value, skipValueTest ) {                                                        // 1972\n    skipValueTest = is(skipValueTest, 'undefined') ? false : skipValueTest;                                            // 1973\n                                                                                                                       // 1974\n    // Try native detect first                                                                                         // 1975\n    if (!is(value, 'undefined')) {                                                                                     // 1976\n      var result = nativeTestProps(props, value);                                                                      // 1977\n      if(!is(result, 'undefined')) {                                                                                   // 1978\n        return result;                                                                                                 // 1979\n      }                                                                                                                // 1980\n    }                                                                                                                  // 1981\n                                                                                                                       // 1982\n    // Otherwise do it properly                                                                                        // 1983\n    var afterInit, i, propsLength, prop, before;                                                                       // 1984\n                                                                                                                       // 1985\n    // If we don't have a style element, that means                                                                    // 1986\n    // we're running async or after the core tests,                                                                    // 1987\n    // so we'll need to create our own elements to use                                                                 // 1988\n    if ( !mStyle.style ) {                                                                                             // 1989\n      afterInit = true;                                                                                                // 1990\n      mStyle.modElem = createElement('modernizr');                                                                     // 1991\n      mStyle.style = mStyle.modElem.style;                                                                             // 1992\n    }                                                                                                                  // 1993\n                                                                                                                       // 1994\n    // Delete the objects if we                                                                                        // 1995\n    // we created them.                                                                                                // 1996\n    function cleanElems() {                                                                                            // 1997\n      if (afterInit) {                                                                                                 // 1998\n        delete mStyle.style;                                                                                           // 1999\n        delete mStyle.modElem;                                                                                         // 2000\n      }                                                                                                                // 2001\n    }                                                                                                                  // 2002\n                                                                                                                       // 2003\n    propsLength = props.length;                                                                                        // 2004\n    for ( i = 0; i < propsLength; i++ ) {                                                                              // 2005\n      prop = props[i];                                                                                                 // 2006\n      before = mStyle.style[prop];                                                                                     // 2007\n                                                                                                                       // 2008\n      if (contains(prop, '-')) {                                                                                       // 2009\n        prop = cssToDOM(prop);                                                                                         // 2010\n      }                                                                                                                // 2011\n                                                                                                                       // 2012\n      if ( mStyle.style[prop] !== undefined ) {                                                                        // 2013\n                                                                                                                       // 2014\n        // If value to test has been passed in, do a set-and-check test.                                               // 2015\n        // 0 (integer) is a valid property value, so check that `value` isn't                                          // 2016\n        // undefined, rather than just checking it's truthy.                                                           // 2017\n        if (!skipValueTest && !is(value, 'undefined')) {                                                               // 2018\n                                                                                                                       // 2019\n          // Needs a try catch block because of old IE. This is slow, but will                                         // 2020\n          // be avoided in most cases because `skipValueTest` will be used.                                            // 2021\n          try {                                                                                                        // 2022\n            mStyle.style[prop] = value;                                                                                // 2023\n          } catch (e) {}                                                                                               // 2024\n                                                                                                                       // 2025\n          // If the property value has changed, we assume the value used is                                            // 2026\n          // supported. If `value` is empty string, it'll fail here (because                                           // 2027\n          // it hasn't changed), which matches how browsers have implemented                                           // 2028\n          // CSS.supports()                                                                                            // 2029\n          if (mStyle.style[prop] != before) {                                                                          // 2030\n            cleanElems();                                                                                              // 2031\n            return prefixed == 'pfx' ? prop : true;                                                                    // 2032\n          }                                                                                                            // 2033\n        }                                                                                                              // 2034\n        // Otherwise just return true, or the property name if this is a                                               // 2035\n        // `prefixed()` call                                                                                           // 2036\n        else {                                                                                                         // 2037\n          cleanElems();                                                                                                // 2038\n          return prefixed == 'pfx' ? prop : true;                                                                      // 2039\n        }                                                                                                              // 2040\n      }                                                                                                                // 2041\n    }                                                                                                                  // 2042\n    cleanElems();                                                                                                      // 2043\n    return false;                                                                                                      // 2044\n  }                                                                                                                    // 2045\n                                                                                                                       // 2046\n  ;                                                                                                                    // 2047\n                                                                                                                       // 2048\n  // Modernizr.testProp() investigates whether a given style property is recognized                                    // 2049\n  // Property names can be provided in either camelCase or kebab-case.                                                 // 2050\n  // Modernizr.testProp('pointerEvents')                                                                               // 2051\n  // Also accepts optional 2nd arg, of a value to use for native feature detection, e.g.:                              // 2052\n  // Modernizr.testProp('pointerEvents', 'none')                                                                       // 2053\n  var testProp = ModernizrProto.testProp = function( prop, value, useValue ) {                                         // 2054\n    return testProps([prop], undefined, value, useValue);                                                              // 2055\n  };                                                                                                                   // 2056\n                                                                                                                       // 2057\n/*!                                                                                                                    // 2058\n{                                                                                                                      // 2059\n  \"name\": \"CSS textshadow\",                                                                                            // 2060\n  \"property\": \"textshadow\",                                                                                            // 2061\n  \"caniuse\": \"css-textshadow\",                                                                                         // 2062\n  \"tags\": [\"css\"],                                                                                                     // 2063\n  \"knownBugs\": [\"FF3.0 will false positive on this test\"]                                                              // 2064\n}                                                                                                                      // 2065\n!*/                                                                                                                    // 2066\n                                                                                                                       // 2067\n  Modernizr.addTest('textshadow', testProp('textShadow', '1px 1px'));                                                  // 2068\n                                                                                                                       // 2069\n                                                                                                                       // 2070\n  /**                                                                                                                  // 2071\n   * testPropsAll tests a list of DOM properties we want to check against.                                             // 2072\n   *     We specify literally ALL possible (known and/or likely) properties on                                         // 2073\n   *     the element including the non-vendor prefixed one, for forward-                                               // 2074\n   *     compatibility.                                                                                                // 2075\n   */                                                                                                                  // 2076\n  function testPropsAll( prop, prefixed, elem, value, skipValueTest ) {                                                // 2077\n                                                                                                                       // 2078\n    var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1),                                                         // 2079\n    props = (prop + ' ' + cssomPrefixes.join(ucProp + ' ') + ucProp).split(' ');                                       // 2080\n                                                                                                                       // 2081\n    // did they call .prefixed('boxSizing') or are we just testing a prop?                                             // 2082\n    if(is(prefixed, 'string') || is(prefixed, 'undefined')) {                                                          // 2083\n      return testProps(props, prefixed, value, skipValueTest);                                                         // 2084\n                                                                                                                       // 2085\n      // otherwise, they called .prefixed('requestAnimationFrame', window[, elem])                                     // 2086\n    } else {                                                                                                           // 2087\n      props = (prop + ' ' + (domPrefixes).join(ucProp + ' ') + ucProp).split(' ');                                     // 2088\n      return testDOMProps(props, prefixed, elem);                                                                      // 2089\n    }                                                                                                                  // 2090\n  }                                                                                                                    // 2091\n                                                                                                                       // 2092\n  // Modernizr.testAllProps() investigates whether a given style property,                                             // 2093\n  //     or any of its vendor-prefixed variants, is recognized                                                         // 2094\n  // Note that the property names must be provided in the camelCase variant.                                           // 2095\n  // Modernizr.testAllProps('boxSizing')                                                                               // 2096\n  ModernizrProto.testAllProps = testPropsAll;                                                                          // 2097\n                                                                                                                       // 2098\n                                                                                                                       // 2099\n                                                                                                                       // 2100\n  // Modernizr.prefixed() returns the prefixed or nonprefixed property name variant of your input                      // 2101\n  // Modernizr.prefixed('boxSizing') // 'MozBoxSizing'                                                                 // 2102\n                                                                                                                       // 2103\n  // Properties can be passed as DOM-style camelCase or CSS-style kebab-case.                                          // 2104\n  // Return values will always be in camelCase; if you want kebab-case, use Modernizr.prefixedCSS().                   // 2105\n                                                                                                                       // 2106\n  // If you're trying to ascertain which transition end event to bind to, you might do something like...               // 2107\n  //                                                                                                                   // 2108\n  //     var transEndEventNames = {                                                                                    // 2109\n  //         'WebkitTransition' : 'webkitTransitionEnd',// Saf 6, Android Browser                                      // 2110\n  //         'MozTransition'    : 'transitionend',      // only for FF < 15                                            // 2111\n  //         'transition'       : 'transitionend'       // IE10, Opera, Chrome, FF 15+, Saf 7+                         // 2112\n  //     },                                                                                                            // 2113\n  //     transEndEventName = transEndEventNames[ Modernizr.prefixed('transition') ];                                   // 2114\n                                                                                                                       // 2115\n  var prefixed = ModernizrProto.prefixed = function( prop, obj, elem ) {                                               // 2116\n    if (prop.indexOf('@') === 0) {                                                                                     // 2117\n      return atRule(prop);                                                                                             // 2118\n    }                                                                                                                  // 2119\n                                                                                                                       // 2120\n    if (prop.indexOf('-') != -1) {                                                                                     // 2121\n      // Convert kebab-case to camelCase                                                                               // 2122\n      prop = cssToDOM(prop);                                                                                           // 2123\n    }                                                                                                                  // 2124\n    if (!obj) {                                                                                                        // 2125\n      return testPropsAll(prop, 'pfx');                                                                                // 2126\n    } else {                                                                                                           // 2127\n      // Testing DOM property e.g. Modernizr.prefixed('requestAnimationFrame', window) // 'mozRequestAnimationFrame'   // 2128\n      return testPropsAll(prop, obj, elem);                                                                            // 2129\n    }                                                                                                                  // 2130\n  };                                                                                                                   // 2131\n                                                                                                                       // 2132\n                                                                                                                       // 2133\n/*!                                                                                                                    // 2134\n{                                                                                                                      // 2135\n  \"name\": \"IndexedDB\",                                                                                                 // 2136\n  \"property\": \"indexeddb\",                                                                                             // 2137\n  \"caniuse\": \"indexeddb\",                                                                                              // 2138\n  \"tags\": [\"storage\"],                                                                                                 // 2139\n  \"polyfills\": [\"indexeddb\"]                                                                                           // 2140\n}                                                                                                                      // 2141\n!*/                                                                                                                    // 2142\n/* DOC                                                                                                                 // 2143\nDetects support for the IndexedDB client-side storage API (final spec).                                                // 2144\n*/                                                                                                                     // 2145\n                                                                                                                       // 2146\n  // Vendors had inconsistent prefixing with the experimental Indexed DB:                                              // 2147\n  // - Webkit's implementation is accessible through webkitIndexedDB                                                   // 2148\n  // - Firefox shipped moz_indexedDB before FF4b9, but since then has been mozIndexedDB                                // 2149\n  // For speed, we don't test the legacy (and beta-only) indexedDB                                                     // 2150\n                                                                                                                       // 2151\n  var indexeddb = prefixed('indexedDB', window);                                                                       // 2152\n  Modernizr.addTest('indexeddb', !!indexeddb);                                                                         // 2153\n                                                                                                                       // 2154\n  if (!!indexeddb) {                                                                                                   // 2155\n    Modernizr.addTest('indexeddb.deletedatabase', 'deleteDatabase' in indexeddb);                                      // 2156\n  }                                                                                                                    // 2157\n;                                                                                                                      // 2158\n                                                                                                                       // 2159\n  /**                                                                                                                  // 2160\n   * testAllProps determines whether a given CSS property, in some prefixed                                            // 2161\n   * form, is supported by the browser. It can optionally be given a value; in                                         // 2162\n   * which case testAllProps will only return true if the browser supports that                                        // 2163\n   * value for the named property; this latter case will use native detection                                          // 2164\n   * (via window.CSS.supports) if available. A boolean can be passed as a 3rd                                          // 2165\n   * parameter to skip the value check when native detection isn't available,                                          // 2166\n   * to improve performance when simply testing for support of a property.                                             // 2167\n   *                                                                                                                   // 2168\n   * @param prop - String naming the property to test (either camelCase or                                             // 2169\n   *               kebab-case)                                                                                         // 2170\n   * @param value - [optional] String of the value to test                                                             // 2171\n   * @param skipValueTest - [optional] Whether to skip testing that the value                                          // 2172\n   *                        is supported when using non-native detection                                               // 2173\n   *                        (default: false)                                                                           // 2174\n   */                                                                                                                  // 2175\n  function testAllProps (prop, value, skipValueTest) {                                                                 // 2176\n    return testPropsAll(prop, undefined, undefined, value, skipValueTest);                                             // 2177\n  }                                                                                                                    // 2178\n  ModernizrProto.testAllProps = testAllProps;                                                                          // 2179\n                                                                                                                       // 2180\n/*!                                                                                                                    // 2181\n{                                                                                                                      // 2182\n  \"name\": \"Background Size\",                                                                                           // 2183\n  \"property\": \"backgroundsize\",                                                                                        // 2184\n  \"tags\": [\"css\"],                                                                                                     // 2185\n  \"knownBugs\": [\"This will false positive in Opera Mini - http://github.com/Modernizr/Modernizr/issues/396\"],          // 2186\n  \"notes\": [{                                                                                                          // 2187\n    \"name\": \"Related Issue\",                                                                                           // 2188\n    \"href\": \"http://github.com/Modernizr/Modernizr/issues/396\"                                                         // 2189\n  }]                                                                                                                   // 2190\n}                                                                                                                      // 2191\n!*/                                                                                                                    // 2192\n                                                                                                                       // 2193\n  Modernizr.addTest('backgroundsize', testAllProps('backgroundSize', '100%', true));                                   // 2194\n                                                                                                                       // 2195\n/*!                                                                                                                    // 2196\n{                                                                                                                      // 2197\n  \"name\": \"Border Image\",                                                                                              // 2198\n  \"property\": \"borderimage\",                                                                                           // 2199\n  \"caniuse\": \"border-image\",                                                                                           // 2200\n  \"polyfills\": [\"css3pie\"],                                                                                            // 2201\n   \"knownBugs\": [\"Android < 2.0 is true, but has a broken implementation\"],                                            // 2202\n  \"tags\": [\"css\"]                                                                                                      // 2203\n}                                                                                                                      // 2204\n!*/                                                                                                                    // 2205\n                                                                                                                       // 2206\n  Modernizr.addTest('borderimage', testAllProps('borderImage', 'url() 1', true));                                      // 2207\n                                                                                                                       // 2208\n/*!                                                                                                                    // 2209\n{                                                                                                                      // 2210\n  \"name\": \"Border Radius\",                                                                                             // 2211\n  \"property\": \"borderradius\",                                                                                          // 2212\n  \"caniuse\": \"border-radius\",                                                                                          // 2213\n  \"polyfills\": [\"css3pie\"],                                                                                            // 2214\n  \"tags\": [\"css\"],                                                                                                     // 2215\n  \"notes\": [{                                                                                                          // 2216\n    \"name\": \"Comprehensive Compat Chart\",                                                                              // 2217\n    \"href\": \"http://muddledramblings.com/table-of-css3-border-radius-compliance\"                                       // 2218\n  }]                                                                                                                   // 2219\n}                                                                                                                      // 2220\n!*/                                                                                                                    // 2221\n                                                                                                                       // 2222\n  Modernizr.addTest('borderradius', testAllProps('borderRadius', '0px', true));                                        // 2223\n                                                                                                                       // 2224\n/*!                                                                                                                    // 2225\n{                                                                                                                      // 2226\n  \"name\": \"Box Shadow\",                                                                                                // 2227\n  \"property\": \"boxshadow\",                                                                                             // 2228\n  \"caniuse\": \"css-boxshadow\",                                                                                          // 2229\n  \"tags\": [\"css\"],                                                                                                     // 2230\n  \"knownBugs\": [                                                                                                       // 2231\n    \"WebOS false positives on this test.\",                                                                             // 2232\n    \"The Kindle Silk browser false positives\"                                                                          // 2233\n  ]                                                                                                                    // 2234\n}                                                                                                                      // 2235\n!*/                                                                                                                    // 2236\n                                                                                                                       // 2237\n  Modernizr.addTest('boxshadow', testAllProps('boxShadow', '1px 1px', true));                                          // 2238\n                                                                                                                       // 2239\n/*!                                                                                                                    // 2240\n{                                                                                                                      // 2241\n  \"name\": \"CSS Animations\",                                                                                            // 2242\n  \"property\": \"cssanimations\",                                                                                         // 2243\n  \"caniuse\": \"css-animation\",                                                                                          // 2244\n  \"polyfills\": [\"transformie\", \"csssandpaper\"],                                                                        // 2245\n  \"tags\": [\"css\"],                                                                                                     // 2246\n  \"warnings\": [\"Android < 4 will pass this test, but can only animate a single property at a time\"],                   // 2247\n  \"notes\": [{                                                                                                          // 2248\n    \"name\" : \"Article: 'Dispelling the Android CSS animation myths'\",                                                  // 2249\n    \"href\": \"http://goo.gl/OGw5Gm\"                                                                                     // 2250\n  }]                                                                                                                   // 2251\n}                                                                                                                      // 2252\n!*/                                                                                                                    // 2253\n/* DOC                                                                                                                 // 2254\nDetects whether or not elements can be animated using CSS                                                              // 2255\n*/                                                                                                                     // 2256\n                                                                                                                       // 2257\n  Modernizr.addTest('cssanimations', testAllProps('animationName', 'a', true));                                        // 2258\n                                                                                                                       // 2259\n/*!                                                                                                                    // 2260\n{                                                                                                                      // 2261\n  \"name\": \"CSS Columns\",                                                                                               // 2262\n  \"property\": \"csscolumns\",                                                                                            // 2263\n  \"caniuse\": \"multicolumn\",                                                                                            // 2264\n  \"polyfills\": [\"css3multicolumnjs\"],                                                                                  // 2265\n  \"tags\": [\"css\"]                                                                                                      // 2266\n}                                                                                                                      // 2267\n!*/                                                                                                                    // 2268\n                                                                                                                       // 2269\n                                                                                                                       // 2270\n  (function() {                                                                                                        // 2271\n                                                                                                                       // 2272\n    /* jshint -W053 */                                                                                                 // 2273\n    Modernizr.addTest('csscolumns', function(){                                                                        // 2274\n      var bool = false;                                                                                                // 2275\n      var test = testAllProps('columnCount');                                                                          // 2276\n      try {                                                                                                            // 2277\n        if ( bool = !!test ) {                                                                                         // 2278\n          bool = new Boolean(bool);                                                                                    // 2279\n        }                                                                                                              // 2280\n      } catch(e){}                                                                                                     // 2281\n                                                                                                                       // 2282\n      return bool;                                                                                                     // 2283\n    });                                                                                                                // 2284\n                                                                                                                       // 2285\n    var props = ['Width', 'Span', 'Fill', 'Gap', 'Rule', 'RuleColor', 'RuleStyle', 'RuleWidth', 'BreakBefore', 'BreakAfter', 'BreakInside'];\n    var name, test;                                                                                                    // 2287\n                                                                                                                       // 2288\n    for (var i = 0; i < props.length; i++) {                                                                           // 2289\n      name = props[i].toLowerCase();                                                                                   // 2290\n      test = testAllProps('column' + props[i]);                                                                        // 2291\n                                                                                                                       // 2292\n      // break-before, break-after & break-inside are not \"column\"-prefixed in spec                                    // 2293\n      if (name === 'breakbefore' || name === 'breakafter' || name == 'breakinside') {                                  // 2294\n        test = test || testAllProps(props[i]);                                                                         // 2295\n      }                                                                                                                // 2296\n                                                                                                                       // 2297\n      Modernizr.addTest('csscolumns.' + name, test);                                                                   // 2298\n    }                                                                                                                  // 2299\n                                                                                                                       // 2300\n                                                                                                                       // 2301\n  })();                                                                                                                // 2302\n                                                                                                                       // 2303\n                                                                                                                       // 2304\n/*!                                                                                                                    // 2305\n{                                                                                                                      // 2306\n  \"name\": \"CSS Reflections\",                                                                                           // 2307\n  \"caniuse\": \"css-reflections\",                                                                                        // 2308\n  \"property\": \"cssreflections\",                                                                                        // 2309\n  \"tags\": [\"css\"]                                                                                                      // 2310\n}                                                                                                                      // 2311\n!*/                                                                                                                    // 2312\n                                                                                                                       // 2313\n  Modernizr.addTest('cssreflections', testAllProps('boxReflect', 'above', true));                                      // 2314\n                                                                                                                       // 2315\n/*!                                                                                                                    // 2316\n{                                                                                                                      // 2317\n  \"name\": \"CSS Transforms\",                                                                                            // 2318\n  \"property\": \"csstransforms\",                                                                                         // 2319\n  \"caniuse\": \"transforms2d\",                                                                                           // 2320\n  \"tags\": [\"css\"]                                                                                                      // 2321\n}                                                                                                                      // 2322\n!*/                                                                                                                    // 2323\n                                                                                                                       // 2324\n  Modernizr.addTest('csstransforms', function() {                                                                      // 2325\n    // Android < 3.0 is buggy, so we sniff and blacklist                                                               // 2326\n    // http://git.io/hHzL7w                                                                                            // 2327\n    return navigator.userAgent.indexOf('Android 2.') === -1 &&                                                         // 2328\n           testAllProps('transform', 'scale(1)', true);                                                                // 2329\n  });                                                                                                                  // 2330\n                                                                                                                       // 2331\n/*!                                                                                                                    // 2332\n{                                                                                                                      // 2333\n  \"name\": \"CSS Transforms 3D\",                                                                                         // 2334\n  \"property\": \"csstransforms3d\",                                                                                       // 2335\n  \"caniuse\": \"transforms3d\",                                                                                           // 2336\n  \"tags\": [\"css\"],                                                                                                     // 2337\n  \"warnings\": [                                                                                                        // 2338\n    \"Chrome may occassionally fail this test on some systems; more info: https://code.google.com/p/chromium/issues/detail?id=129004\"\n  ]                                                                                                                    // 2340\n}                                                                                                                      // 2341\n!*/                                                                                                                    // 2342\n                                                                                                                       // 2343\n  Modernizr.addTest('csstransforms3d', function() {                                                                    // 2344\n    var ret = !!testAllProps('perspective', '1px', true);                                                              // 2345\n    var usePrefix = Modernizr._config.usePrefixes;                                                                     // 2346\n                                                                                                                       // 2347\n    // Webkit's 3D transforms are passed off to the browser's own graphics renderer.                                   // 2348\n    //   It works fine in Safari on Leopard and Snow Leopard, but not in Chrome in                                     // 2349\n    //   some conditions. As a result, Webkit typically recognizes the syntax but                                      // 2350\n    //   will sometimes throw a false positive, thus we must do a more thorough check:                                 // 2351\n    if ( ret && (!usePrefix || 'webkitPerspective' in docElement.style )) {                                            // 2352\n      var mq;                                                                                                          // 2353\n      // Use CSS Conditional Rules if available                                                                        // 2354\n      if (Modernizr.supports) {                                                                                        // 2355\n        mq = '@supports (perspective: 1px)';                                                                           // 2356\n      } else {                                                                                                         // 2357\n        // Otherwise, Webkit allows this media query to succeed only if the feature is enabled.                        // 2358\n        // `@media (transform-3d),(-webkit-transform-3d){ ... }`                                                       // 2359\n        mq = '@media (transform-3d)';                                                                                  // 2360\n        if (usePrefix ) mq += ',(-webkit-transform-3d)';                                                               // 2361\n      }                                                                                                                // 2362\n      // If loaded inside the body tag and the test element inherits any padding, margin or borders it will fail #740  // 2363\n      mq += '{#modernizr{left:9px;position:absolute;height:5px;margin:0;padding:0;border:0}}';                         // 2364\n                                                                                                                       // 2365\n      testStyles(mq, function( elem ) {                                                                                // 2366\n        ret = elem.offsetLeft === 9 && elem.offsetHeight === 5;                                                        // 2367\n      });                                                                                                              // 2368\n    }                                                                                                                  // 2369\n                                                                                                                       // 2370\n    return ret;                                                                                                        // 2371\n  });                                                                                                                  // 2372\n                                                                                                                       // 2373\n/*!                                                                                                                    // 2374\n{                                                                                                                      // 2375\n  \"name\": \"CSS Transitions\",                                                                                           // 2376\n  \"property\": \"csstransitions\",                                                                                        // 2377\n  \"caniuse\": \"css-transitions\",                                                                                        // 2378\n  \"tags\": [\"css\"]                                                                                                      // 2379\n}                                                                                                                      // 2380\n!*/                                                                                                                    // 2381\n                                                                                                                       // 2382\n  Modernizr.addTest('csstransitions', testAllProps('transition', 'all', true));                                        // 2383\n                                                                                                                       // 2384\n/*!                                                                                                                    // 2385\n{                                                                                                                      // 2386\n  \"name\": \"Flexbox\",                                                                                                   // 2387\n  \"property\": \"flexbox\",                                                                                               // 2388\n  \"caniuse\": \"flexbox\",                                                                                                // 2389\n  \"tags\": [\"css\"],                                                                                                     // 2390\n  \"notes\": [{                                                                                                          // 2391\n    \"name\": \"The _new_ flexbox\",                                                                                       // 2392\n    \"href\": \"http://dev.w3.org/csswg/css3-flexbox\"                                                                     // 2393\n  }],                                                                                                                  // 2394\n  \"warnings\": [                                                                                                        // 2395\n    \"A `true` result for this detect does not imply that the `flex-wrap` property is supported; see the `flexwrap` detect.\"\n  ]                                                                                                                    // 2397\n}                                                                                                                      // 2398\n!*/                                                                                                                    // 2399\n/* DOC                                                                                                                 // 2400\nDetects support for the Flexible Box Layout model, a.k.a. Flexbox, which allows easy manipulation of layout order and sizing within a container.\n*/                                                                                                                     // 2402\n                                                                                                                       // 2403\n  Modernizr.addTest('flexbox', testAllProps('flexBasis', '1px', true));                                                // 2404\n                                                                                                                       // 2405\n/*!                                                                                                                    // 2406\n{                                                                                                                      // 2407\n  \"name\": \"Flexbox (legacy)\",                                                                                          // 2408\n  \"property\": \"flexboxlegacy\",                                                                                         // 2409\n  \"tags\": [\"css\"],                                                                                                     // 2410\n  \"polyfills\": [\"flexie\"],                                                                                             // 2411\n  \"notes\": [{                                                                                                          // 2412\n    \"name\": \"The _old_ flexbox\",                                                                                       // 2413\n    \"href\": \"http://www.w3.org/TR/2009/WD-css3-flexbox-20090723/\"                                                      // 2414\n  }]                                                                                                                   // 2415\n}                                                                                                                      // 2416\n!*/                                                                                                                    // 2417\n                                                                                                                       // 2418\n  Modernizr.addTest('flexboxlegacy', testAllProps('boxDirection', 'reverse', true));                                   // 2419\n                                                                                                                       // 2420\n                                                                                                                       // 2421\n  // Run each test                                                                                                     // 2422\n  testRunner();                                                                                                        // 2423\n                                                                                                                       // 2424\n  // Remove the \"no-js\" class if it exists                                                                             // 2425\n  setClasses(classes);                                                                                                 // 2426\n                                                                                                                       // 2427\n  delete ModernizrProto.addTest;                                                                                       // 2428\n  delete ModernizrProto.addAsyncTest;                                                                                  // 2429\n                                                                                                                       // 2430\n  // Run the things that are supposed to run after the tests                                                           // 2431\n  for (var i = 0; i < Modernizr._q.length; i++) {                                                                      // 2432\n    Modernizr._q[i]();                                                                                                 // 2433\n  }                                                                                                                    // 2434\n                                                                                                                       // 2435\n  // Leak Modernizr namespace                                                                                          // 2436\n  window.Modernizr = Modernizr;                                                                                        // 2437\n                                                                                                                       // 2438\n                                                                                                                       // 2439\n                                                                                                                       // 2440\n})(window, document);                                                                                                  // 2441\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]